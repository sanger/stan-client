{"version":3,"file":"523.e2d66575.iframe.bundle.js","mappings":";;;;;AAi6KA;;;;;;;AAAA;;;;;;AAOA;;;;;;AAOA;;;;;;;AAQA;;;;;;;AAQA;;;;;AAMA;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;AAeA;;;;;AAMA;;;;;;;;;;;;;;;AAgBA;;;;AAKA;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;AAoBA;;;;;AAMA;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;AAQA;;;;;;;;AASA;;;;;;;AAQA;;;;;;;;;;;;;AAcA;;;;;AAMA;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAQA;;;;;AAeA;;;;;;;;AAAA;;;;;AAMA;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;AAMA;;;;;;AAOA;;;;;;;;AASA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;;AAOA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;AAMA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;AAMA;;;;;;;;;;;AAYA;;;;;;;;;;;AAYA;;;;;;;;;AAUA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;;;;;;AAeA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;;;;;;;;;AAYA;;;;;;;;;;AAWA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;;;AASA;;;;;;;;;;;AAYA;AACA;AACA;AACA;;;;;;;;;;;;AAaA;;;;;;;;AASA;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;;;AASA;;;;;;AAOA;AACA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAYA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;AAUA;AACA;;;;;;AAOA;;;;;;AAOA;;;;;;;;AASA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;AACA;;;;;;;;AASA;AACA;AACA;AACA;;;;;;AAOA;AACA;;;;;;;;AASA;;;;;;;;;;;;AAaA;AACA;;;;;;;;AASA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;;;;;;;;AASA;;;;;;;AAQA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;AAOA;;;;;;;;;;AAWA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;;;;;;AAOA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AASA;;;;;;AAOA;;;;;;;;;;;;;AAcA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAaA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;;;;;;AAOA;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;;;;;;;AAQA;;;;;;;;;;;;AAaA;AACA;;;;;;AAOA;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAcA;;;;;;AAOA;;;;AAKA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAYA;;;;;;AAOA;;;;;;AAOA;AACA;AACA;AACA;AACA;;;;;;AAOA;;;;;;AAOA;AACA;AACA;AACA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;;;;AAaA;AACA;;;;;;AAOA;;;;;;;AAQA;;;;AAKA;;;;AAKA;;;;;;AAOA;;;;;;;AAQA;;;;;;;AAQA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;AAOA;;;;;;;;;;;;AAaA;AACA;AACA;;;;;;AAOA;;;;;;AAOA;AACA;AACA;;;;AAKA;;;;;;AAOA;AACA;;;;;;AAOA;;;;;;;AAQA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;AAUA;AACA;;;;;;AAOA;AACA;AACA;AACA;;;;;;AAOA;;;;;;;;AASA;;;;;;AAOA;;;;;;;;;;;;AAaA;;;;;;;;;;;;AAaA;;;;;;AAOA;;;;;;AAOA;;;;;;;;;;;AAYA;AACA;;;;;;AAOA;;;;;;;;;;AAWA;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://client/./src/types/sdk.ts"],"sourcesContent":["import { GraphQLClient, RequestOptions } from 'graphql-request';\nimport { gql } from 'graphql-request';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\ntype GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  /** A row/column combination, either in the form \"B5\" (row 2, column 5), or \"32,15\" (row 32, column 15) */\n  Address: { input: string; output: string; }\n  /** A point in time, typically in the format yyyy-mm-dd HH:MM:SS. */\n  Timestamp: { input: string; output: string; }\n  /** A date, typically in the format yyyy-mm-dd. */\n  Date: { input: string; output: string; }\n};\n\n/** The levels of user privilege. */\nexport enum UserRole {\n  /** User cannot record anything. */\n  Disabled = 'disabled',\n  /** User can request work. */\n  Enduser = 'enduser',\n  /** User can record work. */\n  Normal = 'normal',\n  /** User can record work and can perform admin actions. */\n  Admin = 'admin'\n}\n\n/** The state of an item of labware. */\nexport enum LabwareState {\n  /** The labware contains no samples. */\n  Empty = 'empty',\n  /** The labware contains samples and can be used as a source in operations. */\n  Active = 'active',\n  /** The labware has been used and discarded. */\n  Discarded = 'discarded',\n  /** The labware has been given out to another team or organisation. */\n  Released = 'released',\n  /** The labware has been destroyed for a specific reason. */\n  Destroyed = 'destroyed',\n  /** The labware has been used but may still be stored. */\n  Used = 'used'\n}\n\n/** A pass or fail result. */\nexport enum PassFail {\n  Pass = 'pass',\n  Fail = 'fail'\n}\n\n/** A type of control. */\nexport enum ControlType {\n  Positive = 'positive',\n  Negative = 'negative'\n}\n\n/** A stage of life that an individual has reached when tissue is collected. */\nexport enum LifeStage {\n  Adult = 'adult',\n  Paediatric = 'paediatric',\n  Fetal = 'fetal'\n}\n\n/** Some information about the costing of a slide. */\nexport enum SlideCosting {\n  Faculty = 'Faculty',\n  Sgp = 'SGP',\n  WarrantyReplacement = 'Warranty_replacement'\n}\n\n/** Position of a cassette in an analyser. */\nexport enum CassettePosition {\n  Left = 'left',\n  Right = 'right'\n}\n\n/** Whether an operation was automated or manual. */\nexport enum ExecutionType {\n  Automated = 'automated',\n  Manual = 'manual'\n}\n\n/** Priority of labware flags. */\nexport enum FlagPriority {\n  Note = 'note',\n  Flag = 'flag'\n}\n\n/** A user, who is associated with performing actions in the application. */\nexport type User = {\n  __typename?: 'User';\n  username: Scalars['String']['output'];\n  role: UserRole;\n};\n\n/** The result of an attempt to log in. */\nexport type LoginResult = {\n  __typename?: 'LoginResult';\n  /** The message describing the result of the login, if any. */\n  message?: Maybe<Scalars['String']['output']>;\n  /** The authenticated user, if any. */\n  user?: Maybe<User>;\n};\n\n/** A chemical a sample is put in. */\nexport type Medium = {\n  __typename?: 'Medium';\n  name: Scalars['String']['output'];\n};\n\n/** A chemical used to fix a sample. */\nexport type Fixative = {\n  __typename?: 'Fixative';\n  name: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** The type of tissue, typically an organ. */\nexport type TissueType = {\n  __typename?: 'TissueType';\n  /** The name of the tissue type. */\n  name: Scalars['String']['output'];\n  /** The short code for the tissue type. */\n  code: Scalars['String']['output'];\n  /** The possible spatial locations for tissue of this type. */\n  spatialLocations: Array<SpatialLocation>;\n};\n\n/** A location in an organ that tissue was taken from. */\nexport type SpatialLocation = {\n  __typename?: 'SpatialLocation';\n  name: Scalars['String']['output'];\n  /** The int code used to identify this spatial location in the particular tissue type. */\n  code: Scalars['Int']['output'];\n  /** The tissue type (organ) to which this location belongs. */\n  tissueType: TissueType;\n};\n\n/** A permission number that can be linked to tissue. */\nexport type Hmdmc = {\n  __typename?: 'Hmdmc';\n  /** The HMDMC code for this permission. */\n  hmdmc: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** Biological risk assessment number. */\nexport type BioRisk = {\n  __typename?: 'BioRisk';\n  /** The alphanumeric code representing this risk assessment. */\n  code: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A link between a sample and a bio risk. */\nexport type SampleBioRisk = {\n  __typename?: 'SampleBioRisk';\n  sampleId: Scalars['Int']['output'];\n  bioRiskCode: Scalars['String']['output'];\n};\n\n/** A type of label that can be printed, typically including a barcode and some other information. */\nexport type LabelType = {\n  __typename?: 'LabelType';\n  name: Scalars['String']['output'];\n};\n\n/** A type of labware, such as slides and tubes. */\nexport type LabwareType = {\n  __typename?: 'LabwareType';\n  name: Scalars['String']['output'];\n  /** The number of rows in an item of this labware type. */\n  numRows: Scalars['Int']['output'];\n  /** The number of columns in an item of this labware type. */\n  numColumns: Scalars['Int']['output'];\n  /** The type of label that should be used for this labware type. */\n  labelType?: Maybe<LabelType>;\n};\n\n/** A species, such as human, to which tissue may belong. */\nexport type Species = {\n  __typename?: 'Species';\n  name: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A particular individual from which one or more instances of tissue may be taken. */\nexport type Donor = {\n  __typename?: 'Donor';\n  donorName: Scalars['String']['output'];\n  /** The stage of life of this donor at the point the tissue was collected. */\n  lifeStage?: Maybe<LifeStage>;\n  species: Species;\n};\n\n/** The state of a particular sample. As samples are created in new labware by different operations, it is associated with new bio states. */\nexport type BioState = {\n  __typename?: 'BioState';\n  name: Scalars['String']['output'];\n};\n\n/** A piece of tissue from which multiple samples may originate. */\nexport type Tissue = {\n  __typename?: 'Tissue';\n  externalName?: Maybe<Scalars['String']['output']>;\n  /** A number (optionall followed by a letter) that helps to distinguish this tissue from other similar tissues. */\n  replicate?: Maybe<Scalars['String']['output']>;\n  /** The location in a particular organ from which this tissue was taken. */\n  spatialLocation: SpatialLocation;\n  /** The individual from whom this tissue was taken. */\n  donor: Donor;\n  hmdmc?: Maybe<Hmdmc>;\n  /** The medium used on this tissue. */\n  medium: Medium;\n  /** The fixative used on this tissue. */\n  fixative: Fixative;\n  /** The date the original sample was collected, if known. */\n  collectionDate?: Maybe<Scalars['Date']['output']>;\n};\n\n/** A particular sample of tissue, in a particular state. */\nexport type Sample = {\n  __typename?: 'Sample';\n  id: Scalars['Int']['output'];\n  /** An optional number describing the particular slice through the block of tissue that this sample came from. */\n  section?: Maybe<Scalars['Int']['output']>;\n  /** The tissue this sample is derived from. */\n  tissue: Tissue;\n  /** The state of this particular sample. */\n  bioState: BioState;\n};\n\n/** A slot in a piece of labware, which may contain samples. */\nexport type Slot = {\n  __typename?: 'Slot';\n  /** The unique id of this slot. */\n  id: Scalars['Int']['output'];\n  /** The address of this slot inside its labware. No two slots in the same item of labware have the same address. */\n  address: Scalars['Address']['output'];\n  /** The id of the labware to which the slot belongs. */\n  labwareId: Scalars['Int']['output'];\n  /** The list of samples contained in this slot. May be empty. */\n  samples: Array<Sample>;\n  /** Is this slot a block of tissue? Blocks have different properties from sections. */\n  block: Scalars['Boolean']['output'];\n  /** For blocks, what is the highest section number already taken from this block? */\n  blockHighestSection?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type Labware = {\n  __typename?: 'Labware';\n  /** The unique id of this labware. */\n  id: Scalars['Int']['output'];\n  /** The unique barcode of this labware. */\n  barcode: Scalars['String']['output'];\n  /** The external barcode of this labware, as input by the user. */\n  externalBarcode?: Maybe<Scalars['String']['output']>;\n  /** The type of labware. */\n  labwareType: LabwareType;\n  /** The slots in this labware. The number of slots and their addresses are determined by the labware type. */\n  slots: Array<Slot>;\n  /** Has this labware been released? */\n  released: Scalars['Boolean']['output'];\n  /** Has this labware been destroyed? */\n  destroyed: Scalars['Boolean']['output'];\n  /** Has this labware been discarded? */\n  discarded: Scalars['Boolean']['output'];\n  /** Has this labware been marked as used? */\n  used: Scalars['Boolean']['output'];\n  /** The state, derived from the contents and other fields on the labware. */\n  state: LabwareState;\n  /** The time when this labware was created in the application. */\n  created: Scalars['Timestamp']['output'];\n};\n\n/** Labware with an additional field specifying whether it is flagged. */\nexport type LabwareFlagged = {\n  __typename?: 'LabwareFlagged';\n  /** The unique id of this labware. */\n  id: Scalars['Int']['output'];\n  /** The unique barcode of this labware. */\n  barcode: Scalars['String']['output'];\n  /** The external barcode of this labware, as input by the user. */\n  externalBarcode?: Maybe<Scalars['String']['output']>;\n  /** The type of labware. */\n  labwareType: LabwareType;\n  /** The slots in this labware. The number of slots and their addresses are determined by the labware type. */\n  slots: Array<Slot>;\n  /** Has this labware been released? */\n  released: Scalars['Boolean']['output'];\n  /** Has this labware been destroyed? */\n  destroyed: Scalars['Boolean']['output'];\n  /** Has this labware been discarded? */\n  discarded: Scalars['Boolean']['output'];\n  /** Has this labware been marked as used? */\n  used: Scalars['Boolean']['output'];\n  /** The state, derived from the contents and other fields on the labware. */\n  state: LabwareState;\n  /** The time when this labware was created in the application. */\n  created: Scalars['Timestamp']['output'];\n  /** Is there a labware flag applicable to this labware? */\n  flagged: Scalars['Boolean']['output'];\n  /** The highest priority of flag on this labware, if any. */\n  flagPriority?: Maybe<FlagPriority>;\n};\n\n/** A solution used in an operation. */\nexport type Solution = {\n  __typename?: 'Solution';\n  /** The unique name of the solution. */\n  name: Scalars['String']['output'];\n  /** Whether the solution is available for use. */\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A project in Omero. */\nexport type OmeroProject = {\n  __typename?: 'OmeroProject';\n  /** The name of the Omero project. */\n  name: Scalars['String']['output'];\n  /** Whether the Omero project is available for use in Stan. */\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A probe panel. */\nexport type ProbePanel = {\n  __typename?: 'ProbePanel';\n  /** The name of the probe panel. */\n  name: Scalars['String']['output'];\n  /** Whether the probe panel is available for use. */\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A request to register a new block of tissue. */\nexport type BlockRegisterRequest = {\n  /** The string to use as the donor name. */\n  donorIdentifier: Scalars['String']['input'];\n  /** The life stage of the donor. */\n  lifeStage?: InputMaybe<LifeStage>;\n  /** The HMDMC to use for the tissue. */\n  hmdmc?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the tissue type (the organ from which the tissue is taken). */\n  tissueType: Scalars['String']['input'];\n  /** The code for the spatial location from which the tissue is taken. */\n  spatialLocation: Scalars['Int']['input'];\n  /** The string to use for the replicate number of the tissue. */\n  replicateNumber: Scalars['String']['input'];\n  /** The external identifier used to identify the tissue. */\n  externalIdentifier: Scalars['String']['input'];\n  /** The highest section already taken from the tissue block. */\n  highestSection: Scalars['Int']['input'];\n  /** The name of the type of labware containing the block. */\n  labwareType: Scalars['String']['input'];\n  /** The medium used for the tissue. */\n  medium: Scalars['String']['input'];\n  /** The fixative used for the tissue. */\n  fixative: Scalars['String']['input'];\n  /** The species of the donor. */\n  species: Scalars['String']['input'];\n  /** Is this a new block of tissue already in the application's database? */\n  existingTissue?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The date the original sample was collected, if known. */\n  sampleCollectionDate?: InputMaybe<Scalars['Date']['input']>;\n  /** The biological risk number for this block. */\n  bioRiskCode: Scalars['String']['input'];\n};\n\n/** A request to register one or more blocks of tissue. */\nexport type RegisterRequest = {\n  blocks: Array<BlockRegisterRequest>;\n  workNumbers: Array<Scalars['String']['input']>;\n};\n\n/** Information about a section of tissue (already taken from some a block tracked elsewhere) to register. */\nexport type SectionRegisterContent = {\n  /** The address of the slot in the labware where this section should be created. */\n  address: Scalars['Address']['input'];\n  /** The species from which this section originates. */\n  species: Scalars['String']['input'];\n  /** A HMDMC number, if any, to associate with this sample. */\n  hmdmc?: InputMaybe<Scalars['String']['input']>;\n  /** A name for the donor. */\n  donorIdentifier: Scalars['String']['input'];\n  /** The life stage of the donor. */\n  lifeStage?: InputMaybe<LifeStage>;\n  /** The external name for the tissue from which this section was taken. */\n  externalIdentifier: Scalars['String']['input'];\n  /** The name of the tissue type (organ) for the tissue. */\n  tissueType: Scalars['String']['input'];\n  /** The code for the spatial location from which the tissue is taken. */\n  spatialLocation: Scalars['Int']['input'];\n  /** The string to use for the replicate number of the tissue. */\n  replicateNumber: Scalars['String']['input'];\n  /** The fixative used for the tissue. */\n  fixative: Scalars['String']['input'];\n  /** The medium used for the tissue. */\n  medium: Scalars['String']['input'];\n  /** The section number of this particular section from its original tissue block. */\n  sectionNumber: Scalars['Int']['input'];\n  /** The thickness, if known, of this section. */\n  sectionThickness?: InputMaybe<Scalars['String']['input']>;\n  /** The region of this sample in this slot, if any. */\n  region?: InputMaybe<Scalars['String']['input']>;\n  /** The date the sample was sectioned. */\n  dateSectioned?: InputMaybe<Scalars['Date']['input']>;\n  /** The biological risk code for this sample. */\n  bioRiskCode: Scalars['String']['input'];\n};\n\n/** A request to register one or more sections into one piece of labware. */\nexport type SectionRegisterLabware = {\n  /** The name of the type of labware. */\n  labwareType: Scalars['String']['input'];\n  /** The external barcode of this labware. */\n  externalBarcode: Scalars['String']['input'];\n  /** The prebarcode of this labware, if any. */\n  preBarcode?: InputMaybe<Scalars['String']['input']>;\n  /** The contents of the labware (new sections). */\n  contents: Array<SectionRegisterContent>;\n};\n\n/** A request to register one or more labware containing new sections. */\nexport type SectionRegisterRequest = {\n  /** The details of the labware being registered. */\n  labware: Array<SectionRegisterLabware>;\n  /** The work number to associate with the registration. */\n  workNumber: Scalars['String']['input'];\n};\n\n/** Data about registering a new original sample. */\nexport type OriginalSampleData = {\n  /** The string to use as the donor name. */\n  donorIdentifier: Scalars['String']['input'];\n  /** The life stage of the donor. */\n  lifeStage?: InputMaybe<LifeStage>;\n  /** The HMDMC to use for the tissue. */\n  hmdmc?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the tissue type (the organ from which the tissue is taken). */\n  tissueType: Scalars['String']['input'];\n  /** The code for the spatial location from which the tissue is taken. */\n  spatialLocation: Scalars['Int']['input'];\n  /** The string to use for the replicate number of the tissue (optional). */\n  replicateNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The external identifier used to identify the tissue. */\n  externalIdentifier?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the type of labware containing the sample. */\n  labwareType: Scalars['String']['input'];\n  /** The solution used for the tissue. */\n  solution: Scalars['String']['input'];\n  /** The fixative used for the tissue. */\n  fixative: Scalars['String']['input'];\n  /** The species of the donor. */\n  species: Scalars['String']['input'];\n  /** The date the original sample was collected, if known. */\n  sampleCollectionDate?: InputMaybe<Scalars['Date']['input']>;\n  /** The optional work number to link to the registration. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The biological risk number for this sample. */\n  bioRiskCode: Scalars['String']['input'];\n};\n\n/** A request to register one or more original samples of tissue. */\nexport type OriginalSampleRegisterRequest = {\n  samples: Array<OriginalSampleData>;\n};\n\n/** Information about a clash, where a given tissue name already exists in the database. */\nexport type RegisterClash = {\n  __typename?: 'RegisterClash';\n  /** The tissue with the given name. */\n  tissue: Tissue;\n  /** The existing labware containing the tissue at registration. */\n  labware: Array<Labware>;\n};\n\n/** A labware barcode and name of a solution. */\nexport type LabwareSolutionName = {\n  __typename?: 'LabwareSolutionName';\n  /** The barcode of an item of labware. */\n  barcode: Scalars['String']['output'];\n  /** The name of a solution. */\n  solutionName: Scalars['String']['output'];\n};\n\n/** The result of a register request. It is expected to contain either labware or clashes. */\nexport type RegisterResult = {\n  __typename?: 'RegisterResult';\n  /** The labware created. */\n  labware: Array<Labware>;\n  /** The clashes that prevented registration. */\n  clashes: Array<RegisterClash>;\n  /** The names of solutions used for labware barcodes, if any. */\n  labwareSolutions: Array<Maybe<LabwareSolutionName>>;\n};\n\n/** A description of a source slot in a plan request. */\nexport type PlanRequestSource = {\n  /** The barcode of the source labware. */\n  barcode: Scalars['String']['input'];\n  /** The address of the source slot in its labware. May be assumed to be A1 if omitted. */\n  address?: InputMaybe<Scalars['Address']['input']>;\n};\n\n/** A type of operation that may be recorded. */\nexport type OperationType = {\n  __typename?: 'OperationType';\n  name: Scalars['String']['output'];\n};\n\n/** A planned action in a planned operation; describes a sample moving from one slot to another. */\nexport type PlanAction = {\n  __typename?: 'PlanAction';\n  /** The source slot that contains the sample. */\n  source: Slot;\n  /** The destination slot to which we want to add a sample. */\n  destination: Slot;\n  /** The sample in the source labware that we want to act upon. */\n  sample: Sample;\n  /** The new section number, if the source is a block and it is being sectioned. */\n  newSection?: Maybe<Scalars['Int']['output']>;\n};\n\n/** A planned operation. */\nexport type PlanOperation = {\n  __typename?: 'PlanOperation';\n  /** The type of operation planned. */\n  operationType?: Maybe<OperationType>;\n  /** The planned actions that describe the movement of samples in this operation. */\n  planActions: Array<PlanAction>;\n};\n\n/** A specification of an action in a plan request. Describes the action on a sample being transferred between slots. */\nexport type PlanRequestAction = {\n  /** The intended address of the sample in the destination labware. */\n  address: Scalars['Address']['input'];\n  /** The id of the existing sample. */\n  sampleId: Scalars['Int']['input'];\n  /** The thickness (if specified) of the new sample. */\n  sampleThickness?: InputMaybe<Scalars['String']['input']>;\n  /** The source of the sample (describing a slot in some existing labware). */\n  source: PlanRequestSource;\n};\n\n/** A specification of new labware to be created for a plan request. */\nexport type PlanRequestLabware = {\n  /** The name of the type of labware. */\n  labwareType: Scalars['String']['input'];\n  /** The barcode of the new labware, if the user needs to specify it. */\n  barcode?: InputMaybe<Scalars['String']['input']>;\n  /** The lot number of the new labware, if any. */\n  lotNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The costing of the labware, if any. */\n  costing?: InputMaybe<SlideCosting>;\n  /** The actions, specifying which samples are transferred between which slots. */\n  actions: Array<PlanRequestAction>;\n};\n\n/** A request to create a plan operation. */\nexport type PlanRequest = {\n  /** The name of the type of operation we are planning. */\n  operationType: Scalars['String']['input'];\n  /** The specification of the labware created for the plan. */\n  labware: Array<PlanRequestLabware>;\n};\n\n/** A combination of an address and a comment id, used to record comments in particular slots of labware. */\nexport type AddressCommentInput = {\n  /** The address of a slot. */\n  address: Scalars['Address']['input'];\n  /** The id of a comment in the database. */\n  commentId: Scalars['Int']['input'];\n};\n\n/** A request to cancel a particular planned action in a planned operation. */\nexport type CancelPlanAction = {\n  /** The destination address of the planned action to cancel. */\n  destinationAddress: Scalars['Address']['input'];\n  /** The sample id of the planned action to cancel. */\n  sampleId: Scalars['Int']['input'];\n  /** The new section number (if any) of the planned action to cancel. */\n  newSection?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A specification of a particular piece of labware in a confirm request. */\nexport type ConfirmOperationLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** Should the whole labware be cancelled? Default false. */\n  cancelled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What individual planned actions should be cancelled, if any. */\n  cancelledActions?: InputMaybe<Array<CancelPlanAction>>;\n  /** What comments, if any, should be recorded against particular addresses. */\n  addressComments?: InputMaybe<Array<AddressCommentInput>>;\n};\n\n/** A request to confirm planned operations, created actual operations. */\nexport type ConfirmOperationRequest = {\n  labware: Array<ConfirmOperationLabware>;\n};\n\n/** A specification of a section to confirm in a planned sectioning operation. */\nexport type ConfirmSection = {\n  /** The address of the destination slot for the section. */\n  destinationAddress: Scalars['Address']['input'];\n  /** The original sample id of the source. */\n  sampleId: Scalars['Int']['input'];\n  /** The section number of the new section. */\n  newSection?: InputMaybe<Scalars['Int']['input']>;\n  /** The comment ids to record against this sample in this slot. */\n  commentIds?: InputMaybe<Array<Scalars['Int']['input']>>;\n  /** The region of this sample in this slot, if any. */\n  region?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A specification of a particular piece of labware to confirm or cancel planned sectioning into. */\nexport type ConfirmSectionLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The work number to link to the operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** Should the whole labware be cancelled? Default false. */\n  cancelled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** What individual sections, if any, should be created in the labware? */\n  confirmSections?: InputMaybe<Array<ConfirmSection>>;\n  /** What comments, if any, should be recorded on slots of the labware? */\n  addressComments?: InputMaybe<Array<AddressCommentInput>>;\n};\n\n/** A request to confirm (or cancel) planned sectioning operations. */\nexport type ConfirmSectionRequest = {\n  /** The specification of what to confirm or cancel in each labware. */\n  labware: Array<ConfirmSectionLabware>;\n};\n\n/** A specification that the contents of one slot should be copied to a particular address in new labware. */\nexport type SlotCopyContent = {\n  /** The barcode of the source labware. */\n  sourceBarcode: Scalars['String']['input'];\n  /** The address of the source slot in its labware. */\n  sourceAddress: Scalars['Address']['input'];\n  /** The address of the destination slot. */\n  destinationAddress: Scalars['Address']['input'];\n};\n\n/** A destination for slot copy. */\nexport type SlotCopyDestination = {\n  /** The name of the type of the destination labware (if it is new labware). */\n  labwareType?: InputMaybe<Scalars['String']['input']>;\n  /** The barcode of the existing piece of labware. */\n  barcode?: InputMaybe<Scalars['String']['input']>;\n  /** The bio state for samples in the destination (if specified). */\n  bioState?: InputMaybe<Scalars['String']['input']>;\n  /** The costing of the slide, if specified. */\n  costing?: InputMaybe<SlideCosting>;\n  /** The lot number of the slide, if specified. */\n  lotNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The probe lot number of the slide, if specified. */\n  probeLotNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The barcode of the new labware, if it is prebarcoded. */\n  preBarcode?: InputMaybe<Scalars['String']['input']>;\n  /** The LP number of the new labware, if it has one. */\n  lpNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The specifications of which source slots are being copied into what addresses in the destination labware. */\n  contents: Array<SlotCopyContent>;\n};\n\n/** A source for slot copy, if a new labware state is specified. */\nexport type SlotCopySource = {\n  /** The barcode of the source. */\n  barcode: Scalars['String']['input'];\n  /** The new labware state of the source. */\n  labwareState: LabwareState;\n};\n\n/** A request to copy the contents of slots from source labware to multiple new or prebarcoded destinations. */\nexport type SlotCopyRequest = {\n  /** The destination labware and its contents. */\n  destinations: Array<SlotCopyDestination>;\n  /** The source labware and their new labware states (if specified). */\n  sources: Array<SlotCopySource>;\n  /** The name of the type of operation being recorded to describe the contents being copied. */\n  operationType: Scalars['String']['input'];\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the execution was automated or manual. */\n  executionType?: InputMaybe<ExecutionType>;\n};\n\n/** Saved data for an incomplete slot copy operation. */\nexport type SlotCopySave = {\n  /** The source labware and their new labware states (if specified). */\n  sources: Array<SlotCopySource>;\n  /** The name of the type of operation being recorded to describe the contents being copied. */\n  operationType: Scalars['String']['input'];\n  /** An optional work number to associate with this operation. */\n  workNumber: Scalars['String']['input'];\n  /** The LP number of the new labware, required. */\n  lpNumber: Scalars['String']['input'];\n  /** Whether the execution was automated or manual. */\n  executionType?: InputMaybe<ExecutionType>;\n  /** The name of the type of the destination labware (if it is new labware). */\n  labwareType?: InputMaybe<Scalars['String']['input']>;\n  /** The barcode of the existing piece of labware. */\n  barcode?: InputMaybe<Scalars['String']['input']>;\n  /** The bio state for samples in the destination (if specified). */\n  bioState?: InputMaybe<Scalars['String']['input']>;\n  /** The costing of the slide, if specified. */\n  costing?: InputMaybe<SlideCosting>;\n  /** The lot number of the slide, if specified. */\n  lotNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The probe lot number of the slide, if specified. */\n  probeLotNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The barcode of the new labware, if it is prebarcoded. */\n  preBarcode?: InputMaybe<Scalars['String']['input']>;\n  /** The specifications of which source slots are being copied into what addresses in the destination labware. */\n  contents: Array<SlotCopyContent>;\n};\n\n/** Loaded data about a source labware for an incomplete slot copy operation. */\nexport type SlotCopyLoadSource = {\n  __typename?: 'SlotCopyLoadSource';\n  /** The barcode of the source. */\n  barcode: Scalars['String']['output'];\n  /** The new labware state of the source. */\n  labwareState: LabwareState;\n};\n\n/** Loaded data about a transfer in an incomplete slot copy operation. */\nexport type SlotCopyLoadContent = {\n  __typename?: 'SlotCopyLoadContent';\n  /** The barcode of the source labware. */\n  sourceBarcode: Scalars['String']['output'];\n  /** The address of the source slot in its labware. */\n  sourceAddress: Scalars['Address']['output'];\n  /** The address of the destination slot. */\n  destinationAddress: Scalars['Address']['output'];\n};\n\n/** Loaded data for an incomplete slot copy operation. */\nexport type SlotCopyLoad = {\n  __typename?: 'SlotCopyLoad';\n  /** The source labware and their new labware states (if specified). */\n  sources: Array<SlotCopyLoadSource>;\n  /** The name of the type of operation being recorded to describe the contents being copied. */\n  operationType: Scalars['String']['output'];\n  /** An optional work number to associate with this operation. */\n  workNumber: Scalars['String']['output'];\n  /** The LP number of the new labware, required. */\n  lpNumber: Scalars['String']['output'];\n  /** Whether the execution was automated or manual. */\n  executionType?: Maybe<ExecutionType>;\n  /** The name of the type of the destination labware (if it is new labware). */\n  labwareType?: Maybe<Scalars['String']['output']>;\n  /** The barcode of the existing piece of labware. */\n  barcode?: Maybe<Scalars['String']['output']>;\n  /** The bio state for samples in the destination (if specified). */\n  bioState?: Maybe<Scalars['String']['output']>;\n  /** The costing of the slide, if specified. */\n  costing?: Maybe<SlideCosting>;\n  /** The lot number of the slide, if specified. */\n  lotNumber?: Maybe<Scalars['String']['output']>;\n  /** The probe lot number of the slide, if specified. */\n  probeLotNumber?: Maybe<Scalars['String']['output']>;\n  /** The barcode of the new labware, if it is prebarcoded. */\n  preBarcode?: Maybe<Scalars['String']['output']>;\n  /** The specifications of which source slots are being copied into what addresses in the destination labware. */\n  contents: Array<SlotCopyLoadContent>;\n};\n\n/** A request to record an operation in place. */\nexport type InPlaceOpRequest = {\n  /** The name of the type of operation being recorded. */\n  operationType: Scalars['String']['input'];\n  /** The barcodes of the labware. */\n  barcodes: Array<Scalars['String']['input']>;\n  /** The id of the equipment (if any) being used in this operation. */\n  equipmentId?: InputMaybe<Scalars['Int']['input']>;\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A record of material being transferred from one slot to another as part of an operation. */\nexport type Action = {\n  __typename?: 'Action';\n  /** The source slot, where the sample already was before the operation. */\n  source: Slot;\n  /** The destination slot, where the sample is after the operation. */\n  destination: Slot;\n  /** The id of the operation to which this action belongs. */\n  operationId: Scalars['Int']['output'];\n  /** The sample as it was created or copied in its destination slot. */\n  sample: Sample;\n};\n\n/** A record of a particular operation being done involving labware and samples. */\nexport type Operation = {\n  __typename?: 'Operation';\n  /** The unique id of the operation. */\n  id: Scalars['Int']['output'];\n  /** The type of operation. */\n  operationType: OperationType;\n  /** The specific samples and slots and how they were used in this operation. */\n  actions: Array<Action>;\n  /** The user responsible for this operation. */\n  user: User;\n  /** The time at which this operation is regarded to have been performed (typically the time it was recorded). */\n  performed: Scalars['Timestamp']['output'];\n};\n\n/** The result of confirming a plan. */\nexport type ConfirmOperationResult = {\n  __typename?: 'ConfirmOperationResult';\n  /** The labware populated by the operations. */\n  labware: Array<Labware>;\n  /** The operations created. */\n  operations: Array<Operation>;\n};\n\n/** The result of creating a new plan. */\nexport type PlanResult = {\n  __typename?: 'PlanResult';\n  /** The labware created for the plan, which is empty until the plan is confirmed. */\n  labware: Array<Labware>;\n  /** The planned operations created. */\n  operations: Array<PlanOperation>;\n};\n\n/** A printer, typically used to print labels for labware. */\nexport type Printer = {\n  __typename?: 'Printer';\n  name: Scalars['String']['output'];\n  /** The types of labels this printer is set up to print. */\n  labelTypes: Array<LabelType>;\n};\n\n/** A preset comment that users may select to link to parts of operations they record. */\nexport type Comment = {\n  __typename?: 'Comment';\n  /** The unique id of this comment. */\n  id: Scalars['Int']['output'];\n  /** The text content of the comment: What comment is it? */\n  text: Scalars['String']['output'];\n  /** The category of the comment: Where is it applicable? */\n  category: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A description of a region in a slot. */\nexport type SlotRegion = {\n  __typename?: 'SlotRegion';\n  /** The name of this region. */\n  name: Scalars['String']['output'];\n  /** Whether this region is enabled. */\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** The region of a sample in a particular slot. */\nexport type SamplePosition = {\n  __typename?: 'SamplePosition';\n  /** The ID of the slot. */\n  slotId: Scalars['Int']['output'];\n  /** The address of the slot. */\n  address: Scalars['Address']['output'];\n  /** The ID of the sample. */\n  sampleId: Scalars['Int']['output'];\n  /** The name of the region of the sample in the slot. */\n  region: Scalars['String']['output'];\n  /** The operation id related to this sample position */\n  operationId: Scalars['Int']['output'];\n};\n\n/** A piece of equipment that may be associated with certain operations. */\nexport type Equipment = {\n  __typename?: 'Equipment';\n  /** The unique id of this equipment. */\n  id: Scalars['Int']['output'];\n  name: Scalars['String']['output'];\n  /** The category of equipment: What kind of thing is it or what is it used for? */\n  category: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A description of a place to which labware may be released. */\nexport type ReleaseDestination = {\n  __typename?: 'ReleaseDestination';\n  name: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A username for someone responsible for receiving released labware. */\nexport type ReleaseRecipient = {\n  __typename?: 'ReleaseRecipient';\n  username: Scalars['String']['output'];\n  fullName?: Maybe<Scalars['String']['output']>;\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A record that labware was sent out or given away. */\nexport type Release = {\n  __typename?: 'Release';\n  /** The unique id of this release. */\n  id: Scalars['Int']['output'];\n  /** The labware that was released. */\n  labware: Labware;\n  /** Where the labware was sent. */\n  destination: ReleaseDestination;\n  /** Who is responsible for receiving the labware. */\n  recipient: ReleaseRecipient;\n};\n\n/** The result of a release request. */\nexport type ReleaseResult = {\n  __typename?: 'ReleaseResult';\n  /** The releases recorded for this request. */\n  releases: Array<Release>;\n};\n\n/** Details of a particular labware being released. */\nexport type ReleaseLabware = {\n  /** The barcode of the labware to release. */\n  barcode: Scalars['String']['input'];\n  /** The work number (optional) to associate with the release. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A request to record releases for one or more labware. */\nexport type ReleaseRequest = {\n  /** The details of the labware being released. */\n  releaseLabware: Array<ReleaseLabware>;\n  /** The name of the release destination. */\n  destination: Scalars['String']['input'];\n  /** The name of the release recipient. */\n  recipient: Scalars['String']['input'];\n  /** Additional recipients. */\n  otherRecipients?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** Release column groups for the release file. */\n  columnOptions?: InputMaybe<Array<Scalars['String']['input']>>;\n};\n\n/** An option for customising the columns in a release file. */\nexport type ReleaseFileOption = {\n  __typename?: 'ReleaseFileOption';\n  /** The name that is displayed to the user. */\n  displayName: Scalars['String']['output'];\n  /** The option name that is used as a query parameter. */\n  queryParamName: Scalars['String']['output'];\n};\n\n/** A request to record an extract operation. */\nexport type ExtractRequest = {\n  /** The barcodes of the source labware. */\n  barcodes: Array<Scalars['String']['input']>;\n  /** The name of the labware type for the new destination labware. */\n  labwareType: Scalars['String']['input'];\n  /** An optional work number to associate with these operations. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the equipment being used in the extraction. If manual equipmentId is undefined */\n  equipmentId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The result of a request to record operations. */\nexport type OperationResult = {\n  __typename?: 'OperationResult';\n  /** The destination labware for the operations. */\n  labware: Array<Labware>;\n  /** The new operations recorded. */\n  operations: Array<Operation>;\n};\n\n/** A preset reason that labware may be destroyed. */\nexport type DestructionReason = {\n  __typename?: 'DestructionReason';\n  /** The unique id of this destruction reason. */\n  id: Scalars['Int']['output'];\n  /** The text of this reason: What reason is it? */\n  text: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A record that some piece of labware was destroyed for some particular reason. */\nexport type Destruction = {\n  __typename?: 'Destruction';\n  /** The labware destroyed. */\n  labware?: Maybe<Labware>;\n  /** The user responsible for the destruction. */\n  user?: Maybe<User>;\n  /** The time the destruction was carried out (or at least when it was recorded). */\n  destroyed?: Maybe<Scalars['Timestamp']['output']>;\n  /** The reason for the destruction. */\n  reason?: Maybe<DestructionReason>;\n};\n\n/** The result of a request to destroy labware. */\nexport type DestroyResult = {\n  __typename?: 'DestroyResult';\n  /** The destructions created for this request. */\n  destructions: Array<Destruction>;\n};\n\n/** A request to destroy some labware for a particular reason. */\nexport type DestroyRequest = {\n  /** The barcodes of the labware to destroy. */\n  barcodes: Array<Scalars['String']['input']>;\n  /** The id of a destruction reason. */\n  reasonId: Scalars['Int']['input'];\n};\n\n/** An item in storage. */\nexport type StoredItem = {\n  __typename?: 'StoredItem';\n  /** The barcode of the item. */\n  barcode: Scalars['String']['output'];\n  /** The location of the item. */\n  location: Location;\n  /** The row/column address (if any) of the item in its location. */\n  address?: Maybe<Scalars['Address']['output']>;\n  /** The index of the address (if any) in the location. */\n  addressIndex?: Maybe<Scalars['Int']['output']>;\n};\n\n/** An item no longer in storage. */\nexport type UnstoredItem = {\n  __typename?: 'UnstoredItem';\n  /** The barcode of the item. */\n  barcode: Scalars['String']['output'];\n  /** The row/column address (if any) where the item was stored. */\n  address?: Maybe<Scalars['Address']['output']>;\n};\n\n/** The size of a 2D grid. */\nexport type Size = {\n  __typename?: 'Size';\n  /** The number of rows in this layout. */\n  numRows: Scalars['Int']['output'];\n  /** The number of columns in this layout. */\n  numColumns: Scalars['Int']['output'];\n};\n\n/** A traversal order for a grid. */\nexport enum GridDirection {\n  /** Right across the top row, then down to the next row, etc. */\n  RightDown = 'RightDown',\n  /** Down the leftmost column, then right to the next column, etc. */\n  DownRight = 'DownRight',\n  /** Right across the bottom row, then up to the next row, etc. */\n  RightUp = 'RightUp',\n  /** Up the leftmost column, then right to the next column, etc. */\n  UpRight = 'UpRight'\n}\n\n/** A location where items may be stored. */\nexport type Location = {\n  __typename?: 'Location';\n  /** The unique id of this location. */\n  id: Scalars['Int']['output'];\n  /** The unique barcode of this location. */\n  barcode: Scalars['String']['output'];\n  /** The fixed name (if any) of this location, not changeable through this API. */\n  fixedName?: Maybe<Scalars['String']['output']>;\n  /** The custom name (if any) of this location, that may be changed through this API. */\n  customName?: Maybe<Scalars['String']['output']>;\n  /** The row/column address (if any) of this location in its parent location. */\n  address?: Maybe<Scalars['Address']['output']>;\n  /** The size of the grid (if any) where items may be stored in this location. */\n  size?: Maybe<Size>;\n  /** Some information about the location (if any) containing this location. */\n  parent?: Maybe<LinkedLocation>;\n  /** The items stored in this location. */\n  stored: Array<StoredItem>;\n  /** The other locations inside this location. */\n  children: Array<LinkedLocation>;\n  /** The suggested order (if any) of addresses in this location where items should be stored. */\n  direction?: Maybe<GridDirection>;\n  /** A combination of this location's name and its parents' names and barcodes. */\n  qualifiedNameWithFirstBarcode?: Maybe<Scalars['String']['output']>;\n  /** The number of items directly stored in this location. */\n  numStored: Scalars['Int']['output'];\n  /** Is this location a leaf (i.e. does not contain other locations)? */\n  leaf: Scalars['Boolean']['output'];\n};\n\n/** Information about a storage location, without links to other locations and items. */\nexport type LinkedLocation = {\n  __typename?: 'LinkedLocation';\n  /** The barcode of this location. */\n  barcode: Scalars['String']['output'];\n  /** The fixed name of this location, not changeable through this API. */\n  fixedName?: Maybe<Scalars['String']['output']>;\n  /** The custom name (if any) of this location, that may be changed through this API. */\n  customName?: Maybe<Scalars['String']['output']>;\n  /** The row/column address (if any) of this location in its parent location. */\n  address?: Maybe<Scalars['Address']['output']>;\n  /** The number of items directly stored in this location. */\n  numStored: Scalars['Int']['output'];\n  /** Is this location a leaf (i.e. does not contain other locations)? */\n  leaf: Scalars['Boolean']['output'];\n};\n\n/** The result of a request to empty a location. */\nexport type UnstoreResult = {\n  __typename?: 'UnstoreResult';\n  /** The number of items unstored. */\n  numUnstored: Scalars['Int']['output'];\n  /** The details of the item unstored. */\n  unstored: Array<UnstoredItem>;\n};\n\n/** Information that a particular sample was found in a particular labware. */\nexport type FindEntry = {\n  __typename?: 'FindEntry';\n  /** The id of the sample found. */\n  sampleId: Scalars['Int']['output'];\n  /** The id of the labware where the sample was found. */\n  labwareId: Scalars['Int']['output'];\n  /** The list of work numbers associated with the entry. */\n  workNumbers: Array<Maybe<Scalars['String']['output']>>;\n};\n\n/** Information that a particular labware was found in a particular location. */\nexport type LabwareLocationEntry = {\n  __typename?: 'LabwareLocationEntry';\n  /** The id of the labware found. */\n  labwareId: Scalars['Int']['output'];\n  /** The id of the location where the labware was found. */\n  locationId: Scalars['Int']['output'];\n  /** The row/column address (if any) of the labware inside the location. */\n  address?: Maybe<Scalars['Address']['output']>;\n};\n\n/** The result of a find request: labware, its locations, and its contents. */\nexport type FindResult = {\n  __typename?: 'FindResult';\n  /** Links between samples and labware. */\n  entries: Array<FindEntry>;\n  /** Information about each sample found. */\n  samples: Array<Sample>;\n  /** Information about each labware found. */\n  labware: Array<Labware>;\n  /** Information about each location labware was found in. */\n  locations: Array<Location>;\n  /** Links between labware and locations. */\n  labwareLocations: Array<LabwareLocationEntry>;\n  /** The number of records found, which may be greater than the number of records returned. */\n  numRecords: Scalars['Int']['output'];\n};\n\n/** A request to find some stored labware. Some, any or all fields may be filled. Each one refines the search results. */\nexport type FindRequest = {\n  /** The barcode of a specific piece of labware to find. */\n  labwareBarcode?: InputMaybe<Scalars['String']['input']>;\n  /** The names of donors to find stored samples of. */\n  donorNames?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** The names of tissues to find stored samples of. Maybe include * wildcards. */\n  tissueExternalNames?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** The name of a tissue type to find stored samples of. */\n  tissueTypeName?: InputMaybe<Scalars['String']['input']>;\n  /** The name of a labware type to find labware of. */\n  labwareTypeName?: InputMaybe<Scalars['String']['input']>;\n  /** The maximum number of records to return. Use a negative value to indicate no limit. */\n  maxRecords?: InputMaybe<Scalars['Int']['input']>;\n  /** The work number associated with the labware. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The minimum creation date for the labware. */\n  createdMin?: InputMaybe<Scalars['Date']['input']>;\n  /** The maximum creation date for the labware. */\n  createdMax?: InputMaybe<Scalars['Date']['input']>;\n  /** The species of the samples. */\n  species?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** An entry in the history: the IDs refer to objects that should also be included in the History. */\nexport type HistoryEntry = {\n  __typename?: 'HistoryEntry';\n  /** The id of the operation or other event to which this entry refers. */\n  eventId: Scalars['Int']['output'];\n  /** The operation type of type of event to which this entry refers. */\n  type: Scalars['String']['output'];\n  /** The time the event took place (or was recorded). */\n  time: Scalars['Timestamp']['output'];\n  /** The id of the source labware of this event. */\n  sourceLabwareId: Scalars['Int']['output'];\n  /** The id of the destination labware of this event. */\n  destinationLabwareId: Scalars['Int']['output'];\n  /** The id of the sample involved in this event. */\n  sampleId?: Maybe<Scalars['Int']['output']>;\n  /** The username of the user responsible for this event. */\n  username: Scalars['String']['output'];\n  /** The work number (if any) associated with this event. */\n  workNumber?: Maybe<Scalars['String']['output']>;\n  /** Extra details (such as measurements and comments) included in this entry. */\n  details: Array<Scalars['String']['output']>;\n  /** The address of the destination slot involved in the event. */\n  address?: Maybe<Scalars['String']['output']>;\n  /** The region of the destination slot involved in the event. */\n  region?: Maybe<Scalars['String']['output']>;\n};\n\n/** A flag priority and a list of flagged barcodes. */\nexport type FlagBarcodes = {\n  __typename?: 'FlagBarcodes';\n  /** The priority of flag linked to the barcodes. */\n  priority: FlagPriority;\n  /** The barcodes linked with the flags. */\n  barcodes: Array<Scalars['String']['output']>;\n};\n\n/** History as returned for a history query. */\nexport type History = {\n  __typename?: 'History';\n  /** The entries found for the history. */\n  entries: Array<HistoryEntry>;\n  /** The labware referenced by the entries. */\n  labware: Array<Labware>;\n  /** The samples referenced by the entries. */\n  samples: Array<Sample>;\n  /** The included labware barcodes that are flagged. */\n  flagBarcodes: Array<FlagBarcodes>;\n};\n\n/** The SVG of a graph. */\nexport type GraphSvg = {\n  __typename?: 'GraphSVG';\n  /** The svg data of the graph. */\n  svg: Scalars['String']['output'];\n};\n\n/** Information about a plan previously recorded, now being looked up. */\nexport type PlanData = {\n  __typename?: 'PlanData';\n  /** One or more items of source labware for the plan. */\n  sources: Array<LabwareFlagged>;\n  /** The planned operation. */\n  plan: PlanOperation;\n  /** The single item of destination labware for the plan. */\n  destination: LabwareFlagged;\n};\n\n/** A project that work can be associated with. */\nexport type Project = {\n  __typename?: 'Project';\n  name: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A program that work can be associated with. */\nexport type Program = {\n  __typename?: 'Program';\n  name: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A cost code that work can be associated with. */\nexport type CostCode = {\n  __typename?: 'CostCode';\n  code: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A DNAP study. */\nexport type DnapStudy = {\n  __typename?: 'DnapStudy';\n  ssId: Scalars['Int']['output'];\n  name: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** A type of work, describing what kind of work it is (its purpose or activity). */\nexport type WorkType = {\n  __typename?: 'WorkType';\n  name: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n};\n\n/** The possible statuses of work. */\nexport enum WorkStatus {\n  /** This is the initial status of new work. */\n  Unstarted = 'unstarted',\n  /**\n   * The work has been started, or resumed following a pause.\n   * Work must be in this status for operations to be recorded in it.\n   */\n  Active = 'active',\n  /** The work has been paused (for some particular reason) by a user. */\n  Paused = 'paused',\n  /** The work has been completed successfully. This is a final status. */\n  Completed = 'completed',\n  /** The work has failed (for some particular reason). This is a final status. */\n  Failed = 'failed',\n  /** The work has been withdrawn (for some particular reason). This is a final status. */\n  Withdrawn = 'withdrawn'\n}\n\n/** Work that can be used to collect together operations done on related samples for a particular purpose. */\nexport type Work = {\n  __typename?: 'Work';\n  /** The type of work: what does it entail? */\n  workType: WorkType;\n  /** The project for which this work is done. */\n  project: Project;\n  /** The program associated with this work. */\n  program: Program;\n  /** The cost code responsible for paying for this work. */\n  costCode: CostCode;\n  /** The unique (generated) string identifying this work. */\n  workNumber: Scalars['String']['output'];\n  /** The name of the person requesting the work.(Note sure how to deal with this as the existing work will all be null but future work we want it mandatory?) */\n  workRequester?: Maybe<ReleaseRecipient>;\n  /** The current status of the work. */\n  status: WorkStatus;\n  /**\n   * The number of blocks that this work still needs to be done on.\n   * This is set and updated by users during the course of the work.\n   */\n  numBlocks?: Maybe<Scalars['Int']['output']>;\n  /**\n   * The number of slides that this work still needs to be done on.\n   * This is set and updated by users during the course of the work.\n   */\n  numSlides?: Maybe<Scalars['Int']['output']>;\n  /**\n   * The number of original samples that this work still needs to be done on.\n   * This is set and updated by users during the course of the work.\n   */\n  numOriginalSamples?: Maybe<Scalars['Int']['output']>;\n  /**\n   * A string describing the priority of this work.\n   * This is set and updated by users during the course of the work.\n   */\n  priority?: Maybe<Scalars['String']['output']>;\n  /** The omero project associated with this work, if any. */\n  omeroProject?: Maybe<OmeroProject>;\n  /** The DNAP study associated with this work, if any. */\n  dnapStudy?: Maybe<DnapStudy>;\n};\n\n/** A work along with a comment that was recorded to explain its current status. */\nexport type WorkWithComment = {\n  __typename?: 'WorkWithComment';\n  /** The work. */\n  work: Work;\n  /** The text of the comment (if any) that was recorded when the work last changed its status. */\n  comment?: Maybe<Scalars['String']['output']>;\n};\n\n/** An indication that something happened at some particular time. */\nexport type WorkProgressTimestamp = {\n  __typename?: 'WorkProgressTimestamp';\n  /** The name of the thing that happened. */\n  type: Scalars['String']['output'];\n  /** The timestamp when the thing happened. */\n  timestamp: Scalars['Timestamp']['output'];\n};\n\n/** The things that have happened for a particular work, as requested by a user. */\nexport type WorkProgress = {\n  __typename?: 'WorkProgress';\n  /** The work under consideration. */\n  work: Work;\n  /** The comment associated with the work status. */\n  workComment?: Maybe<Scalars['String']['output']>;\n  /** The things that happened for that work, and when they happened. */\n  timestamps: Array<WorkProgressTimestamp>;\n  /** The most recent operation for a given piece of work */\n  mostRecentOperation?: Maybe<Scalars['String']['output']>;\n};\n\n/** Summary of a particular labware flag. */\nexport type FlagSummary = {\n  __typename?: 'FlagSummary';\n  /** The labware barcode that was flagged. */\n  barcode: Scalars['String']['output'];\n  /** The description of the flag. */\n  description: Scalars['String']['output'];\n  /** The priority of the flag. */\n  priority: FlagPriority;\n};\n\n/** Information about flags related to some labware. */\nexport type FlagDetail = {\n  __typename?: 'FlagDetail';\n  /** The barcode of the labware whose flags have been looked up. */\n  barcode: Scalars['String']['output'];\n  /** Summaries of the flags applicable to the specified labware. */\n  flags: Array<FlagSummary>;\n};\n\n/** A measurement given as a number of seconds for some particular named measure. */\nexport type TimeMeasurement = {\n  name: Scalars['String']['input'];\n  seconds: Scalars['Int']['input'];\n};\n\n/** A type of stain that may be performed. */\nexport type StainType = {\n  __typename?: 'StainType';\n  name: Scalars['String']['output'];\n  /** The types of measurements we may expect to be recorded as part of a stain of this type. */\n  measurementTypes: Array<Scalars['String']['output']>;\n};\n\n/** A request to record stains on some labware. */\nexport type StainRequest = {\n  /** The name of a stain type to record. */\n  stainType: Scalars['String']['input'];\n  /** The barcodes of the labware being stained. */\n  barcodes: Array<Scalars['String']['input']>;\n  /** The times of particular measurements for the stains. */\n  timeMeasurements: Array<TimeMeasurement>;\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** Comment ids indicating reagent types used in stain. */\n  commentIds?: InputMaybe<Array<Scalars['Int']['input']>>;\n};\n\n/** The panel used with a stain. */\nexport enum StainPanel {\n  Positive = 'positive',\n  Negative = 'negative',\n  Marker = 'marker'\n}\n\n/** The details for a particular labware in a complex stain request. */\nexport type ComplexStainLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The bond barcode for the stain. */\n  bondBarcode: Scalars['String']['input'];\n  /** The bond run number. */\n  bondRun: Scalars['Int']['input'];\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The plex for RNAscope if that is being recorded. */\n  plexRNAscope?: InputMaybe<Scalars['Int']['input']>;\n  /** The plex for IHC if that is being recorded. */\n  plexIHC?: InputMaybe<Scalars['Int']['input']>;\n  /** The experiment panel. */\n  panel: StainPanel;\n};\n\n/** A request for a stain including bond barcodes and such. */\nexport type ComplexStainRequest = {\n  /** The names of the types of stain being recorded. */\n  stainTypes: Array<Scalars['String']['input']>;\n  /** The details of the labware being stained. */\n  labware: Array<ComplexStainLabware>;\n};\n\n/** The details of a previously released item of labware to receive back into the application. */\nexport type UnreleaseLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The highest section number taken from the block, if it is a block. */\n  highestSection?: InputMaybe<Scalars['Int']['input']>;\n  /** The work number associated with the unrelease of this labware. */\n  workNumber: Scalars['String']['input'];\n};\n\n/** A request to receive back some previously released labware. */\nexport type UnreleaseRequest = {\n  labware: Array<UnreleaseLabware>;\n};\n\n/** A request to record a comment against a particular sample. */\nexport type SampleIdCommentId = {\n  /** The id of the sample to comment upon. */\n  sampleId: Scalars['Int']['input'];\n  /** The id of the comment to record. */\n  commentId: Scalars['Int']['input'];\n};\n\n/** Specification of a result being recording. */\nexport type SampleResult = {\n  /** The slot address that the result refers to. */\n  address: Scalars['Address']['input'];\n  /** The result if any defined. */\n  result?: InputMaybe<PassFail>;\n  /** The id of a comment, if any, linked to the result. */\n  commentId?: InputMaybe<Scalars['Int']['input']>;\n  /** List of comments to be recorded against particular samples. */\n  sampleComments?: InputMaybe<Array<SampleIdCommentId>>;\n};\n\n/** Specification of results being recorded in an item of labware. */\nexport type LabwareResult = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The individual results. */\n  sampleResults?: InputMaybe<Array<SampleResult>>;\n  /** Measurements to record in this labware. */\n  slotMeasurements?: InputMaybe<Array<SlotMeasurementRequest>>;\n  /** An optional costing for the labware. */\n  costing?: InputMaybe<SlideCosting>;\n  /** A reagent lot number to associate with the labware. */\n  reagentLot?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A request to record results. */\nexport type ResultRequest = {\n  /** The name of the operation that will record the results. */\n  operationType?: InputMaybe<Scalars['String']['input']>;\n  /** The results for each item of labware. */\n  labwareResults: Array<LabwareResult>;\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A comment against a particular sample at an address (in some particular labware). */\nexport type SampleAddressComment = {\n  /** The id of the sample for the comment. */\n  sampleId: Scalars['Int']['input'];\n  /** The address of the slot for the comment. */\n  address: Scalars['Address']['input'];\n  /** The id of the comment to record. */\n  commentId: Scalars['Int']['input'];\n};\n\n/** The comments against samples in a particular piece of labware. */\nexport type LabwareSampleComments = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The comments to record against particular samples in this labware. */\n  comments: Array<SampleAddressComment>;\n  /** The (optional) completion time of the process for this labware. */\n  completion?: InputMaybe<Scalars['Timestamp']['input']>;\n};\n\n/** A request to record the completion of a process. */\nexport type CompletionRequest = {\n  /** The name of the type operations being recorded. */\n  operationType: Scalars['String']['input'];\n  /** The work number associated with these operations. */\n  workNumber: Scalars['String']['input'];\n  /** The details of the labware involved in this operation. */\n  labware: Array<LabwareSampleComments>;\n};\n\n/** Specification of extract results in a piece of labware. */\nexport type ExtractResultLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The result. */\n  result: PassFail;\n  /** The concentration measurement, if any. */\n  concentration?: InputMaybe<Scalars['String']['input']>;\n  /** The id of a comment, if any, linked to the result. */\n  commentId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A request to record extract results. */\nexport type ExtractResultRequest = {\n  /** The details of the results in each item of labware. */\n  labware: Array<ExtractResultLabware>;\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The permeabilisation data for a particular slot address. */\nexport type PermData = {\n  /** The address of a slot in its labware. */\n  address: Scalars['Address']['input'];\n  /** The number of seconds, if specified. */\n  seconds?: InputMaybe<Scalars['Int']['input']>;\n  /** The control type, if this is a control. */\n  controlType?: InputMaybe<ControlType>;\n  /** The barcode of the labware being put into this slot as a control, if there is one. */\n  controlBarcode?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A request to record permeabilisation data. */\nexport type RecordPermRequest = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The data for each slot in the labware. */\n  permData: Array<PermData>;\n};\n\n/** Permeabilisation data about a particular slot address. */\nexport type AddressPermData = {\n  __typename?: 'AddressPermData';\n  /** The slot address. */\n  address: Scalars['Address']['output'];\n  /** The number of seconds, if any. */\n  seconds?: Maybe<Scalars['Int']['output']>;\n  /** The control type, if this is a control. */\n  controlType?: Maybe<ControlType>;\n  /** Whether this result has been selected. */\n  selected: Scalars['Boolean']['output'];\n};\n\n/** The permeabilisation data recorded for a particular piece of labware. */\nexport type VisiumPermData = {\n  __typename?: 'VisiumPermData';\n  /** The labware in question. */\n  labware: LabwareFlagged;\n  /** The permeabilisation data for each slot. */\n  addressPermData: Array<AddressPermData>;\n  /** The region of a sample in a particular slot referenced by the entries */\n  samplePositionResults: Array<SamplePosition>;\n};\n\n/** Request to record visium analysis, selecting a permeabilisation time. */\nexport type VisiumAnalysisRequest = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The address where the selected permeabilisation was recorded. */\n  selectedAddress: Scalars['Address']['input'];\n  /** The permeabilisation time that we want to select. */\n  selectedTime: Scalars['Int']['input'];\n};\n\n/** A pass/fail result in a particular slot of some labware. */\nexport type SlotPassFail = {\n  __typename?: 'SlotPassFail';\n  /** The address of the slot in its labware. */\n  address: Scalars['Address']['output'];\n  /** The result. */\n  result: PassFail;\n  /** The comment, if any, recorded with the result. */\n  comment?: Maybe<Scalars['String']['output']>;\n};\n\n/** An operation and the pass/fails in the slots of its labware. */\nexport type OpPassFail = {\n  __typename?: 'OpPassFail';\n  /** An operation with one destination labware. */\n  operation: Operation;\n  /** The pass fails in each address of the destination labware. */\n  slotPassFails: Array<SlotPassFail>;\n};\n\n/** A piece of labware and an extract result, if any exists. */\nexport type ExtractResult = {\n  __typename?: 'ExtractResult';\n  /** The labware the result refers to. */\n  labware: LabwareFlagged;\n  /** The result, if any. */\n  result?: Maybe<PassFail>;\n  /** The concentration recorded, if any. */\n  concentration?: Maybe<Scalars['String']['output']>;\n};\n\n/** A specification for recording a measurement. */\nexport type StringMeasurement = {\n  /** The thing being measured. */\n  name: Scalars['String']['input'];\n  /** The value of the measurement. */\n  value: Scalars['String']['input'];\n};\n\n/** An item of labware that RNA Analysis is being requested on. */\nexport type RnaAnalysisLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The id of a preset comment, if any, to associate with the analysis. */\n  commentId?: InputMaybe<Scalars['Int']['input']>;\n  /** The measurements to record for this operation. */\n  measurements: Array<StringMeasurement>;\n};\n\n/** A request to record an RNA analysis operation. */\nexport type RnaAnalysisRequest = {\n  /** The name of the type of operation (a type RNA analsis). */\n  operationType: Scalars['String']['input'];\n  /** The details of what to record on one or more labware. */\n  labware: Array<RnaAnalysisLabware>;\n  /** The id of the equipment used in this operation. */\n  equipmentId: Scalars['Int']['input'];\n};\n\n/** A measurement to be recorded in a particular slot of some item of labware. */\nexport type SlotMeasurementRequest = {\n  /** The address of the slot. */\n  address: Scalars['Address']['input'];\n  /** The name of the measurement. */\n  name: Scalars['String']['input'];\n  /** The value of the measurement. */\n  value: Scalars['String']['input'];\n  /** An optional comment id. */\n  commentId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A request to record an operation in place with measurements in slots. */\nexport type OpWithSlotMeasurementsRequest = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The name of the type of operation to record. */\n  operationType: Scalars['String']['input'];\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The measurements to record in individual slots. */\n  slotMeasurements: Array<SlotMeasurementRequest>;\n};\n\n/** A specification of an item to be put into storage. */\nexport type StoreInput = {\n  /** The barcode of the item to be stored. */\n  barcode: Scalars['String']['input'];\n  /** The address, if any, in a location where the item should be stored. */\n  address?: InputMaybe<Scalars['Address']['input']>;\n};\n\n/** A request to transfer material from one source labware into multiple new destination labware (first slot). */\nexport type AliquotRequest = {\n  /** The name of the operation to record. */\n  operationType: Scalars['String']['input'];\n  /** The barcode of the source labware. */\n  barcode: Scalars['String']['input'];\n  /** The name of the labware type for the destination labware. */\n  labwareType: Scalars['String']['input'];\n  /** The number of destination labware to create. */\n  numLabware: Scalars['Int']['input'];\n  /** An optional work number to associate with this operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A slot in a reagent plate. */\nexport type ReagentSlot = {\n  __typename?: 'ReagentSlot';\n  address: Scalars['Address']['output'];\n  used: Scalars['Boolean']['output'];\n};\n\n/** A plate of reagents. */\nexport type ReagentPlate = {\n  __typename?: 'ReagentPlate';\n  barcode: Scalars['String']['output'];\n  slots: Array<ReagentSlot>;\n  plateType?: Maybe<Scalars['String']['output']>;\n};\n\n/** The data about original tissues and their next replicate numbers. */\nexport type NextReplicateData = {\n  __typename?: 'NextReplicateData';\n  /** The source barcodes for the new replicates. */\n  barcodes: Array<Scalars['String']['output']>;\n  /** The id of the donor. */\n  donorId: Scalars['Int']['output'];\n  /** The id of the spatial location. */\n  spatialLocationId: Scalars['Int']['output'];\n  /** The next replicate number for this group. */\n  nextReplicateNumber: Scalars['Int']['output'];\n};\n\n/** A group in a work summary. */\nexport type WorkSummaryGroup = {\n  __typename?: 'WorkSummaryGroup';\n  /** The work type of this group. */\n  workType: WorkType;\n  /** The work status of this group. */\n  status: WorkStatus;\n  /** The number of works in this group. */\n  numWorks: Scalars['Int']['output'];\n  /** The total number of blocks required as specified in these works. */\n  totalNumBlocks: Scalars['Int']['output'];\n  /** The total number of slides required as specified in these works. */\n  totalNumSlides: Scalars['Int']['output'];\n  /** The total number of original samples required as specified in these works. */\n  totalNumOriginalSamples: Scalars['Int']['output'];\n};\n\n/** All data needed for a Work Summary. */\nexport type WorkSummaryData = {\n  __typename?: 'WorkSummaryData';\n  workSummaryGroups: Array<WorkSummaryGroup>;\n  workTypes: Array<WorkType>;\n};\n\n/** A file uploaded to Stan. */\nexport type StanFile = {\n  __typename?: 'StanFile';\n  /** When this stanfile was uploaded. */\n  created: Scalars['Timestamp']['output'];\n  /** The work with which this file is associated. */\n  work: Work;\n  /** The user who uploaded the file. */\n  user: User;\n  /** The name of the file. */\n  name: Scalars['String']['output'];\n  /** The url to download the file. */\n  url: Scalars['String']['output'];\n};\n\n/** A link between a labware barcode and a work number. */\nexport type SuggestedWork = {\n  __typename?: 'SuggestedWork';\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['output'];\n  /** The work number of the suggested work, or null. */\n  workNumber?: Maybe<Scalars['String']['output']>;\n};\n\n/** The response to a suggested work query. */\nexport type SuggestedWorkResponse = {\n  __typename?: 'SuggestedWorkResponse';\n  /** The work numbers for each barcode. Barcodes without suggested work will be omitted. */\n  suggestedWorks: Array<SuggestedWork>;\n  /** The works indicated. */\n  works: Array<Work>;\n};\n\n/** An address and a string associated with that address. */\nexport type AddressString = {\n  __typename?: 'AddressString';\n  address: Scalars['Address']['output'];\n  string: Scalars['String']['output'];\n};\n\n/** A specification that a particular reagent slot should be transferred to an address. */\nexport type ReagentTransfer = {\n  /** The barcode of a reagent plate. */\n  reagentPlateBarcode: Scalars['String']['input'];\n  /** The address of a slot in the reagent plate. */\n  reagentSlotAddress: Scalars['Address']['input'];\n  /** The address if a slot in the destination labware. */\n  destinationAddress: Scalars['Address']['input'];\n};\n\n/** A request to transfer reagents from reagent plates to a STAN labware. */\nexport type ReagentTransferRequest = {\n  /** The name of the operation being performed. */\n  operationType: Scalars['String']['input'];\n  /** The work number to associate with the operation. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The barcode of the destination labware. */\n  destinationBarcode: Scalars['String']['input'];\n  /** The transfers from aliquot slots to destination slots. */\n  transfers: Array<ReagentTransfer>;\n  /** The type of reagent plate involved. */\n  plateType: Scalars['String']['input'];\n};\n\n/** A request to record transfer, dual index and amplification ops. */\nexport type LibraryPrepRequest = {\n  /** The work number to associate with these operations. */\n  workNumber: Scalars['String']['input'];\n  /** The source labware and new labware states for this request. */\n  sources: Array<SlotCopySource>;\n  /** The one destination labware for this request, and the description of what is transferred into it. */\n  destination: SlotCopyDestination;\n  /** The transfers from aliquot slots to destination slots. */\n  reagentTransfers: Array<ReagentTransfer>;\n  /** The type of reagent plate involved. */\n  reagentPlateType?: InputMaybe<Scalars['String']['input']>;\n  /** The measurement to record on slots in the destination. */\n  slotMeasurements: Array<SlotMeasurementRequest>;\n};\n\n/** A request to process original tissue into blocks. */\nexport type TissueBlockRequest = {\n  /** The work number associated with this request. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The labware (blocks) being created by this request. */\n  labware: Array<TissueBlockLabware>;\n  /** Which source barcodes (if any) to discard as part of this request. */\n  discardSourceBarcodes?: InputMaybe<Array<Scalars['String']['input']>>;\n};\n\n/** The input about a new block being created. */\nexport type TissueBlockLabware = {\n  /** The original tissue barcode. */\n  sourceBarcode: Scalars['String']['input'];\n  /** The labware type for the new labware. */\n  labwareType: Scalars['String']['input'];\n  /** The barcode of the new labware, if it is prebarcoded. */\n  preBarcode?: InputMaybe<Scalars['String']['input']>;\n  /** The comment (if any) associated with this operation. */\n  commentId?: InputMaybe<Scalars['Int']['input']>;\n  /** The replicate number for the new block. */\n  replicate: Scalars['String']['input'];\n};\n\n/** A request to transfer original sample into pots. */\nexport type PotProcessingRequest = {\n  /** The source barcode. */\n  sourceBarcode: Scalars['String']['input'];\n  /** The work number. */\n  workNumber: Scalars['String']['input'];\n  /** The destinations that will be created. */\n  destinations: Array<PotProcessingDestination>;\n  /** Is the source labware discarded? */\n  sourceDiscarded?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** A destination for pot processing. */\nexport type PotProcessingDestination = {\n  /** The name of the type of labware. */\n  labwareType: Scalars['String']['input'];\n  /** The fixative. */\n  fixative: Scalars['String']['input'];\n  /** Comment to record, if any. */\n  commentId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A labware barcode and a comment id to add. */\nexport type SampleProcessingComment = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The id of the comment. */\n  commentId: Scalars['Int']['input'];\n};\n\n/** Request to record operations and add comments to labware. */\nexport type SampleProcessingCommentRequest = {\n  /** The comments to add for each labware. */\n  labware: Array<SampleProcessingComment>;\n};\n\nexport type AddExternalIdRequest = {\n  /** The external identifier used to identify the tissue. */\n  externalName: Scalars['String']['input'];\n  /** The existing labware containing the tissue */\n  labwareBarcode: Scalars['String']['input'];\n};\n\n/** A request to perform solution transfer. */\nexport type SolutionTransferRequest = {\n  /** The work number for the operations. */\n  workNumber: Scalars['String']['input'];\n  /** The details of the labware in the request. */\n  labware: Array<SolutionTransferLabware>;\n};\n\n/** A labware in a solution transfer request. */\nexport type SolutionTransferLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The name solution. */\n  solution: Scalars['String']['input'];\n};\n\n/** A request to record paraffin processing. */\nexport type ParaffinProcessingRequest = {\n  /** The work number. */\n  workNumber: Scalars['String']['input'];\n  /** The labware barcodes. */\n  barcodes: Array<Scalars['String']['input']>;\n  /** The comment ID. */\n  commentId: Scalars['Int']['input'];\n};\n\n/** Request to record an operation on multiple labware in-place with comments on some slots. */\nexport type OpWithSlotCommentsRequest = {\n  /** The name of the operation type to record. */\n  operationType: Scalars['String']['input'];\n  /** The work number. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** The details of the labware. */\n  labware: Array<LabwareWithSlotCommentsRequest>;\n};\n\n/** Specification of comments in slots of a piece of labware. */\nexport type LabwareWithSlotCommentsRequest = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The comments in slots of this labware. */\n  addressComments: Array<AddressCommentInput>;\n};\n\n/** Request to record an operation with probe panels. */\nexport type ProbeOperationRequest = {\n  /** The name of the type of operation. */\n  operationType: Scalars['String']['input'];\n  /** The time when the operation was performed, if specified. */\n  performed?: InputMaybe<Scalars['Timestamp']['input']>;\n  /** The labware involved in the operation. */\n  labware: Array<ProbeOperationLabware>;\n};\n\n/** Labware in a probe operation request. */\nexport type ProbeOperationLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The work number of the operation on this labware. */\n  workNumber: Scalars['String']['input'];\n  /** The costing for the kit used on this labware. */\n  kitCosting: SlideCosting;\n  /** Sample prep reagent lot number. */\n  samplePrepReagentLot?: InputMaybe<Scalars['String']['input']>;\n  /** The probes used on this labware. */\n  probes: Array<ProbeLot>;\n};\n\n/** The probe used on a piece of labware in an operation. */\nexport type ProbeLot = {\n  /** The name of the probe panel. */\n  name: Scalars['String']['input'];\n  /** The lot number of the probe. */\n  lot: Scalars['String']['input'];\n  /** The plex number. */\n  plex: Scalars['Int']['input'];\n  /** The costing of the probe panel. */\n  costing: SlideCosting;\n};\n\n/** Specifies a region of interest for a sample in a slot address. */\nexport type SampleRoi = {\n  /** The address of the slot. */\n  address: Scalars['Address']['input'];\n  /** The id of the sample. */\n  sampleId: Scalars['Int']['input'];\n  /** The region of interest of the sample. */\n  roi: Scalars['String']['input'];\n};\n\n/** The information about a particular item of labware in an analyser request. */\nexport type AnalyserLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The work number for the labware. */\n  workNumber: Scalars['String']['input'];\n  /** The cassette position for the labware. */\n  position: CassettePosition;\n  /** Decoding consumables lot number. */\n  decodingConsumablesLot?: InputMaybe<Scalars['String']['input']>;\n  /** The sample regions of interest in this labware. */\n  samples: Array<SampleRoi>;\n};\n\n/** A request to record an analyser operation. */\nexport type AnalyserRequest = {\n  /** The name of the operation type to record. */\n  operationType: Scalars['String']['input'];\n  /** The lot number for the decoding reagents A. */\n  lotNumberA: Scalars['String']['input'];\n  /** The lot number for the decoding reagents B. */\n  lotNumberB: Scalars['String']['input'];\n  /** The run name. */\n  runName: Scalars['String']['input'];\n  /** The time at which this operation was performed. */\n  performed?: InputMaybe<Scalars['Timestamp']['input']>;\n  /** The labware involved in this request. */\n  labware: Array<AnalyserLabware>;\n  /** The id of the equipment used in this operation. */\n  equipmentId: Scalars['Int']['input'];\n  /** The cell segmentation lot number. */\n  cellSegmentationLot?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A region of interest for a sample in an operation. */\nexport type Roi = {\n  __typename?: 'Roi';\n  /** The id of the slot. */\n  slotId: Scalars['Int']['output'];\n  /** The address of the slot. */\n  address: Scalars['Address']['output'];\n  /** The sample in the ROI. */\n  sample: Sample;\n  /** The id of the operation in which the ROI was recorded. */\n  operationId: Scalars['Int']['output'];\n  /** The description of the region of interest. */\n  roi: Scalars['String']['output'];\n};\n\n/** The regions of interest recorded in a particular labware. */\nexport type LabwareRoi = {\n  __typename?: 'LabwareRoi';\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['output'];\n  /** The regions of interest recorded in the labware, if any. */\n  rois: Array<Roi>;\n};\n\n/** Information to show when a user scans in labware for the analyser op. */\nexport type AnalyserScanData = {\n  __typename?: 'AnalyserScanData';\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['output'];\n  /** The work numbers linked to the labware. */\n  workNumbers: Array<Scalars['String']['output']>;\n  /** The names of probes recorded on the labware. */\n  probes: Array<Scalars['String']['output']>;\n  /** Has cell segmentation been recorded? */\n  cellSegmentationRecorded: Scalars['Boolean']['output'];\n};\n\n/** A comment on a particular sample in a particular slot. */\nexport type QcSampleComment = {\n  /** The address of the slot. */\n  address: Scalars['Address']['input'];\n  /** The ID of the sample. */\n  sampleId: Scalars['Int']['input'];\n  /** The ID of the comment. */\n  commentId: Scalars['Int']['input'];\n};\n\n/** Labware to be QC'd with comments and a completion time. */\nexport type QcLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The run-name to record. */\n  runName?: InputMaybe<Scalars['String']['input']>;\n  /** The work number to link to the operation. */\n  workNumber: Scalars['String']['input'];\n  /** The time at which the process was completed. */\n  completion?: InputMaybe<Scalars['Timestamp']['input']>;\n  /** Zero or more comments applied to this labware in this operation. */\n  comments: Array<Scalars['Int']['input']>;\n  /** Zero or more comments on individual samples in particular slots. */\n  sampleComments?: InputMaybe<Array<QcSampleComment>>;\n};\n\n/** Request to record QC and completion time for one or more labware. */\nexport type QcLabwareRequest = {\n  /** The name of the operation to record. */\n  operationType: Scalars['String']['input'];\n  /** The specifications of labware to QC. */\n  labware: Array<QcLabware>;\n};\n\n/** Raise a flag on a piece of labware. */\nexport type FlagLabwareRequest = {\n  /** The barcodes of the flagged labware. */\n  barcodes: Array<Scalars['String']['input']>;\n  /** The description of the flag. */\n  description: Scalars['String']['input'];\n  /** Work number to link to the flag. */\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  /** Priority of the flag. */\n  priority: FlagPriority;\n};\n\n/** Record the orientation state of labware. */\nexport type OrientationRequest = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The work number to link to the operation. */\n  workNumber: Scalars['String']['input'];\n  /** Is the orientation correct? */\n  correct: Scalars['Boolean']['input'];\n};\n\n/** Request to undestroy/undiscard labware. */\nexport type ReactivateLabware = {\n  /** The barcode of the labware to reactivate. */\n  barcode: Scalars['String']['input'];\n  /** The work number to associate with the reactivation. */\n  workNumber: Scalars['String']['input'];\n  /** The comment id to associate with the reactivation. */\n  commentId: Scalars['Int']['input'];\n};\n\n/** Details about labware in a segmentation request. */\nexport type SegmentationLabware = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The work number to link to the operation. */\n  workNumber: Scalars['String']['input'];\n  /** The comment ids to link to the operation. */\n  commentIds: Array<Scalars['Int']['input']>;\n  /** The costing of the operation. */\n  costing?: InputMaybe<SlideCosting>;\n  /** The time with which the operation should be recorded. */\n  performed?: InputMaybe<Scalars['Timestamp']['input']>;\n  /** The reagent lot number. */\n  reagentLot?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A request to record segmentation on one or more labware. */\nexport type SegmentationRequest = {\n  /** The name of the operation to record. */\n  operationType: Scalars['String']['input'];\n  /** The details of the labware involved. */\n  labware: Array<SegmentationLabware>;\n};\n\n/** A request to remove samples from particular slots in labware. */\nexport type CleanOutRequest = {\n  /** The barcode of the labware. */\n  barcode: Scalars['String']['input'];\n  /** The addresses of the slots to clean out. */\n  addresses: Array<Scalars['Address']['input']>;\n  /** The work number to link to the operation. */\n  workNumber: Scalars['String']['input'];\n};\n\n/** A key and value about a region of interest. */\nexport type SampleMetric = {\n  /** The region of interest for this metric. */\n  roi: Scalars['String']['input'];\n  /** The name of the metric. */\n  name: Scalars['String']['input'];\n  /** The value of the metric. */\n  value: Scalars['String']['input'];\n};\n\n/** A request to save metrics. */\nexport type SampleMetricsRequest = {\n  /** The name of the operation to record. */\n  operationType: Scalars['String']['input'];\n  /** The labware barcode. */\n  barcode: Scalars['String']['input'];\n  /** The work number to link to the operation. */\n  workNumber: Scalars['String']['input'];\n  /** The run name to link to the operation. */\n  runName?: InputMaybe<Scalars['String']['input']>;\n  /** The metrics to save. */\n  metrics: Array<SampleMetric>;\n};\n\n/** A request to add a tissue type. */\nexport type AddTissueTypeRequest = {\n  /** The name of the tissue type. */\n  name: Scalars['String']['input'];\n  /** The short code for the tissue type. */\n  code: Scalars['String']['input'];\n  /** The spatial locations for the new tissue type. */\n  spatialLocations: Array<AddTissueTypeSpatialLocation>;\n};\n\n/** Request to add spatial locations to an existing tissue type. */\nexport type AddSpatialLocationsRequest = {\n  /** The name of an existing tissue type. */\n  name: Scalars['String']['input'];\n  /** The new spatial locations. */\n  spatialLocations: Array<AddTissueTypeSpatialLocation>;\n};\n\n/** A new spatial location for a particular tissue type. */\nexport type AddTissueTypeSpatialLocation = {\n  /** The int code for the spatial location. */\n  code: Scalars['Int']['input'];\n  /** The name of the spatial location. */\n  name: Scalars['String']['input'];\n};\n\n/** A request to alter the work linked to existing operations. */\nexport type OpWorkRequest = {\n  /** The work number to link. */\n  workNumber: Scalars['String']['input'];\n  /** The IDs of the operations to update. */\n  opIds: Array<Scalars['Int']['input']>;\n};\n\n/** Info about the app version. */\nexport type VersionInfo = {\n  __typename?: 'VersionInfo';\n  /** The output of git describe. */\n  describe: Scalars['String']['output'];\n  /** The latest commit id. */\n  commit: Scalars['String']['output'];\n  /** The version from the pom file. */\n  version?: Maybe<Scalars['String']['output']>;\n};\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type Query = {\n  __typename?: 'Query';\n  /** Get the current logged in user. */\n  user?: Maybe<User>;\n  /** Get all the tissue types available. */\n  tissueTypes: Array<TissueType>;\n  /** Get all the labware types available. */\n  labwareTypes: Array<LabwareType>;\n  /** Get all the HMDMCs that are enabled, or get all including those that are disabled. */\n  hmdmcs: Array<Hmdmc>;\n  /** Get all bio risks that are enabled, or get all including those that are disabled. */\n  bioRisks: Array<BioRisk>;\n  /** Get all the mediums available. */\n  mediums: Array<Medium>;\n  /** Get all the fixatives that are enabled, or get all including those that are disabled. */\n  fixatives: Array<Fixative>;\n  /** Get all the species that are enabled, or get all including those that are disabled. */\n  species: Array<Species>;\n  /** Get all probe panels, optionally including the disabled. */\n  probePanels: Array<ProbePanel>;\n  /** Get the labware with the given barcode. */\n  labware: Labware;\n  /** Get the labware and check if it is flagged. */\n  labwareFlagged: LabwareFlagged;\n  /** Get all printers available, or get all printers that support a named label type. */\n  printers: Array<Printer>;\n  /** Get all enabled comments in a particular category, or all enabled in any category; optionally include disabled. */\n  comments: Array<Comment>;\n  /** Get all enabled equipments in a particular category, or all enabled in any category; optionally include disabled. */\n  equipments: Array<Equipment>;\n  /** Get all the release destinations that are enabled, or get all including those that are disabled. */\n  releaseDestinations: Array<ReleaseDestination>;\n  /** Get all the release recipients that are enabled, or get all including those that are disabled. */\n  releaseRecipients: Array<ReleaseRecipient>;\n  /** Get the available release file groups. */\n  releaseColumnOptions: Array<ReleaseFileOption>;\n  /** Get all the destruction reasons that are enabled, or get all including those that are disabled. */\n  destructionReasons: Array<DestructionReason>;\n  /** Get all the projects that are enabled, or get all including those that are disabled. */\n  projects: Array<Project>;\n  /** Get all programs that are enabled, or get all including those that are disabled. */\n  programs: Array<Program>;\n  /** Get all the cost codes that are enabled, or get all including those that are disabled. */\n  costCodes: Array<CostCode>;\n  /** Get all the DNAP studies that are enabled, or get all including those that are disabled. */\n  dnapStudies: Array<DnapStudy>;\n  /** Load the study with the given Sequencescape id (if it exists). */\n  dnapStudy?: Maybe<DnapStudy>;\n  /** Get all the solutions that are enabled, or get all including those that are disabled. */\n  solutions: Array<Solution>;\n  /** Get all the omero projects that are enabled, or including those that are disabled. */\n  omeroProjects: Array<OmeroProject>;\n  /** Get all the slot regions, optionally including those that are disabled. */\n  slotRegions: Array<SlotRegion>;\n  /** Gets the sample positions (if any) specified in a particular item of labware. */\n  samplePositions: Array<SamplePosition>;\n  /** Get all the work types that are enabled, or get all including those that are disabled. */\n  workTypes: Array<WorkType>;\n  /** Get all the works, or get all the works in the given specified statuses. */\n  works: Array<Work>;\n  /** Get the work with the specified work number. */\n  work: Work;\n  /** Get all work created by the specified user. */\n  worksCreatedBy: Array<Work>;\n  /** Get all the works with associated comment, or get all the ones in the given statuses. */\n  worksWithComments: Array<WorkWithComment>;\n  /** Get summary of works. */\n  worksSummary: WorkSummaryData;\n  /** Get all the users that are enabled, or get all including those that are disabled. */\n  users: Array<User>;\n  /** Find where labware is stored, given some criteria. */\n  find: FindResult;\n  /** Get the information about a planned operation previously recorded for a specific labware barcode. */\n  planData: PlanData;\n  /** Get the available stain types. */\n  stainTypes: Array<StainType>;\n  /** Get the reagent types for H&E staining. */\n  stainReagentTypes: Array<Comment>;\n  /** Event types. */\n  eventTypes: Array<Scalars['String']['output']>;\n  /** Get an item of labware and the visium permeabilisation data recorded on it, if any. */\n  visiumPermData: VisiumPermData;\n  /** Get a previously recorded extract result for a given labware barcode. */\n  extractResult: ExtractResult;\n  /** Get an operation and the pass/fail result recorded on it, for a given labware barcode and operation type name. */\n  passFails: Array<OpPassFail>;\n  /** List files linked to work numbers. */\n  listFiles: Array<StanFile>;\n  /** Get the existing costing (if any) for an item of labware. */\n  labwareCosting?: Maybe<SlideCosting>;\n  /** Look up the latest operation of some specified type whose destinations included a given labware barcode. */\n  findLatestOp?: Maybe<Operation>;\n  /** Get addresses of cleaned out slots in the specified labware.. */\n  cleanedOutAddresses: Array<Scalars['Address']['output']>;\n  /** Get the history containing a given sample id. */\n  historyForSampleId: History;\n  /** Get the history containing a tissue with the given external name. */\n  historyForExternalName: History;\n  /** Get the history for a specified donor. */\n  historyForDonorName: History;\n  /** Get the operation history for a specified work number. */\n  historyForWorkNumber: History;\n  /** Get the history containing a given labware barcode. */\n  historyForLabwareBarcode: History;\n  /** Get the history associated with a specified work number, and/or barcode, external name, donor name. */\n  history: History;\n  /** Get a graph of the indicated history. Zoom and fontSize are optional. */\n  historyGraph: GraphSvg;\n  /**\n   * Get the work progress (some particular timestamps) associated with a specified work number, and/or\n   * work types, programs, statuses.\n   */\n  workProgress: Array<WorkProgress>;\n  /** Get a reagent plate, if it exists. May return null. */\n  reagentPlate?: Maybe<ReagentPlate>;\n  /** Get the next replicate data for the given source labware barcodes. */\n  nextReplicateNumbers: Array<NextReplicateData>;\n  /** Get operations into a given labware barcode of a given operation type. */\n  labwareOperations?: Maybe<Array<Maybe<Operation>>>;\n  /** Get suggested work (if any) for labware. By default, only returns active work. */\n  suggestedWorkForLabware: SuggestedWorkResponse;\n  /** Get suggested labware for work. */\n  suggestedLabwareForWork: Array<Labware>;\n  /** Get labware flag details applicable to the specified labware. */\n  labwareFlagDetails: Array<FlagDetail>;\n  /** Get named measurement values for each slot from the indicated labware or its parent labware. */\n  measurementValueFromLabwareOrParent: Array<AddressString>;\n  /** Get regions of interest in the indicated labware. */\n  rois: Array<LabwareRoi>;\n  /** Get regions of interest for the indicated labware and run name. */\n  runRois: Array<Roi>;\n  /** Data shown when scanning in labware for analyser op. */\n  analyserScanData: AnalyserScanData;\n  /** Run names recorded for the specified labware. */\n  runNames: Array<Scalars['String']['output']>;\n  /** Bio risk codes for samples in the specified labware. */\n  labwareBioRiskCodes: Array<SampleBioRisk>;\n  /** Reloads saved slot copy information. */\n  reloadSlotCopy?: Maybe<SlotCopyLoad>;\n  /** Get the specified storage location. */\n  location: Location;\n  /** Get the information about stored items with the given barcodes. */\n  stored: Array<StoredItem>;\n  /** Get the labware contained in a particular location. */\n  labwareInLocation: Array<Labware>;\n  /** Gets the parent hierarchy, from the root to the specified location. */\n  storagePath: Array<LinkedLocation>;\n  /** Gets info about the current version of the application. */\n  version: VersionInfo;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryHmdmcsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryBioRisksArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryFixativesArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QuerySpeciesArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryProbePanelsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryLabwareArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryLabwareFlaggedArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryPrintersArgs = {\n  labelType?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryCommentsArgs = {\n  category?: InputMaybe<Scalars['String']['input']>;\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryEquipmentsArgs = {\n  category?: InputMaybe<Scalars['String']['input']>;\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryReleaseDestinationsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryReleaseRecipientsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryDestructionReasonsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryProjectsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryProgramsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryCostCodesArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryDnapStudiesArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryDnapStudyArgs = {\n  ssId: Scalars['Int']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QuerySolutionsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryOmeroProjectsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QuerySlotRegionsArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QuerySamplePositionsArgs = {\n  labwareBarcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryWorkTypesArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryWorksArgs = {\n  status?: InputMaybe<Array<WorkStatus>>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryWorkArgs = {\n  workNumber: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryWorksCreatedByArgs = {\n  username: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryWorksWithCommentsArgs = {\n  status?: InputMaybe<Array<WorkStatus>>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryUsersArgs = {\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryFindArgs = {\n  request: FindRequest;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryPlanDataArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryVisiumPermDataArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryExtractResultArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryPassFailsArgs = {\n  barcode: Scalars['String']['input'];\n  operationType: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryListFilesArgs = {\n  workNumbers: Array<Scalars['String']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryLabwareCostingArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryFindLatestOpArgs = {\n  barcode: Scalars['String']['input'];\n  operationType: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryCleanedOutAddressesArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryHistoryForSampleIdArgs = {\n  sampleId: Scalars['Int']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryHistoryForExternalNameArgs = {\n  externalName: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryHistoryForDonorNameArgs = {\n  donorName: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryHistoryForWorkNumberArgs = {\n  workNumber: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryHistoryForLabwareBarcodeArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryHistoryArgs = {\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  barcode?: InputMaybe<Scalars['String']['input']>;\n  externalName?: InputMaybe<Array<Scalars['String']['input']>>;\n  donorName?: InputMaybe<Array<Scalars['String']['input']>>;\n  eventType?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryHistoryGraphArgs = {\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  barcode?: InputMaybe<Scalars['String']['input']>;\n  externalName?: InputMaybe<Array<Scalars['String']['input']>>;\n  donorName?: InputMaybe<Array<Scalars['String']['input']>>;\n  zoom?: InputMaybe<Scalars['Float']['input']>;\n  fontSize?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryWorkProgressArgs = {\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  workTypes?: InputMaybe<Array<Scalars['String']['input']>>;\n  programs?: InputMaybe<Array<Scalars['String']['input']>>;\n  statuses?: InputMaybe<Array<WorkStatus>>;\n  requesters?: InputMaybe<Array<Scalars['String']['input']>>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryReagentPlateArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryNextReplicateNumbersArgs = {\n  barcodes: Array<Scalars['String']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryLabwareOperationsArgs = {\n  barcode: Scalars['String']['input'];\n  operationType: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QuerySuggestedWorkForLabwareArgs = {\n  barcodes: Array<Scalars['String']['input']>;\n  includeInactive?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QuerySuggestedLabwareForWorkArgs = {\n  workNumber: Scalars['String']['input'];\n  forRelease?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryLabwareFlagDetailsArgs = {\n  barcodes: Array<Scalars['String']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryMeasurementValueFromLabwareOrParentArgs = {\n  barcode: Scalars['String']['input'];\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryRoisArgs = {\n  barcodes: Array<Scalars['String']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryRunRoisArgs = {\n  barcode: Scalars['String']['input'];\n  run: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryAnalyserScanDataArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryRunNamesArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryLabwareBioRiskCodesArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryReloadSlotCopyArgs = {\n  operationType: Scalars['String']['input'];\n  workNumber: Scalars['String']['input'];\n  lpNumber: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryLocationArgs = {\n  locationBarcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryStoredArgs = {\n  barcodes: Array<Scalars['String']['input']>;\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryLabwareInLocationArgs = {\n  locationBarcode: Scalars['String']['input'];\n};\n\n\n/**\n * Get information from the application.\n * These typically require no user privilege.\n */\nexport type QueryStoragePathArgs = {\n  locationBarcode: Scalars['String']['input'];\n};\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /** Log in with your Sanger id and create an end user account. */\n  registerAsEndUser: LoginResult;\n  /** Log in with the given credentials. */\n  login: LoginResult;\n  /** Log out; end the current login session. */\n  logout?: Maybe<Scalars['String']['output']>;\n  /** Register blocks of tissue. */\n  register: RegisterResult;\n  /** Register sections of tissue. */\n  registerSections: RegisterResult;\n  /** Record planned operations. */\n  plan: PlanResult;\n  /** Print the specified labware barcodes on the specified printer. */\n  printLabware?: Maybe<Scalars['String']['output']>;\n  /** Confirm operations previously planned. */\n  confirmOperation: ConfirmOperationResult;\n  /** Confirm sections previously planned. */\n  confirmSection: OperationResult;\n  /** Release some labware. */\n  release: ReleaseResult;\n  /** Record extract operations. */\n  extract: OperationResult;\n  /** Destroy some labware. */\n  destroy: DestroyResult;\n  /** Record an operation copying slots from multiple source labware into various slots of one destination labware. */\n  slotCopy: OperationResult;\n  /** Create a new comment that users can select to link to future operations. */\n  addComment: Comment;\n  /** Enable or disable a preset comment. */\n  setCommentEnabled: Comment;\n  /** Create a new piece of equipment that users can record using in future operations. */\n  addEquipment: Equipment;\n  /** Rename existing equipment. */\n  renameEquipment: Equipment;\n  /** Enable or disable a piece of equipment. */\n  setEquipmentEnabled: Equipment;\n  /** Create a new reason that users can record when destroying labware. */\n  addDestructionReason: DestructionReason;\n  /** Enable or disable a destruction reason. */\n  setDestructionReasonEnabled: DestructionReason;\n  /** Create a new HMDMC that can be used when registering new tissue. */\n  addHmdmc: Hmdmc;\n  /** Enable or disable an HMDMC. */\n  setHmdmcEnabled: Hmdmc;\n  /** Create a new Bio Risk. */\n  addBioRisk: BioRisk;\n  /** Enable or disable a Bio Risk. */\n  setBioRiskEnabled: BioRisk;\n  /** Create a new release destination that can be associated with labware releases. */\n  addReleaseDestination: ReleaseDestination;\n  /** Enable or disable a release destination. */\n  setReleaseDestinationEnabled: ReleaseDestination;\n  /** Create a new release recipient that can be associated with labware releases. */\n  addReleaseRecipient: ReleaseRecipient;\n  /** Update a release recipient fullName. */\n  updateReleaseRecipientFullName: ReleaseRecipient;\n  /** Enable or disable a release recipient. */\n  setReleaseRecipientEnabled: ReleaseRecipient;\n  /** Create a new species that can be associated with donors in tissue registration. */\n  addSpecies: Species;\n  /** Enable or disable a species. */\n  setSpeciesEnabled: Species;\n  /** Create a new project that can be associated with work. */\n  addProject: Project;\n  /** Enable or disable a project. */\n  setProjectEnabled: Project;\n  /** Create a new program that can be associated with work. */\n  addProgram: Program;\n  /** Enable or disable a program. */\n  setProgramEnabled: Program;\n  /** Create a new cost code that can be associated with work. */\n  addCostCode: CostCode;\n  /** Enable or disable a cost code. */\n  setCostCodeEnabled: CostCode;\n  /** Create a new fixative that can be selected when registering tissue. */\n  addFixative: Fixative;\n  /** Enable or disable a fixative. */\n  setFixativeEnabled: Fixative;\n  /** Create a new work type. */\n  addWorkType: WorkType;\n  /** Enable or disable a work type. */\n  setWorkTypeEnabled: WorkType;\n  /** Add a new solution. */\n  addSolution: Solution;\n  /** Enable or disable a solution. */\n  setSolutionEnabled: Solution;\n  /** Add a new omero project. */\n  addOmeroProject: OmeroProject;\n  /** Enable or disable an omero project. */\n  setOmeroProjectEnabled: OmeroProject;\n  /** Add a new slot region. */\n  addSlotRegion: SlotRegion;\n  /** Enable or disable a slot region. */\n  setSlotRegionEnabled: SlotRegion;\n  /** Add a new probe panel. */\n  addProbePanel: ProbePanel;\n  /** Enable or disable a probe panel. */\n  setProbePanelEnabled: ProbePanel;\n  /** Create a new work, which will be allocated a new work number with the given prefix. */\n  createWork: Work;\n  /** Update the status of an existing work. */\n  updateWorkStatus: WorkWithComment;\n  /** Update the number of blocks field in a work. */\n  updateWorkNumBlocks: Work;\n  /** Update the number of slides field in a work. */\n  updateWorkNumSlides: Work;\n  /** Update the number of original samples field in a work. */\n  updateWorkNumOriginalSamples: Work;\n  /** Update the priority of a work. */\n  updateWorkPriority: Work;\n  /** Update the omero project of a work. */\n  updateWorkOmeroProject: Work;\n  /** Update the DNAP study of a work. */\n  updateWorkDnapStudy: Work;\n  /** Updates Stan's internal list of Dnap Studies, and returns the enabled ones. */\n  updateDnapStudies: Array<DnapStudy>;\n  /** Add a new tissue type. */\n  addTissueType: TissueType;\n  /** Add spatial location to an existing tissue type. */\n  addSpatialLocations: TissueType;\n  /** Record a new stain with time measurements. */\n  stain: OperationResult;\n  /** Record an operation in place. */\n  recordInPlace: OperationResult;\n  /** Unrelease some previously released labware. */\n  unrelease: OperationResult;\n  /** Record the result of a stain. */\n  recordStainResult: OperationResult;\n  /** Record the result of an extract. */\n  recordExtractResult: OperationResult;\n  /** Record permeabilisation. */\n  recordPerm: OperationResult;\n  /** Record Visium Analysis. */\n  visiumAnalysis: OperationResult;\n  /** Record RNA Analysis. */\n  recordRNAAnalysis: OperationResult;\n  /** Record Visium QC. */\n  recordVisiumQC: OperationResult;\n  /** Record an operation with measurements in slots. */\n  recordOpWithSlotMeasurements: OperationResult;\n  /** Record a stain operation with plex and bond information. */\n  recordComplexStain: OperationResult;\n  /** Transfer samples from one labware into multiple labware. */\n  aliquot: OperationResult;\n  /** Record an operation transferring reagents from a reagent plate to an item of Stan labware. */\n  reagentTransfer: OperationResult;\n  /** Register original samples. */\n  registerOriginalSamples: RegisterResult;\n  /** Process tissue into blocks. */\n  performTissueBlock: OperationResult;\n  /** Process an original sample into pots. */\n  performPotProcessing: OperationResult;\n  /** Record ops to add sample processing comments. */\n  recordSampleProcessingComments: OperationResult;\n  /** Add solutions to labware. */\n  performSolutionTransfer: OperationResult;\n  /** Perform paraffin processing. */\n  performParaffinProcessing: OperationResult;\n  /** Record an operation adding a external ID to a sample. */\n  addExternalID: OperationResult;\n  /** Record an operation in-place with comments on slots. */\n  recordOpWithSlotComments: OperationResult;\n  /** Record an operation involving probe panels. */\n  recordProbeOperation: OperationResult;\n  /** Record a process being completed. */\n  recordCompletion: OperationResult;\n  /** Record analyser operation. */\n  recordAnalyser: OperationResult;\n  /** Flag labware. */\n  flagLabware: OperationResult;\n  /** Record QC labware request. */\n  recordQCLabware: OperationResult;\n  /** Record Orientation QC. */\n  recordOrientationQC: OperationResult;\n  /** Reactivate labware. */\n  reactivateLabware: OperationResult;\n  /** Perform library prep request. */\n  libraryPrep: OperationResult;\n  /** Record segmentation. */\n  segmentation: OperationResult;\n  /** Clean out a slot of a labware. */\n  cleanOut: OperationResult;\n  /** Record metrics. */\n  recordSampleMetrics: OperationResult;\n  /** Save slot copy information for a future operation. */\n  saveSlotCopy: SlotCopyLoad;\n  /** Link a work number to prior operations. */\n  setOperationWork: Array<Operation>;\n  /** Create a new user for the application. */\n  addUser: User;\n  /** Set the user role (privileges) for a user. */\n  setUserRole: User;\n  /** Store an item in a particular location, optionally with an address. */\n  storeBarcode: StoredItem;\n  /** Store multiple items in a particular location, with optional addresses. */\n  store: Location;\n  /** Remove a specified item from storage. */\n  unstoreBarcode?: Maybe<UnstoredItem>;\n  /** Empty a specified location of its stored items. */\n  empty: UnstoreResult;\n  /** Transfer labware from one storage location to another. */\n  transfer: Location;\n  /** Set the custom name of a specified location. */\n  setLocationCustomName: Location;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRegisterAsEndUserArgs = {\n  username: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationLoginArgs = {\n  username: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRegisterArgs = {\n  request: RegisterRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRegisterSectionsArgs = {\n  request?: InputMaybe<SectionRegisterRequest>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationPlanArgs = {\n  request: PlanRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationPrintLabwareArgs = {\n  printer: Scalars['String']['input'];\n  barcodes: Array<Scalars['String']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationConfirmOperationArgs = {\n  request: ConfirmOperationRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationConfirmSectionArgs = {\n  request: ConfirmSectionRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationReleaseArgs = {\n  request: ReleaseRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationExtractArgs = {\n  request: ExtractRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationDestroyArgs = {\n  request: DestroyRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSlotCopyArgs = {\n  request: SlotCopyRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddCommentArgs = {\n  category: Scalars['String']['input'];\n  text: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetCommentEnabledArgs = {\n  commentId: Scalars['Int']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddEquipmentArgs = {\n  category: Scalars['String']['input'];\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRenameEquipmentArgs = {\n  equipmentId: Scalars['Int']['input'];\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetEquipmentEnabledArgs = {\n  equipmentId: Scalars['Int']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddDestructionReasonArgs = {\n  text: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetDestructionReasonEnabledArgs = {\n  text: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddHmdmcArgs = {\n  hmdmc: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetHmdmcEnabledArgs = {\n  hmdmc: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddBioRiskArgs = {\n  code: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetBioRiskEnabledArgs = {\n  code: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddReleaseDestinationArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetReleaseDestinationEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddReleaseRecipientArgs = {\n  username: Scalars['String']['input'];\n  fullName?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUpdateReleaseRecipientFullNameArgs = {\n  username: Scalars['String']['input'];\n  fullName?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetReleaseRecipientEnabledArgs = {\n  username: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddSpeciesArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetSpeciesEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddProjectArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetProjectEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddProgramArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetProgramEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddCostCodeArgs = {\n  code: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetCostCodeEnabledArgs = {\n  code: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddFixativeArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetFixativeEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddWorkTypeArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetWorkTypeEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddSolutionArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetSolutionEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddOmeroProjectArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetOmeroProjectEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddSlotRegionArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetSlotRegionEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddProbePanelArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetProbePanelEnabledArgs = {\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationCreateWorkArgs = {\n  prefix: Scalars['String']['input'];\n  workType: Scalars['String']['input'];\n  workRequester: Scalars['String']['input'];\n  project: Scalars['String']['input'];\n  program: Scalars['String']['input'];\n  costCode: Scalars['String']['input'];\n  numBlocks?: InputMaybe<Scalars['Int']['input']>;\n  numSlides?: InputMaybe<Scalars['Int']['input']>;\n  numOriginalSamples?: InputMaybe<Scalars['Int']['input']>;\n  omeroProject?: InputMaybe<Scalars['String']['input']>;\n  ssStudyId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUpdateWorkStatusArgs = {\n  workNumber: Scalars['String']['input'];\n  status: WorkStatus;\n  commentId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUpdateWorkNumBlocksArgs = {\n  workNumber: Scalars['String']['input'];\n  numBlocks?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUpdateWorkNumSlidesArgs = {\n  workNumber: Scalars['String']['input'];\n  numSlides?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUpdateWorkNumOriginalSamplesArgs = {\n  workNumber: Scalars['String']['input'];\n  numOriginalSamples?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUpdateWorkPriorityArgs = {\n  workNumber: Scalars['String']['input'];\n  priority?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUpdateWorkOmeroProjectArgs = {\n  workNumber: Scalars['String']['input'];\n  omeroProject?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUpdateWorkDnapStudyArgs = {\n  workNumber: Scalars['String']['input'];\n  ssStudyId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddTissueTypeArgs = {\n  request: AddTissueTypeRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddSpatialLocationsArgs = {\n  request: AddSpatialLocationsRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationStainArgs = {\n  request: StainRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordInPlaceArgs = {\n  request: InPlaceOpRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUnreleaseArgs = {\n  request: UnreleaseRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordStainResultArgs = {\n  request: ResultRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordExtractResultArgs = {\n  request: ExtractResultRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordPermArgs = {\n  request: RecordPermRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationVisiumAnalysisArgs = {\n  request: VisiumAnalysisRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordRnaAnalysisArgs = {\n  request: RnaAnalysisRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordVisiumQcArgs = {\n  request: ResultRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordOpWithSlotMeasurementsArgs = {\n  request: OpWithSlotMeasurementsRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordComplexStainArgs = {\n  request: ComplexStainRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAliquotArgs = {\n  request: AliquotRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationReagentTransferArgs = {\n  request: ReagentTransferRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRegisterOriginalSamplesArgs = {\n  request: OriginalSampleRegisterRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationPerformTissueBlockArgs = {\n  request: TissueBlockRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationPerformPotProcessingArgs = {\n  request: PotProcessingRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordSampleProcessingCommentsArgs = {\n  request: SampleProcessingCommentRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationPerformSolutionTransferArgs = {\n  request: SolutionTransferRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationPerformParaffinProcessingArgs = {\n  request: ParaffinProcessingRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddExternalIdArgs = {\n  request: AddExternalIdRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordOpWithSlotCommentsArgs = {\n  request: OpWithSlotCommentsRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordProbeOperationArgs = {\n  request: ProbeOperationRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordCompletionArgs = {\n  request: CompletionRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordAnalyserArgs = {\n  request: AnalyserRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationFlagLabwareArgs = {\n  request: FlagLabwareRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordQcLabwareArgs = {\n  request: QcLabwareRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordOrientationQcArgs = {\n  request: OrientationRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationReactivateLabwareArgs = {\n  items: Array<ReactivateLabware>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationLibraryPrepArgs = {\n  request: LibraryPrepRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSegmentationArgs = {\n  request: SegmentationRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationCleanOutArgs = {\n  request: CleanOutRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationRecordSampleMetricsArgs = {\n  request: SampleMetricsRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSaveSlotCopyArgs = {\n  request: SlotCopySave;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetOperationWorkArgs = {\n  request: OpWorkRequest;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationAddUserArgs = {\n  username: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetUserRoleArgs = {\n  username: Scalars['String']['input'];\n  role: UserRole;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationStoreBarcodeArgs = {\n  barcode: Scalars['String']['input'];\n  locationBarcode: Scalars['String']['input'];\n  address?: InputMaybe<Scalars['Address']['input']>;\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationStoreArgs = {\n  store: Array<StoreInput>;\n  locationBarcode: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationUnstoreBarcodeArgs = {\n  barcode: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationEmptyArgs = {\n  locationBarcode: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationTransferArgs = {\n  sourceBarcode: Scalars['String']['input'];\n  destinationBarcode: Scalars['String']['input'];\n};\n\n\n/**\n * Send information to the application.\n * These typically require a user with the suitable permission for the particular request.\n */\nexport type MutationSetLocationCustomNameArgs = {\n  locationBarcode: Scalars['String']['input'];\n  customName?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type AddCostCodeMutationVariables = Exact<{\n  code: Scalars['String']['input'];\n}>;\n\n\nexport type AddCostCodeMutation = { __typename?: 'Mutation', addCostCode: { __typename?: 'CostCode', code: string, enabled: boolean } };\n\nexport type AddCommentMutationVariables = Exact<{\n  category: Scalars['String']['input'];\n  text: Scalars['String']['input'];\n}>;\n\n\nexport type AddCommentMutation = { __typename?: 'Mutation', addComment: { __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean } };\n\nexport type AddEquipmentMutationVariables = Exact<{\n  category: Scalars['String']['input'];\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddEquipmentMutation = { __typename?: 'Mutation', addEquipment: { __typename?: 'Equipment', id: number, name: string, category: string, enabled: boolean } };\n\nexport type AddFixativeMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddFixativeMutation = { __typename?: 'Mutation', addFixative: { __typename?: 'Fixative', name: string, enabled: boolean } };\n\nexport type AddHmdmcMutationVariables = Exact<{\n  hmdmc: Scalars['String']['input'];\n}>;\n\n\nexport type AddHmdmcMutation = { __typename?: 'Mutation', addHmdmc: { __typename?: 'Hmdmc', hmdmc: string, enabled: boolean } };\n\nexport type AddExternalIdMutationVariables = Exact<{\n  request: AddExternalIdRequest;\n}>;\n\n\nexport type AddExternalIdMutation = { __typename?: 'Mutation', addExternalID: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', performed: string, operationType: { __typename?: 'OperationType', name: string }, user: { __typename?: 'User', username: string } }> } };\n\nexport type AddDestructionReasonMutationVariables = Exact<{\n  text: Scalars['String']['input'];\n}>;\n\n\nexport type AddDestructionReasonMutation = { __typename?: 'Mutation', addDestructionReason: { __typename?: 'DestructionReason', id: number, text: string, enabled: boolean } };\n\nexport type AddOmeroProjectMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddOmeroProjectMutation = { __typename?: 'Mutation', addOmeroProject: { __typename?: 'OmeroProject', name: string, enabled: boolean } };\n\nexport type AddProgramMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddProgramMutation = { __typename?: 'Mutation', addProgram: { __typename?: 'Program', name: string, enabled: boolean } };\n\nexport type AddBioRiskMutationVariables = Exact<{\n  code: Scalars['String']['input'];\n}>;\n\n\nexport type AddBioRiskMutation = { __typename?: 'Mutation', addBioRisk: { __typename?: 'BioRisk', code: string, enabled: boolean } };\n\nexport type AddProjectMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddProjectMutation = { __typename?: 'Mutation', addProject: { __typename?: 'Project', name: string, enabled: boolean } };\n\nexport type AddProbePanelMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddProbePanelMutation = { __typename?: 'Mutation', addProbePanel: { __typename?: 'ProbePanel', name: string, enabled: boolean } };\n\nexport type AddSlotRegionMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddSlotRegionMutation = { __typename?: 'Mutation', addSlotRegion: { __typename?: 'SlotRegion', enabled: boolean, name: string } };\n\nexport type AddSolutionMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddSolutionMutation = { __typename?: 'Mutation', addSolution: { __typename?: 'Solution', name: string, enabled: boolean } };\n\nexport type AddUserMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n}>;\n\n\nexport type AddUserMutation = { __typename?: 'Mutation', addUser: { __typename?: 'User', username: string, role: UserRole } };\n\nexport type AddReleaseDestinationMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddReleaseDestinationMutation = { __typename?: 'Mutation', addReleaseDestination: { __typename?: 'ReleaseDestination', name: string, enabled: boolean } };\n\nexport type AddWorkTypeMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddWorkTypeMutation = { __typename?: 'Mutation', addWorkType: { __typename?: 'WorkType', name: string, enabled: boolean } };\n\nexport type ConfirmMutationVariables = Exact<{\n  request: ConfirmOperationRequest;\n}>;\n\n\nexport type ConfirmMutation = { __typename?: 'Mutation', confirmOperation: { __typename?: 'ConfirmOperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', performed: string, operationType: { __typename?: 'OperationType', name: string }, user: { __typename?: 'User', username: string } }> } };\n\nexport type AddTissueTypeMutationVariables = Exact<{\n  request: AddTissueTypeRequest;\n}>;\n\n\nexport type AddTissueTypeMutation = { __typename?: 'Mutation', addTissueType: { __typename?: 'TissueType', name: string, code: string, spatialLocations: Array<{ __typename?: 'SpatialLocation', code: number, name: string }> } };\n\nexport type AddSpatialLocationsMutationVariables = Exact<{\n  request: AddSpatialLocationsRequest;\n}>;\n\n\nexport type AddSpatialLocationsMutation = { __typename?: 'Mutation', addSpatialLocations: { __typename?: 'TissueType', name: string, spatialLocations: Array<{ __typename?: 'SpatialLocation', code: number, name: string }> } };\n\nexport type AddSpeciesMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type AddSpeciesMutation = { __typename?: 'Mutation', addSpecies: { __typename?: 'Species', name: string, enabled: boolean } };\n\nexport type AliquotMutationVariables = Exact<{\n  request: AliquotRequest;\n}>;\n\n\nexport type AliquotMutation = { __typename?: 'Mutation', aliquot: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', operationType: { __typename?: 'OperationType', name: string }, actions: Array<{ __typename?: 'Action', sample: { __typename?: 'Sample', id: number }, source: { __typename?: 'Slot', address: string, labwareId: number, samples: Array<{ __typename?: 'Sample', id: number }> }, destination: { __typename?: 'Slot', address: string, labwareId: number } }> }> } };\n\nexport type AddReleaseRecipientMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n  fullName?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type AddReleaseRecipientMutation = { __typename?: 'Mutation', addReleaseRecipient: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } };\n\nexport type EmptyLocationMutationVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type EmptyLocationMutation = { __typename?: 'Mutation', empty: { __typename?: 'UnstoreResult', numUnstored: number } };\n\nexport type DestroyMutationVariables = Exact<{\n  request: DestroyRequest;\n}>;\n\n\nexport type DestroyMutation = { __typename?: 'Mutation', destroy: { __typename?: 'DestroyResult', destructions: Array<{ __typename?: 'Destruction', labware?: { __typename?: 'Labware', barcode: string } | null }> } };\n\nexport type ConfirmSectionMutationVariables = Exact<{\n  request: ConfirmSectionRequest;\n}>;\n\n\nexport type ConfirmSectionMutation = { __typename?: 'Mutation', confirmSection: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', performed: string, operationType: { __typename?: 'OperationType', name: string }, user: { __typename?: 'User', username: string } }> } };\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = { __typename?: 'Mutation', logout?: string | null };\n\nexport type PerformSolutionTransferMutationVariables = Exact<{\n  request: SolutionTransferRequest;\n}>;\n\n\nexport type PerformSolutionTransferMutation = { __typename?: 'Mutation', performSolutionTransfer: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', performed: string, operationType: { __typename?: 'OperationType', name: string }, user: { __typename?: 'User', username: string } }> } };\n\nexport type ExtractMutationVariables = Exact<{\n  request: ExtractRequest;\n}>;\n\n\nexport type ExtractMutation = { __typename?: 'Mutation', extract: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', operationType: { __typename?: 'OperationType', name: string }, actions: Array<{ __typename?: 'Action', sample: { __typename?: 'Sample', id: number }, source: { __typename?: 'Slot', address: string, labwareId: number, samples: Array<{ __typename?: 'Sample', id: number }> }, destination: { __typename?: 'Slot', address: string, labwareId: number } }> }> } };\n\nexport type PlanMutationVariables = Exact<{\n  request: PlanRequest;\n}>;\n\n\nexport type PlanMutation = { __typename?: 'Mutation', plan: { __typename?: 'PlanResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'PlanOperation', operationType?: { __typename?: 'OperationType', name: string } | null, planActions: Array<{ __typename?: 'PlanAction', newSection?: number | null, sample: { __typename?: 'Sample', id: number }, source: { __typename?: 'Slot', address: string, labwareId: number, samples: Array<{ __typename?: 'Sample', id: number }> }, destination: { __typename?: 'Slot', address: string, labwareId: number } }> }> } };\n\nexport type PerformTissueBlockMutationVariables = Exact<{\n  request: TissueBlockRequest;\n}>;\n\n\nexport type PerformTissueBlockMutation = { __typename?: 'Mutation', performTissueBlock: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', performed: string, operationType: { __typename?: 'OperationType', name: string }, user: { __typename?: 'User', username: string } }> } };\n\nexport type LoginMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', login: { __typename?: 'LoginResult', user?: { __typename?: 'User', username: string, role: UserRole } | null } };\n\nexport type PerformTissuePotMutationVariables = Exact<{\n  request: PotProcessingRequest;\n}>;\n\n\nexport type PerformTissuePotMutation = { __typename?: 'Mutation', performPotProcessing: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', performed: string, operationType: { __typename?: 'OperationType', name: string }, user: { __typename?: 'User', username: string } }> } };\n\nexport type CreateWorkMutationVariables = Exact<{\n  prefix: Scalars['String']['input'];\n  workType: Scalars['String']['input'];\n  workRequester: Scalars['String']['input'];\n  project: Scalars['String']['input'];\n  program: Scalars['String']['input'];\n  costCode: Scalars['String']['input'];\n  numBlocks?: InputMaybe<Scalars['Int']['input']>;\n  numSlides?: InputMaybe<Scalars['Int']['input']>;\n  numOriginalSamples?: InputMaybe<Scalars['Int']['input']>;\n  omeroProject?: InputMaybe<Scalars['String']['input']>;\n  ssStudyId?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type CreateWorkMutation = { __typename?: 'Mutation', createWork: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } };\n\nexport type PrintMutationVariables = Exact<{\n  barcodes: Array<Scalars['String']['input']> | Scalars['String']['input'];\n  printer: Scalars['String']['input'];\n}>;\n\n\nexport type PrintMutation = { __typename?: 'Mutation', printLabware?: string | null };\n\nexport type FlagLabwareMutationVariables = Exact<{\n  request: FlagLabwareRequest;\n}>;\n\n\nexport type FlagLabwareMutation = { __typename?: 'Mutation', flagLabware: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordComplexStainMutationVariables = Exact<{\n  request: ComplexStainRequest;\n}>;\n\n\nexport type RecordComplexStainMutation = { __typename?: 'Mutation', recordComplexStain: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordCompletionMutationVariables = Exact<{\n  request: CompletionRequest;\n}>;\n\n\nexport type RecordCompletionMutation = { __typename?: 'Mutation', recordCompletion: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type PerformParaffinProcessingMutationVariables = Exact<{\n  request: ParaffinProcessingRequest;\n}>;\n\n\nexport type PerformParaffinProcessingMutation = { __typename?: 'Mutation', performParaffinProcessing: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', performed: string, operationType: { __typename?: 'OperationType', name: string }, user: { __typename?: 'User', username: string } }> } };\n\nexport type RecordAnalyserMutationVariables = Exact<{\n  request: AnalyserRequest;\n}>;\n\n\nexport type RecordAnalyserMutation = { __typename?: 'Mutation', recordAnalyser: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordExtractResultMutationVariables = Exact<{\n  request: ExtractResultRequest;\n}>;\n\n\nexport type RecordExtractResultMutation = { __typename?: 'Mutation', recordExtractResult: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordMetricsMutationVariables = Exact<{\n  request: SampleMetricsRequest;\n}>;\n\n\nexport type RecordMetricsMutation = { __typename?: 'Mutation', recordSampleMetrics: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordOpWithSlotMeasurementsMutationVariables = Exact<{\n  request: OpWithSlotMeasurementsRequest;\n}>;\n\n\nexport type RecordOpWithSlotMeasurementsMutation = { __typename?: 'Mutation', recordOpWithSlotMeasurements: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordOpWithSlotCommentsMutationVariables = Exact<{\n  request: OpWithSlotCommentsRequest;\n}>;\n\n\nexport type RecordOpWithSlotCommentsMutation = { __typename?: 'Mutation', recordOpWithSlotComments: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordInPlaceMutationVariables = Exact<{\n  request: InPlaceOpRequest;\n}>;\n\n\nexport type RecordInPlaceMutation = { __typename?: 'Mutation', recordInPlace: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }> } };\n\nexport type RecordPermMutationVariables = Exact<{\n  request: RecordPermRequest;\n}>;\n\n\nexport type RecordPermMutation = { __typename?: 'Mutation', recordPerm: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordReagentTransferMutationVariables = Exact<{\n  request: ReagentTransferRequest;\n}>;\n\n\nexport type RecordReagentTransferMutation = { __typename?: 'Mutation', reagentTransfer: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordLibraryPrepMutationVariables = Exact<{\n  request: LibraryPrepRequest;\n}>;\n\n\nexport type RecordLibraryPrepMutation = { __typename?: 'Mutation', libraryPrep: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }>, labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }> } };\n\nexport type ReactivateLabwareMutationVariables = Exact<{\n  items: Array<ReactivateLabware> | ReactivateLabware;\n}>;\n\n\nexport type ReactivateLabwareMutation = { __typename?: 'Mutation', reactivateLabware: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', barcode: string, state: LabwareState }>, operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordRnaAnalysisMutationVariables = Exact<{\n  request: RnaAnalysisRequest;\n}>;\n\n\nexport type RecordRnaAnalysisMutation = { __typename?: 'Mutation', recordRNAAnalysis: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordSampleProcessingCommentsMutationVariables = Exact<{\n  request: SampleProcessingCommentRequest;\n}>;\n\n\nexport type RecordSampleProcessingCommentsMutation = { __typename?: 'Mutation', recordSampleProcessingComments: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, operations: Array<{ __typename?: 'Operation', performed: string, operationType: { __typename?: 'OperationType', name: string }, user: { __typename?: 'User', username: string } }> } };\n\nexport type RecordProbeOperationMutationVariables = Exact<{\n  request: ProbeOperationRequest;\n}>;\n\n\nexport type RecordProbeOperationMutation = { __typename?: 'Mutation', recordProbeOperation: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RecordQcLabwareMutationVariables = Exact<{\n  request: QcLabwareRequest;\n}>;\n\n\nexport type RecordQcLabwareMutation = { __typename?: 'Mutation', recordQCLabware: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type RegisterOriginalSamplesMutationVariables = Exact<{\n  request: OriginalSampleRegisterRequest;\n}>;\n\n\nexport type RegisterOriginalSamplesMutation = { __typename?: 'Mutation', registerOriginalSamples: { __typename?: 'RegisterResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, clashes: Array<{ __typename?: 'RegisterClash', tissue: { __typename?: 'Tissue', externalName?: string | null, donor: { __typename?: 'Donor', donorName: string }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } } }, labware: Array<{ __typename?: 'Labware', barcode: string, labwareType: { __typename?: 'LabwareType', name: string } }> }>, labwareSolutions: Array<{ __typename?: 'LabwareSolutionName', barcode: string, solutionName: string } | null> } };\n\nexport type RecordVisiumQcMutationVariables = Exact<{\n  request: ResultRequest;\n}>;\n\n\nexport type RecordVisiumQcMutation = { __typename?: 'Mutation', recordVisiumQC: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type ReleaseLabwareMutationVariables = Exact<{\n  releaseRequest: ReleaseRequest;\n}>;\n\n\nexport type ReleaseLabwareMutation = { __typename?: 'Mutation', release: { __typename?: 'ReleaseResult', releases: Array<{ __typename?: 'Release', id: number, labware: { __typename?: 'Labware', barcode: string }, destination: { __typename?: 'ReleaseDestination', name: string }, recipient: { __typename?: 'ReleaseRecipient', username: string } }> } };\n\nexport type RegisterSectionsMutationVariables = Exact<{\n  request: SectionRegisterRequest;\n}>;\n\n\nexport type RegisterSectionsMutation = { __typename?: 'Mutation', registerSections: { __typename?: 'RegisterResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }> } };\n\nexport type RegisterAsEndUserMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n}>;\n\n\nexport type RegisterAsEndUserMutation = { __typename?: 'Mutation', registerAsEndUser: { __typename?: 'LoginResult', user?: { __typename?: 'User', username: string, role: UserRole } | null } };\n\nexport type RegisterTissuesMutationVariables = Exact<{\n  request: RegisterRequest;\n}>;\n\n\nexport type RegisterTissuesMutation = { __typename?: 'Mutation', register: { __typename?: 'RegisterResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, clashes: Array<{ __typename?: 'RegisterClash', tissue: { __typename?: 'Tissue', externalName?: string | null, donor: { __typename?: 'Donor', donorName: string }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } } }, labware: Array<{ __typename?: 'Labware', barcode: string, labwareType: { __typename?: 'LabwareType', name: string } }> }>, labwareSolutions: Array<{ __typename?: 'LabwareSolutionName', barcode: string, solutionName: string } | null> } };\n\nexport type SegmentationMutationVariables = Exact<{\n  request: SegmentationRequest;\n}>;\n\n\nexport type SegmentationMutation = { __typename?: 'Mutation', segmentation: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }>, labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }> } };\n\nexport type RecordOrientationQcMutationVariables = Exact<{\n  request: OrientationRequest;\n}>;\n\n\nexport type RecordOrientationQcMutation = { __typename?: 'Mutation', recordOrientationQC: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type SetEquipmentEnabledMutationVariables = Exact<{\n  equipmentId: Scalars['Int']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetEquipmentEnabledMutation = { __typename?: 'Mutation', setEquipmentEnabled: { __typename?: 'Equipment', id: number, name: string, category: string, enabled: boolean } };\n\nexport type SetDestructionReasonEnabledMutationVariables = Exact<{\n  text: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetDestructionReasonEnabledMutation = { __typename?: 'Mutation', setDestructionReasonEnabled: { __typename?: 'DestructionReason', id: number, text: string, enabled: boolean } };\n\nexport type SetCommentEnabledMutationVariables = Exact<{\n  commentId: Scalars['Int']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetCommentEnabledMutation = { __typename?: 'Mutation', setCommentEnabled: { __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean } };\n\nexport type SetCostCodeEnabledMutationVariables = Exact<{\n  code: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetCostCodeEnabledMutation = { __typename?: 'Mutation', setCostCodeEnabled: { __typename?: 'CostCode', code: string, enabled: boolean } };\n\nexport type SetBioRiskEnabledMutationVariables = Exact<{\n  code: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetBioRiskEnabledMutation = { __typename?: 'Mutation', setBioRiskEnabled: { __typename?: 'BioRisk', code: string, enabled: boolean } };\n\nexport type SetFixativeEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetFixativeEnabledMutation = { __typename?: 'Mutation', setFixativeEnabled: { __typename?: 'Fixative', name: string, enabled: boolean } };\n\nexport type SetLocationCustomNameMutationVariables = Exact<{\n  locationBarcode: Scalars['String']['input'];\n  newCustomName: Scalars['String']['input'];\n}>;\n\n\nexport type SetLocationCustomNameMutation = { __typename?: 'Mutation', setLocationCustomName: { __typename?: 'Location', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, direction?: GridDirection | null, numStored: number, leaf: boolean, parent?: { __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null } | null, size?: { __typename?: 'Size', numRows: number, numColumns: number } | null, stored: Array<{ __typename?: 'StoredItem', barcode: string, address?: string | null }>, children: Array<{ __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, numStored: number, leaf: boolean }> } };\n\nexport type SetProgramEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetProgramEnabledMutation = { __typename?: 'Mutation', setProgramEnabled: { __typename?: 'Program', name: string, enabled: boolean } };\n\nexport type SetHmdmcEnabledMutationVariables = Exact<{\n  hmdmc: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetHmdmcEnabledMutation = { __typename?: 'Mutation', setHmdmcEnabled: { __typename?: 'Hmdmc', hmdmc: string, enabled: boolean } };\n\nexport type RecordStainResultMutationVariables = Exact<{\n  request: ResultRequest;\n}>;\n\n\nexport type RecordStainResultMutation = { __typename?: 'Mutation', recordStainResult: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type SetOmeroProjectEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetOmeroProjectEnabledMutation = { __typename?: 'Mutation', setOmeroProjectEnabled: { __typename?: 'OmeroProject', name: string, enabled: boolean } };\n\nexport type SaveSlotCopyMutationVariables = Exact<{\n  request: SlotCopySave;\n}>;\n\n\nexport type SaveSlotCopyMutation = { __typename?: 'Mutation', saveSlotCopy: { __typename?: 'SlotCopyLoad', operationType: string, workNumber: string, lpNumber: string, executionType?: ExecutionType | null, labwareType?: string | null, barcode?: string | null, bioState?: string | null, costing?: SlideCosting | null, lotNumber?: string | null, probeLotNumber?: string | null, preBarcode?: string | null, sources: Array<{ __typename?: 'SlotCopyLoadSource', barcode: string, labwareState: LabwareState }>, contents: Array<{ __typename?: 'SlotCopyLoadContent', sourceBarcode: string, sourceAddress: string, destinationAddress: string }> } };\n\nexport type SetReleaseDestinationEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetReleaseDestinationEnabledMutation = { __typename?: 'Mutation', setReleaseDestinationEnabled: { __typename?: 'ReleaseDestination', name: string, enabled: boolean } };\n\nexport type SetProjectEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetProjectEnabledMutation = { __typename?: 'Mutation', setProjectEnabled: { __typename?: 'Project', name: string, enabled: boolean } };\n\nexport type SetProbePanelEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetProbePanelEnabledMutation = { __typename?: 'Mutation', setProbePanelEnabled: { __typename?: 'ProbePanel', name: string, enabled: boolean } };\n\nexport type SetReleaseRecipientEnabledMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetReleaseRecipientEnabledMutation = { __typename?: 'Mutation', setReleaseRecipientEnabled: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } };\n\nexport type SetSolutionEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetSolutionEnabledMutation = { __typename?: 'Mutation', setSolutionEnabled: { __typename?: 'Solution', name: string, enabled: boolean } };\n\nexport type SetSlotRegionEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetSlotRegionEnabledMutation = { __typename?: 'Mutation', setSlotRegionEnabled: { __typename?: 'SlotRegion', enabled: boolean, name: string } };\n\nexport type SetUserRoleMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n  role: UserRole;\n}>;\n\n\nexport type SetUserRoleMutation = { __typename?: 'Mutation', setUserRole: { __typename?: 'User', username: string, role: UserRole } };\n\nexport type SetWorkTypeEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetWorkTypeEnabledMutation = { __typename?: 'Mutation', setWorkTypeEnabled: { __typename?: 'WorkType', name: string, enabled: boolean } };\n\nexport type StoreMutationVariables = Exact<{\n  store: Array<StoreInput> | StoreInput;\n  locationBarcode: Scalars['String']['input'];\n}>;\n\n\nexport type StoreMutation = { __typename?: 'Mutation', store: { __typename?: 'Location', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, direction?: GridDirection | null, numStored: number, leaf: boolean, parent?: { __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null } | null, size?: { __typename?: 'Size', numRows: number, numColumns: number } | null, stored: Array<{ __typename?: 'StoredItem', barcode: string, address?: string | null }>, children: Array<{ __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, numStored: number, leaf: boolean }> } };\n\nexport type SlotCopyMutationVariables = Exact<{\n  request: SlotCopyRequest;\n}>;\n\n\nexport type SlotCopyMutation = { __typename?: 'Mutation', slotCopy: { __typename?: 'OperationResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }> } };\n\nexport type TransferLocationItemsMutationVariables = Exact<{\n  sourceBarcode: Scalars['String']['input'];\n  destinationBarcode: Scalars['String']['input'];\n}>;\n\n\nexport type TransferLocationItemsMutation = { __typename?: 'Mutation', transfer: { __typename?: 'Location', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, direction?: GridDirection | null, numStored: number, leaf: boolean, parent?: { __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null } | null, size?: { __typename?: 'Size', numRows: number, numColumns: number } | null, stored: Array<{ __typename?: 'StoredItem', barcode: string, address?: string | null }>, children: Array<{ __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, numStored: number, leaf: boolean }> } };\n\nexport type StainMutationVariables = Exact<{\n  request: StainRequest;\n}>;\n\n\nexport type StainMutation = { __typename?: 'Mutation', stain: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type StoreBarcodeMutationVariables = Exact<{\n  barcode: Scalars['String']['input'];\n  locationBarcode: Scalars['String']['input'];\n  address?: InputMaybe<Scalars['Address']['input']>;\n}>;\n\n\nexport type StoreBarcodeMutation = { __typename?: 'Mutation', storeBarcode: { __typename?: 'StoredItem', location: { __typename?: 'Location', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, direction?: GridDirection | null, numStored: number, leaf: boolean, parent?: { __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null } | null, size?: { __typename?: 'Size', numRows: number, numColumns: number } | null, stored: Array<{ __typename?: 'StoredItem', barcode: string, address?: string | null }>, children: Array<{ __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, numStored: number, leaf: boolean }> } } };\n\nexport type UnreleaseMutationVariables = Exact<{\n  request: UnreleaseRequest;\n}>;\n\n\nexport type UnreleaseMutation = { __typename?: 'Mutation', unrelease: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type UpdateWorkNumBlocksMutationVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n  numBlocks?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type UpdateWorkNumBlocksMutation = { __typename?: 'Mutation', updateWorkNumBlocks: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } };\n\nexport type SetSpeciesEnabledMutationVariables = Exact<{\n  name: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n}>;\n\n\nexport type SetSpeciesEnabledMutation = { __typename?: 'Mutation', setSpeciesEnabled: { __typename?: 'Species', name: string, enabled: boolean } };\n\nexport type UpdateWorkNumSlidesMutationVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n  numSlides?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type UpdateWorkNumSlidesMutation = { __typename?: 'Mutation', updateWorkNumSlides: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } };\n\nexport type UpdateWorkDnapStudyMutationVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n  ssStudyId?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type UpdateWorkDnapStudyMutation = { __typename?: 'Mutation', updateWorkDnapStudy: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } };\n\nexport type UpdateReleaseRecipientFullNameMutationVariables = Exact<{\n  username: Scalars['String']['input'];\n  fullName?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type UpdateReleaseRecipientFullNameMutation = { __typename?: 'Mutation', updateReleaseRecipientFullName: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } };\n\nexport type UpdateDnapStudiesMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UpdateDnapStudiesMutation = { __typename?: 'Mutation', updateDnapStudies: Array<{ __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean }> };\n\nexport type UnstoreBarcodeMutationVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type UnstoreBarcodeMutation = { __typename?: 'Mutation', unstoreBarcode?: { __typename?: 'UnstoredItem', barcode: string, address?: string | null } | null };\n\nexport type UpdateWorkOmeroProjectMutationVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n  omeroProject?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type UpdateWorkOmeroProjectMutation = { __typename?: 'Mutation', updateWorkOmeroProject: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } };\n\nexport type UpdateWorkNumOriginalSamplesMutationVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n  numOriginalSamples?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type UpdateWorkNumOriginalSamplesMutation = { __typename?: 'Mutation', updateWorkNumOriginalSamples: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } };\n\nexport type UpdateWorkPriorityMutationVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n  priority?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type UpdateWorkPriorityMutation = { __typename?: 'Mutation', updateWorkPriority: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } };\n\nexport type VisiumAnalysisMutationVariables = Exact<{\n  request: VisiumAnalysisRequest;\n}>;\n\n\nexport type VisiumAnalysisMutation = { __typename?: 'Mutation', visiumAnalysis: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type UpdateWorkStatusMutationVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n  status: WorkStatus;\n  commentId?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type UpdateWorkStatusMutation = { __typename?: 'Mutation', updateWorkStatus: { __typename?: 'WorkWithComment', comment?: string | null, work: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } } };\n\nexport type CostCodeFieldsFragment = { __typename?: 'CostCode', code: string, enabled: boolean };\n\nexport type ActionFieldsFragment = { __typename?: 'Action', operationId: number, source: { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }, destination: { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }, sample: { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } } };\n\nexport type BioRiskFieldsFragment = { __typename?: 'BioRisk', code: string, enabled: boolean };\n\nexport type AddressPermDataFieldsFragment = { __typename?: 'AddressPermData', address: string, controlType?: ControlType | null, seconds?: number | null, selected: boolean };\n\nexport type DestructionReasonFieldsFragment = { __typename?: 'DestructionReason', id: number, text: string, enabled: boolean };\n\nexport type AnalyserScanDataFieldsFragment = { __typename?: 'AnalyserScanData', workNumbers: Array<string>, probes: Array<string>, cellSegmentationRecorded: boolean };\n\nexport type EquipmentFieldsFragment = { __typename?: 'Equipment', id: number, name: string, category: string, enabled: boolean };\n\nexport type CommentFieldsFragment = { __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean };\n\nexport type DnapStudyFieldsFragment = { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean };\n\nexport type CleanOutMutationVariables = Exact<{\n  request: CleanOutRequest;\n}>;\n\n\nexport type CleanOutMutation = { __typename?: 'Mutation', cleanOut: { __typename?: 'OperationResult', operations: Array<{ __typename?: 'Operation', id: number }> } };\n\nexport type HmdmcFieldsFragment = { __typename?: 'Hmdmc', hmdmc: string, enabled: boolean };\n\nexport type HistoryFieldsFragment = { __typename?: 'History', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }>, entries: Array<{ __typename?: 'HistoryEntry', destinationLabwareId: number, details: Array<string>, eventId: number, sampleId?: number | null, sourceLabwareId: number, time: string, username: string, type: string, workNumber?: string | null, address?: string | null, region?: string | null }>, flagBarcodes: Array<{ __typename?: 'FlagBarcodes', barcodes: Array<string>, priority: FlagPriority }> };\n\nexport type GraphSvgFieldsFragment = { __typename?: 'GraphSVG', svg: string };\n\nexport type FileFieldsFragment = { __typename?: 'StanFile', created: string, name: string, url: string, work: { __typename?: 'Work', workNumber: string } };\n\nexport type LabwareFlaggedFieldsFragment = { __typename?: 'LabwareFlagged', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, flagged: boolean, flagPriority?: FlagPriority | null, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> };\n\nexport type FlagBarcodesFieldsFragment = { __typename?: 'FlagBarcodes', barcodes: Array<string>, priority: FlagPriority };\n\nexport type HistoryEntryFieldsFragment = { __typename?: 'HistoryEntry', destinationLabwareId: number, details: Array<string>, eventId: number, sampleId?: number | null, sourceLabwareId: number, time: string, username: string, type: string, workNumber?: string | null, address?: string | null, region?: string | null };\n\nexport type FixativeFieldsFragment = { __typename?: 'Fixative', name: string, enabled: boolean };\n\nexport type LocationFieldsFragment = { __typename?: 'Location', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, direction?: GridDirection | null, numStored: number, leaf: boolean, parent?: { __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null } | null, size?: { __typename?: 'Size', numRows: number, numColumns: number } | null, stored: Array<{ __typename?: 'StoredItem', barcode: string, address?: string | null }>, children: Array<{ __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, numStored: number, leaf: boolean }> };\n\nexport type LabwareTypeFieldsFragment = { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null };\n\nexport type NextReplicateDataFieldsFragment = { __typename?: 'NextReplicateData', barcodes: Array<string>, donorId: number, nextReplicateNumber: number, spatialLocationId: number };\n\nexport type LabwareRoiFieldsFragment = { __typename?: 'LabwareRoi', barcode: string, rois: Array<{ __typename?: 'Roi', address: string, roi: string, sample: { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } } }> };\n\nexport type OmeroProjectFieldsFragment = { __typename?: 'OmeroProject', name: string, enabled: boolean };\n\nexport type OperationFieldsFragment = { __typename?: 'Operation', id: number, performed: string, operationType: { __typename?: 'OperationType', name: string }, actions: Array<{ __typename?: 'Action', operationId: number, source: { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }, destination: { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }, sample: { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } } }>, user: { __typename?: 'User', username: string, role: UserRole } };\n\nexport type PlanActionFieldsFragment = { __typename?: 'PlanAction', newSection?: number | null, sample: { __typename?: 'Sample', id: number }, source: { __typename?: 'Slot', address: string, labwareId: number, samples: Array<{ __typename?: 'Sample', id: number }> }, destination: { __typename?: 'Slot', address: string, labwareId: number } };\n\nexport type PrinterFieldsFragment = { __typename?: 'Printer', name: string, labelTypes: Array<{ __typename?: 'LabelType', name: string }> };\n\nexport type ReagentPlateFieldsFragment = { __typename?: 'ReagentPlate', barcode: string, plateType?: string | null, slots: Array<{ __typename?: 'ReagentSlot', address: string, used: boolean }> };\n\nexport type ProbePanelFieldsFragment = { __typename?: 'ProbePanel', name: string, enabled: boolean };\n\nexport type ProgramFieldsFragment = { __typename?: 'Program', name: string, enabled: boolean };\n\nexport type ReleaseFileOptionFieldsFragment = { __typename?: 'ReleaseFileOption', displayName: string, queryParamName: string };\n\nexport type RegisterResultFieldsFragment = { __typename?: 'RegisterResult', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, clashes: Array<{ __typename?: 'RegisterClash', tissue: { __typename?: 'Tissue', externalName?: string | null, donor: { __typename?: 'Donor', donorName: string }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } } }, labware: Array<{ __typename?: 'Labware', barcode: string, labwareType: { __typename?: 'LabwareType', name: string } }> }>, labwareSolutions: Array<{ __typename?: 'LabwareSolutionName', barcode: string, solutionName: string } | null> };\n\nexport type LinkedLocationFieldsFragment = { __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, numStored: number, leaf: boolean };\n\nexport type ReleaseDestinationFieldsFragment = { __typename?: 'ReleaseDestination', name: string, enabled: boolean };\n\nexport type SampleFieldsFragment = { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } };\n\nexport type ReleaseRecipientFieldsFragment = { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean };\n\nexport type ReagentSlotFieldsFragment = { __typename?: 'ReagentSlot', address: string, used: boolean };\n\nexport type SlotPassFailFieldsFragment = { __typename?: 'SlotPassFail', address: string, result: PassFail, comment?: string | null };\n\nexport type RoiFieldsFragment = { __typename?: 'Roi', address: string, roi: string, sample: { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } } };\n\nexport type SlotFieldsFragment = { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> };\n\nexport type SamplePositionFieldsFragment = { __typename?: 'SamplePosition', address: string, region: string, sampleId: number, slotId: number, operationId: number };\n\nexport type ProjectFieldsFragment = { __typename?: 'Project', name: string, enabled: boolean };\n\nexport type SpeciesFieldsFragment = { __typename?: 'Species', name: string, enabled: boolean };\n\nexport type SolutionFieldsFragment = { __typename?: 'Solution', name: string, enabled: boolean };\n\nexport type StainTypeFieldsFragment = { __typename?: 'StainType', name: string, measurementTypes: Array<string> };\n\nexport type SampleBioRiskFieldsFragment = { __typename?: 'SampleBioRisk', sampleId: number, bioRiskCode: string };\n\nexport type SuggestedWorkFieldsFragment = { __typename?: 'SuggestedWork', barcode: string, workNumber?: string | null };\n\nexport type SlotRegionFieldsFragment = { __typename?: 'SlotRegion', enabled: boolean, name: string };\n\nexport type WorkFieldsFragment = { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null };\n\nexport type WorkProgressTimeStampFieldFragment = { __typename?: 'WorkProgressTimestamp', type: string, timestamp: string };\n\nexport type UserFieldsFragment = { __typename?: 'User', username: string, role: UserRole };\n\nexport type WorkTypeFieldsFragment = { __typename?: 'WorkType', name: string, enabled: boolean };\n\nexport type WorkProgressFieldsFragment = { __typename?: 'WorkProgress', mostRecentOperation?: string | null, workComment?: string | null, work: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null }, timestamps: Array<{ __typename?: 'WorkProgressTimestamp', type: string, timestamp: string }> };\n\nexport type WorkSummaryGroupFieldsFragment = { __typename?: 'WorkSummaryGroup', numWorks: number, status: WorkStatus, totalNumBlocks: number, totalNumSlides: number, totalNumOriginalSamples: number, workType: { __typename?: 'WorkType', name: string, enabled: boolean } };\n\nexport type LabwareFieldsFragment = { __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> };\n\nexport type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CurrentUserQuery = { __typename?: 'Query', user?: { __typename?: 'User', username: string, role: UserRole } | null };\n\nexport type TissueTypeFieldsFragment = { __typename?: 'TissueType', name: string, code: string, spatialLocations: Array<{ __typename?: 'SpatialLocation', code: number, name: string }> };\n\nexport type WorkWithCommentFieldsFragment = { __typename?: 'WorkWithComment', comment?: string | null, work: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } };\n\nexport type SlotCopyLoadFieldsFragment = { __typename?: 'SlotCopyLoad', operationType: string, workNumber: string, lpNumber: string, executionType?: ExecutionType | null, labwareType?: string | null, barcode?: string | null, bioState?: string | null, costing?: SlideCosting | null, lotNumber?: string | null, probeLotNumber?: string | null, preBarcode?: string | null, sources: Array<{ __typename?: 'SlotCopyLoadSource', barcode: string, labwareState: LabwareState }>, contents: Array<{ __typename?: 'SlotCopyLoadContent', sourceBarcode: string, sourceAddress: string, destinationAddress: string }> };\n\nexport type ExtractResultQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type ExtractResultQuery = { __typename?: 'Query', extractResult: { __typename?: 'ExtractResult', result?: PassFail | null, concentration?: string | null, labware: { __typename?: 'LabwareFlagged', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, flagged: boolean, flagPriority?: FlagPriority | null, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> } } };\n\nexport type FindQueryVariables = Exact<{\n  request: FindRequest;\n}>;\n\n\nexport type FindQuery = { __typename?: 'Query', find: { __typename?: 'FindResult', numRecords: number, entries: Array<{ __typename?: 'FindEntry', labwareId: number, sampleId: number, workNumbers: Array<string | null> }>, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', replicate?: string | null, externalName?: string | null, spatialLocation: { __typename?: 'SpatialLocation', tissueType: { __typename?: 'TissueType', name: string } }, donor: { __typename?: 'Donor', donorName: string }, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string } } }>, labware: Array<{ __typename?: 'Labware', id: number, barcode: string, created: string, labwareType: { __typename?: 'LabwareType', name: string } }>, locations: Array<{ __typename?: 'Location', id: number, barcode: string, customName?: string | null, fixedName?: string | null, direction?: GridDirection | null, qualifiedNameWithFirstBarcode?: string | null, size?: { __typename?: 'Size', numRows: number, numColumns: number } | null }>, labwareLocations: Array<{ __typename?: 'LabwareLocationEntry', labwareId: number, locationId: number, address?: string | null }> } };\n\nexport type FindFlaggedLabwareQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindFlaggedLabwareQuery = { __typename?: 'Query', labwareFlagged: { __typename?: 'LabwareFlagged', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, flagged: boolean, flagPriority?: FlagPriority | null, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> } };\n\nexport type FindHistoryForDonorNameQueryVariables = Exact<{\n  donorName: Scalars['String']['input'];\n}>;\n\n\nexport type FindHistoryForDonorNameQuery = { __typename?: 'Query', historyForDonorName: { __typename?: 'History', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }>, entries: Array<{ __typename?: 'HistoryEntry', destinationLabwareId: number, details: Array<string>, eventId: number, sampleId?: number | null, sourceLabwareId: number, time: string, username: string, type: string, workNumber?: string | null, address?: string | null, region?: string | null }>, flagBarcodes: Array<{ __typename?: 'FlagBarcodes', barcodes: Array<string>, priority: FlagPriority }> } };\n\nexport type FindHistoryQueryVariables = Exact<{\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  barcode?: InputMaybe<Scalars['String']['input']>;\n  donorName?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;\n  externalName?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;\n  eventType?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type FindHistoryQuery = { __typename?: 'Query', history: { __typename?: 'History', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }>, entries: Array<{ __typename?: 'HistoryEntry', destinationLabwareId: number, details: Array<string>, eventId: number, sampleId?: number | null, sourceLabwareId: number, time: string, username: string, type: string, workNumber?: string | null, address?: string | null, region?: string | null }>, flagBarcodes: Array<{ __typename?: 'FlagBarcodes', barcodes: Array<string>, priority: FlagPriority }> } };\n\nexport type FindHistoryForExternalNameQueryVariables = Exact<{\n  externalName: Scalars['String']['input'];\n}>;\n\n\nexport type FindHistoryForExternalNameQuery = { __typename?: 'Query', historyForExternalName: { __typename?: 'History', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }>, entries: Array<{ __typename?: 'HistoryEntry', destinationLabwareId: number, details: Array<string>, eventId: number, sampleId?: number | null, sourceLabwareId: number, time: string, username: string, type: string, workNumber?: string | null, address?: string | null, region?: string | null }>, flagBarcodes: Array<{ __typename?: 'FlagBarcodes', barcodes: Array<string>, priority: FlagPriority }> } };\n\nexport type FindLabwareQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindLabwareQuery = { __typename?: 'Query', labware: { __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> } };\n\nexport type FindHistoryForLabwareBarcodeQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindHistoryForLabwareBarcodeQuery = { __typename?: 'Query', historyForLabwareBarcode: { __typename?: 'History', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }>, entries: Array<{ __typename?: 'HistoryEntry', destinationLabwareId: number, details: Array<string>, eventId: number, sampleId?: number | null, sourceLabwareId: number, time: string, username: string, type: string, workNumber?: string | null, address?: string | null, region?: string | null }>, flagBarcodes: Array<{ __typename?: 'FlagBarcodes', barcodes: Array<string>, priority: FlagPriority }> } };\n\nexport type FindLabwareLocationQueryVariables = Exact<{\n  barcodes: Array<Scalars['String']['input']> | Scalars['String']['input'];\n}>;\n\n\nexport type FindLabwareLocationQuery = { __typename?: 'Query', stored: Array<{ __typename?: 'StoredItem', location: { __typename?: 'Location', barcode: string } }> };\n\nexport type FindFilesQueryVariables = Exact<{\n  workNumbers: Array<Scalars['String']['input']> | Scalars['String']['input'];\n}>;\n\n\nexport type FindFilesQuery = { __typename?: 'Query', listFiles: Array<{ __typename?: 'StanFile', created: string, name: string, url: string, work: { __typename?: 'Work', workNumber: string } }> };\n\nexport type FindHistoryGraphQueryVariables = Exact<{\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  barcode?: InputMaybe<Scalars['String']['input']>;\n  donorName?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;\n  externalName?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;\n  zoom?: InputMaybe<Scalars['Float']['input']>;\n  fontSize?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type FindHistoryGraphQuery = { __typename?: 'Query', historyGraph: { __typename?: 'GraphSVG', svg: string } };\n\nexport type FindHistoryForWorkNumberQueryVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n}>;\n\n\nexport type FindHistoryForWorkNumberQuery = { __typename?: 'Query', historyForWorkNumber: { __typename?: 'History', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }>, entries: Array<{ __typename?: 'HistoryEntry', destinationLabwareId: number, details: Array<string>, eventId: number, sampleId?: number | null, sourceLabwareId: number, time: string, username: string, type: string, workNumber?: string | null, address?: string | null, region?: string | null }>, flagBarcodes: Array<{ __typename?: 'FlagBarcodes', barcodes: Array<string>, priority: FlagPriority }> } };\n\nexport type FindHistoryForSampleIdQueryVariables = Exact<{\n  sampleId: Scalars['Int']['input'];\n}>;\n\n\nexport type FindHistoryForSampleIdQuery = { __typename?: 'Query', historyForSampleId: { __typename?: 'History', labware: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }>, entries: Array<{ __typename?: 'HistoryEntry', destinationLabwareId: number, details: Array<string>, eventId: number, sampleId?: number | null, sourceLabwareId: number, time: string, username: string, type: string, workNumber?: string | null, address?: string | null, region?: string | null }>, flagBarcodes: Array<{ __typename?: 'FlagBarcodes', barcodes: Array<string>, priority: FlagPriority }> } };\n\nexport type FindLocationByBarcodeQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindLocationByBarcodeQuery = { __typename?: 'Query', location: { __typename?: 'Location', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, direction?: GridDirection | null, numStored: number, leaf: boolean, parent?: { __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null } | null, size?: { __typename?: 'Size', numRows: number, numColumns: number } | null, stored: Array<{ __typename?: 'StoredItem', barcode: string, address?: string | null }>, children: Array<{ __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, numStored: number, leaf: boolean }> } };\n\nexport type FindPlanDataQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindPlanDataQuery = { __typename?: 'Query', planData: { __typename?: 'PlanData', sources: Array<{ __typename?: 'LabwareFlagged', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, flagged: boolean, flagPriority?: FlagPriority | null, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }>, destination: { __typename?: 'LabwareFlagged', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, flagged: boolean, flagPriority?: FlagPriority | null, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }, plan: { __typename?: 'PlanOperation', operationType?: { __typename?: 'OperationType', name: string } | null, planActions: Array<{ __typename?: 'PlanAction', newSection?: number | null, sample: { __typename?: 'Sample', id: number }, source: { __typename?: 'Slot', address: string, labwareId: number, samples: Array<{ __typename?: 'Sample', id: number }> }, destination: { __typename?: 'Slot', address: string, labwareId: number } }> } } };\n\nexport type FindWorkInfoQueryVariables = Exact<{\n  status: WorkStatus;\n}>;\n\n\nexport type FindWorkInfoQuery = { __typename?: 'Query', works: Array<{ __typename?: 'Work', workNumber: string, workRequester?: { __typename?: 'ReleaseRecipient', username: string } | null, project: { __typename?: 'Project', name: string } }> };\n\nexport type FindReagentPlateQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindReagentPlateQuery = { __typename?: 'Query', reagentPlate?: { __typename?: 'ReagentPlate', barcode: string, plateType?: string | null, slots: Array<{ __typename?: 'ReagentSlot', address: string, used: boolean }> } | null };\n\nexport type FindPermDataQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindPermDataQuery = { __typename?: 'Query', visiumPermData: { __typename?: 'VisiumPermData', labware: { __typename?: 'LabwareFlagged', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, flagged: boolean, flagPriority?: FlagPriority | null, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }, addressPermData: Array<{ __typename?: 'AddressPermData', address: string, controlType?: ControlType | null, seconds?: number | null, selected: boolean }>, samplePositionResults: Array<{ __typename?: 'SamplePosition', address: string, region: string, sampleId: number, slotId: number, operationId: number }> } };\n\nexport type FindSamplePositionsQueryVariables = Exact<{\n  labwareBarcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindSamplePositionsQuery = { __typename?: 'Query', samplePositions: Array<{ __typename?: 'SamplePosition', address: string, region: string, sampleId: number, slotId: number, operationId: number }> };\n\nexport type FindPassFailsQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n  operationType: Scalars['String']['input'];\n}>;\n\n\nexport type FindPassFailsQuery = { __typename?: 'Query', passFails: Array<{ __typename?: 'OpPassFail', operation: { __typename?: 'Operation', id: number, performed: string, operationType: { __typename?: 'OperationType', name: string }, actions: Array<{ __typename?: 'Action', operationId: number, source: { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }, destination: { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }, sample: { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } } }>, user: { __typename?: 'User', username: string, role: UserRole } }, slotPassFails: Array<{ __typename?: 'SlotPassFail', address: string, result: PassFail, comment?: string | null }> }> };\n\nexport type FindWorkNumbersQueryVariables = Exact<{\n  status: WorkStatus;\n}>;\n\n\nexport type FindWorkNumbersQuery = { __typename?: 'Query', works: Array<{ __typename?: 'Work', workNumber: string }> };\n\nexport type FindMeasurementByBarcodeAndNameQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n  measurementName: Scalars['String']['input'];\n}>;\n\n\nexport type FindMeasurementByBarcodeAndNameQuery = { __typename?: 'Query', measurementValueFromLabwareOrParent: Array<{ __typename?: 'AddressString', address: string, string: string }> };\n\nexport type GetBlockProcessingInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetBlockProcessingInfoQuery = { __typename?: 'Query', mediums: Array<{ __typename?: 'Medium', name: string }>, comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }>, labwareTypes: Array<{ __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }> };\n\nexport type FindLatestOperationQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n  operationType: Scalars['String']['input'];\n}>;\n\n\nexport type FindLatestOperationQuery = { __typename?: 'Query', findLatestOp?: { __typename?: 'Operation', id: number } | null };\n\nexport type FindWorkProgressQueryVariables = Exact<{\n  workNumber?: InputMaybe<Scalars['String']['input']>;\n  workTypes?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;\n  programs?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;\n  statuses?: InputMaybe<Array<WorkStatus> | WorkStatus>;\n  requesters?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;\n}>;\n\n\nexport type FindWorkProgressQuery = { __typename?: 'Query', workProgress: Array<{ __typename?: 'WorkProgress', mostRecentOperation?: string | null, workComment?: string | null, work: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null }, timestamps: Array<{ __typename?: 'WorkProgressTimestamp', type: string, timestamp: string }> }> };\n\nexport type GetBioRisksQueryVariables = Exact<{\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GetBioRisksQuery = { __typename?: 'Query', bioRisks: Array<{ __typename?: 'BioRisk', code: string, enabled: boolean }> };\n\nexport type FindWorksCreatedByQueryVariables = Exact<{\n  username: Scalars['String']['input'];\n}>;\n\n\nexport type FindWorksCreatedByQuery = { __typename?: 'Query', worksCreatedBy: Array<{ __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null }> };\n\nexport type GetAllWorkInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllWorkInfoQuery = { __typename?: 'Query', works: Array<{ __typename?: 'Work', workNumber: string, status: WorkStatus, workRequester?: { __typename?: 'ReleaseRecipient', username: string } | null, project: { __typename?: 'Project', name: string } }> };\n\nexport type GetCommentsQueryVariables = Exact<{\n  commentCategory?: InputMaybe<Scalars['String']['input']>;\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GetCommentsQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }> };\n\nexport type GetCleanedOutAddressesQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type GetCleanedOutAddressesQuery = { __typename?: 'Query', cleanedOutAddresses: Array<string> };\n\nexport type GetDestroyInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetDestroyInfoQuery = { __typename?: 'Query', destructionReasons: Array<{ __typename?: 'DestructionReason', id: number, text: string, enabled: boolean }> };\n\nexport type FindStoragePathQueryVariables = Exact<{\n  locationBarcode: Scalars['String']['input'];\n}>;\n\n\nexport type FindStoragePathQuery = { __typename?: 'Query', storagePath: Array<{ __typename?: 'LinkedLocation', barcode: string, fixedName?: string | null, customName?: string | null, address?: string | null, numStored: number, leaf: boolean }> };\n\nexport type GetAnalyserScanDataQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type GetAnalyserScanDataQuery = { __typename?: 'Query', analyserScanData: { __typename?: 'AnalyserScanData', workNumbers: Array<string>, probes: Array<string>, cellSegmentationRecorded: boolean } };\n\nexport type GetDnapStudyQueryVariables = Exact<{\n  ssId: Scalars['Int']['input'];\n}>;\n\n\nexport type GetDnapStudyQuery = { __typename?: 'Query', dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null };\n\nexport type GetDestructionReasonsQueryVariables = Exact<{\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GetDestructionReasonsQuery = { __typename?: 'Query', destructionReasons: Array<{ __typename?: 'DestructionReason', id: number, text: string, enabled: boolean }> };\n\nexport type GetConfigurationQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetConfigurationQuery = { __typename?: 'Query', destructionReasons: Array<{ __typename?: 'DestructionReason', id: number, text: string, enabled: boolean }>, comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }>, hmdmcs: Array<{ __typename?: 'Hmdmc', hmdmc: string, enabled: boolean }>, species: Array<{ __typename?: 'Species', name: string, enabled: boolean }>, fixatives: Array<{ __typename?: 'Fixative', name: string, enabled: boolean }>, releaseDestinations: Array<{ __typename?: 'ReleaseDestination', name: string, enabled: boolean }>, releaseRecipients: Array<{ __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean }>, projects: Array<{ __typename?: 'Project', name: string, enabled: boolean }>, costCodes: Array<{ __typename?: 'CostCode', code: string, enabled: boolean }>, workTypes: Array<{ __typename?: 'WorkType', name: string, enabled: boolean }>, equipments: Array<{ __typename?: 'Equipment', id: number, name: string, category: string, enabled: boolean }>, users: Array<{ __typename?: 'User', username: string, role: UserRole }>, solutions: Array<{ __typename?: 'Solution', name: string, enabled: boolean }>, probePanels: Array<{ __typename?: 'ProbePanel', name: string, enabled: boolean }>, programs: Array<{ __typename?: 'Program', name: string, enabled: boolean }>, omeroProjects: Array<{ __typename?: 'OmeroProject', name: string, enabled: boolean }>, dnapStudies: Array<{ __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean }>, bioRisks: Array<{ __typename?: 'BioRisk', code: string, enabled: boolean }>, tissueTypes: Array<{ __typename?: 'TissueType', name: string, code: string, spatialLocations: Array<{ __typename?: 'SpatialLocation', code: number, name: string }> }> };\n\nexport type GetLabwareFlagDetailsQueryVariables = Exact<{\n  barcodes: Array<Scalars['String']['input']> | Scalars['String']['input'];\n}>;\n\n\nexport type GetLabwareFlagDetailsQuery = { __typename?: 'Query', labwareFlagDetails: Array<{ __typename?: 'FlagDetail', barcode: string, flags: Array<{ __typename?: 'FlagSummary', barcode: string, priority: FlagPriority, description: string }> }> };\n\nexport type GetLabwareBioRiskCodesQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type GetLabwareBioRiskCodesQuery = { __typename?: 'Query', labwareBioRiskCodes: Array<{ __typename?: 'SampleBioRisk', sampleId: number, bioRiskCode: string }> };\n\nexport type GetLabwareOperationsQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n  operationType: Scalars['String']['input'];\n}>;\n\n\nexport type GetLabwareOperationsQuery = { __typename?: 'Query', labwareOperations?: Array<{ __typename?: 'Operation', id: number, performed: string, operationType: { __typename?: 'OperationType', name: string }, actions: Array<{ __typename?: 'Action', operationId: number, source: { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }, destination: { __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }, sample: { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } } }>, user: { __typename?: 'User', username: string, role: UserRole } } | null> | null };\n\nexport type GetParaffinProcessingInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetParaffinProcessingInfoQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }> };\n\nexport type GetLabwareInLocationQueryVariables = Exact<{\n  locationBarcode: Scalars['String']['input'];\n}>;\n\n\nexport type GetLabwareInLocationQuery = { __typename?: 'Query', labwareInLocation: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }> };\n\nexport type GetNextReplicateNumberQueryVariables = Exact<{\n  barcodes: Array<Scalars['String']['input']> | Scalars['String']['input'];\n}>;\n\n\nexport type GetNextReplicateNumberQuery = { __typename?: 'Query', nextReplicateNumbers: Array<{ __typename?: 'NextReplicateData', barcodes: Array<string>, donorId: number, nextReplicateNumber: number, spatialLocationId: number }> };\n\nexport type GetEquipmentsQueryVariables = Exact<{\n  category?: InputMaybe<Scalars['String']['input']>;\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GetEquipmentsQuery = { __typename?: 'Query', equipments: Array<{ __typename?: 'Equipment', id: number, name: string, category: string, enabled: boolean }> };\n\nexport type GetPotProcessingInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPotProcessingInfoQuery = { __typename?: 'Query', fixatives: Array<{ __typename?: 'Fixative', name: string }>, comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }>, labwareTypes: Array<{ __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }> };\n\nexport type GetPrintersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetPrintersQuery = { __typename?: 'Query', printers: Array<{ __typename?: 'Printer', name: string, labelTypes: Array<{ __typename?: 'LabelType', name: string }> }> };\n\nexport type GetProgramsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProgramsQuery = { __typename?: 'Query', programs: Array<{ __typename?: 'Program', name: string, enabled: boolean }> };\n\nexport type GetEventTypesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetEventTypesQuery = { __typename?: 'Query', eventTypes: Array<string> };\n\nexport type GetLabwareCostingQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type GetLabwareCostingQuery = { __typename?: 'Query', labwareCosting?: SlideCosting | null };\n\nexport type GetRecordInPlaceInfoQueryVariables = Exact<{\n  category?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type GetRecordInPlaceInfoQuery = { __typename?: 'Query', equipments: Array<{ __typename?: 'Equipment', id: number, name: string, category: string, enabled: boolean }> };\n\nexport type GetProbePanelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProbePanelsQuery = { __typename?: 'Query', probePanels: Array<{ __typename?: 'ProbePanel', name: string, enabled: boolean }> };\n\nexport type GetOmeroProjectsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetOmeroProjectsQuery = { __typename?: 'Query', omeroProjects: Array<{ __typename?: 'OmeroProject', name: string, enabled: boolean }> };\n\nexport type GetReleaseColumnOptionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetReleaseColumnOptionsQuery = { __typename?: 'Query', releaseColumnOptions: Array<{ __typename?: 'ReleaseFileOption', displayName: string, queryParamName: string }> };\n\nexport type GetRegistrationInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetRegistrationInfoQuery = { __typename?: 'Query', species: Array<{ __typename?: 'Species', name: string }>, hmdmcs: Array<{ __typename?: 'Hmdmc', hmdmc: string }>, labwareTypes: Array<{ __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }>, tissueTypes: Array<{ __typename?: 'TissueType', name: string, spatialLocations: Array<{ __typename?: 'SpatialLocation', name: string, code: number }> }>, fixatives: Array<{ __typename?: 'Fixative', name: string }>, mediums: Array<{ __typename?: 'Medium', name: string }>, solutions: Array<{ __typename?: 'Solution', name: string }>, slotRegions: Array<{ __typename?: 'SlotRegion', name: string }>, bioRisks: Array<{ __typename?: 'BioRisk', code: string }> };\n\nexport type GetRecordExtractResultInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetRecordExtractResultInfoQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }> };\n\nexport type GetReleaseInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetReleaseInfoQuery = { __typename?: 'Query', releaseDestinations: Array<{ __typename?: 'ReleaseDestination', name: string, enabled: boolean }>, releaseRecipients: Array<{ __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean }>, releaseColumnOptions: Array<{ __typename?: 'ReleaseFileOption', displayName: string, queryParamName: string }> };\n\nexport type GetSampleProcessingCommentsInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSampleProcessingCommentsInfoQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }> };\n\nexport type GetRegionsOfInterestQueryVariables = Exact<{\n  barcodes: Array<Scalars['String']['input']> | Scalars['String']['input'];\n}>;\n\n\nexport type GetRegionsOfInterestQuery = { __typename?: 'Query', rois: Array<{ __typename?: 'LabwareRoi', barcode: string, rois: Array<{ __typename?: 'Roi', address: string, roi: string, sample: { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } } }> }> };\n\nexport type GetRunNamesQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n}>;\n\n\nexport type GetRunNamesQuery = { __typename?: 'Query', runNames: Array<string> };\n\nexport type GetRunRoisQueryVariables = Exact<{\n  barcode: Scalars['String']['input'];\n  run: Scalars['String']['input'];\n}>;\n\n\nexport type GetRunRoisQuery = { __typename?: 'Query', runRois: Array<{ __typename?: 'Roi', address: string, roi: string, sample: { __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } } }> };\n\nexport type GetSectioningInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSectioningInfoQuery = { __typename?: 'Query', labwareTypes: Array<{ __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }> };\n\nexport type GetSlotRegionsQueryVariables = Exact<{\n  includeDisabled?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GetSlotRegionsQuery = { __typename?: 'Query', slotRegions: Array<{ __typename?: 'SlotRegion', name: string, enabled: boolean }> };\n\nexport type GetStainInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetStainInfoQuery = { __typename?: 'Query', stainTypes: Array<{ __typename?: 'StainType', name: string, measurementTypes: Array<string> }> };\n\nexport type GetStainingQcInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetStainingQcInfoQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }> };\n\nexport type GetSectioningConfirmInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSectioningConfirmInfoQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }>, slotRegions: Array<{ __typename?: 'SlotRegion', enabled: boolean, name: string }> };\n\nexport type GetSuggestedLabwareForWorkQueryVariables = Exact<{\n  workNumber: Scalars['String']['input'];\n  forRelease?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GetSuggestedLabwareForWorkQuery = { __typename?: 'Query', suggestedLabwareForWork: Array<{ __typename?: 'Labware', id: number, barcode: string, externalBarcode?: string | null, destroyed: boolean, discarded: boolean, released: boolean, state: LabwareState, created: string, labwareType: { __typename?: 'LabwareType', name: string, numRows: number, numColumns: number, labelType?: { __typename?: 'LabelType', name: string } | null }, slots: Array<{ __typename?: 'Slot', id: number, address: string, labwareId: number, blockHighestSection?: number | null, block: boolean, samples: Array<{ __typename?: 'Sample', id: number, section?: number | null, tissue: { __typename?: 'Tissue', externalName?: string | null, replicate?: string | null, collectionDate?: string | null, donor: { __typename?: 'Donor', donorName: string, lifeStage?: LifeStage | null }, spatialLocation: { __typename?: 'SpatialLocation', code: number, name: string, tissueType: { __typename?: 'TissueType', name: string } }, hmdmc?: { __typename?: 'Hmdmc', hmdmc: string } | null, medium: { __typename?: 'Medium', name: string }, fixative: { __typename?: 'Fixative', name: string, enabled: boolean } }, bioState: { __typename?: 'BioState', name: string } }> }> }> };\n\nexport type GetStainReagentTypesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetStainReagentTypesQuery = { __typename?: 'Query', stainReagentTypes: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }> };\n\nexport type GetSuggestedWorkForLabwareQueryVariables = Exact<{\n  barcodes: Array<Scalars['String']['input']> | Scalars['String']['input'];\n  includeInactive?: InputMaybe<Scalars['Boolean']['input']>;\n}>;\n\n\nexport type GetSuggestedWorkForLabwareQuery = { __typename?: 'Query', suggestedWorkForLabware: { __typename?: 'SuggestedWorkResponse', suggestedWorks: Array<{ __typename?: 'SuggestedWork', barcode: string, workNumber?: string | null }> } };\n\nexport type GetVisiumQcInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetVisiumQcInfoQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }> };\n\nexport type GetSearchInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSearchInfoQuery = { __typename?: 'Query', tissueTypes: Array<{ __typename?: 'TissueType', name: string }>, labwareTypes: Array<{ __typename?: 'LabwareType', name: string }>, species: Array<{ __typename?: 'Species', name: string }> };\n\nexport type GetWorkProgressInputsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetWorkProgressInputsQuery = { __typename?: 'Query', workTypes: Array<{ __typename?: 'WorkType', name: string }>, programs: Array<{ __typename?: 'Program', name: string }>, releaseRecipients: Array<{ __typename?: 'ReleaseRecipient', username: string }> };\n\nexport type GetWorkNumbersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetWorkNumbersQuery = { __typename?: 'Query', works: Array<{ __typename?: 'Work', workNumber: string }> };\n\nexport type GetWorkTypesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetWorkTypesQuery = { __typename?: 'Query', workTypes: Array<{ __typename?: 'WorkType', name: string }> };\n\nexport type GetWorkSummaryQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetWorkSummaryQuery = { __typename?: 'Query', worksSummary: { __typename?: 'WorkSummaryData', workSummaryGroups: Array<{ __typename?: 'WorkSummaryGroup', numWorks: number, status: WorkStatus, totalNumBlocks: number, totalNumSlides: number, totalNumOriginalSamples: number, workType: { __typename?: 'WorkType', name: string, enabled: boolean } }>, workTypes: Array<{ __typename?: 'WorkType', name: string }> } };\n\nexport type GetSolutionTransferInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSolutionTransferInfoQuery = { __typename?: 'Query', solutions: Array<{ __typename?: 'Solution', name: string }> };\n\nexport type ReloadSlotCopyQueryVariables = Exact<{\n  operationType: Scalars['String']['input'];\n  workNumber: Scalars['String']['input'];\n  lpNumber: Scalars['String']['input'];\n}>;\n\n\nexport type ReloadSlotCopyQuery = { __typename?: 'Query', reloadSlotCopy?: { __typename?: 'SlotCopyLoad', operationType: string, workNumber: string, lpNumber: string, executionType?: ExecutionType | null, labwareType?: string | null, barcode?: string | null, bioState?: string | null, costing?: SlideCosting | null, lotNumber?: string | null, probeLotNumber?: string | null, preBarcode?: string | null, sources: Array<{ __typename?: 'SlotCopyLoadSource', barcode: string, labwareState: LabwareState }>, contents: Array<{ __typename?: 'SlotCopyLoadContent', sourceBarcode: string, sourceAddress: string, destinationAddress: string }> } | null };\n\nexport type GetXeniumQcInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetXeniumQcInfoQuery = { __typename?: 'Query', comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }> };\n\nexport type GetWorkAllocationInfoQueryVariables = Exact<{\n  commentCategory: Scalars['String']['input'];\n  workStatuses?: InputMaybe<Array<WorkStatus> | WorkStatus>;\n}>;\n\n\nexport type GetWorkAllocationInfoQuery = { __typename?: 'Query', projects: Array<{ __typename?: 'Project', name: string, enabled: boolean }>, programs: Array<{ __typename?: 'Program', name: string, enabled: boolean }>, costCodes: Array<{ __typename?: 'CostCode', code: string, enabled: boolean }>, worksWithComments: Array<{ __typename?: 'WorkWithComment', comment?: string | null, work: { __typename?: 'Work', workNumber: string, status: WorkStatus, numBlocks?: number | null, numSlides?: number | null, numOriginalSamples?: number | null, priority?: string | null, workRequester?: { __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean } | null, project: { __typename?: 'Project', name: string, enabled: boolean }, program: { __typename?: 'Program', name: string, enabled: boolean }, costCode: { __typename?: 'CostCode', code: string, enabled: boolean }, workType: { __typename?: 'WorkType', name: string, enabled: boolean }, omeroProject?: { __typename?: 'OmeroProject', name: string, enabled: boolean } | null, dnapStudy?: { __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean } | null } }>, workTypes: Array<{ __typename?: 'WorkType', name: string, enabled: boolean }>, comments: Array<{ __typename?: 'Comment', id: number, text: string, category: string, enabled: boolean }>, releaseRecipients: Array<{ __typename?: 'ReleaseRecipient', username: string, fullName?: string | null, enabled: boolean }>, omeroProjects: Array<{ __typename?: 'OmeroProject', name: string, enabled: boolean }>, dnapStudies: Array<{ __typename?: 'DnapStudy', ssId: number, name: string, enabled: boolean }> };\n\nexport const BioRiskFieldsFragmentDoc = gql`\n    fragment BioRiskFields on BioRisk {\n  code\n  enabled\n}\n    `;\nexport const AddressPermDataFieldsFragmentDoc = gql`\n    fragment AddressPermDataFields on AddressPermData {\n  address\n  controlType\n  seconds\n  selected\n}\n    `;\nexport const DestructionReasonFieldsFragmentDoc = gql`\n    fragment DestructionReasonFields on DestructionReason {\n  id\n  text\n  enabled\n}\n    `;\nexport const AnalyserScanDataFieldsFragmentDoc = gql`\n    fragment AnalyserScanDataFields on AnalyserScanData {\n  workNumbers\n  probes\n  cellSegmentationRecorded\n}\n    `;\nexport const EquipmentFieldsFragmentDoc = gql`\n    fragment EquipmentFields on Equipment {\n  id\n  name\n  category\n  enabled\n}\n    `;\nexport const CommentFieldsFragmentDoc = gql`\n    fragment CommentFields on Comment {\n  id\n  text\n  category\n  enabled\n}\n    `;\nexport const HmdmcFieldsFragmentDoc = gql`\n    fragment HmdmcFields on Hmdmc {\n  hmdmc\n  enabled\n}\n    `;\nexport const LabwareTypeFieldsFragmentDoc = gql`\n    fragment LabwareTypeFields on LabwareType {\n  name\n  numRows\n  numColumns\n  labelType {\n    name\n  }\n}\n    `;\nexport const SampleFieldsFragmentDoc = gql`\n    fragment SampleFields on Sample {\n  id\n  section\n  tissue {\n    donor {\n      donorName\n      lifeStage\n    }\n    externalName\n    spatialLocation {\n      tissueType {\n        name\n      }\n      code\n      name\n    }\n    hmdmc {\n      hmdmc\n    }\n    replicate\n    medium {\n      name\n    }\n    fixative {\n      name\n      enabled\n    }\n    collectionDate\n  }\n  bioState {\n    name\n  }\n}\n    `;\nexport const SlotFieldsFragmentDoc = gql`\n    fragment SlotFields on Slot {\n  id\n  address\n  labwareId\n  samples {\n    ...SampleFields\n  }\n  blockHighestSection\n  block\n}\n    `;\nexport const LabwareFieldsFragmentDoc = gql`\n    fragment LabwareFields on Labware {\n  id\n  barcode\n  externalBarcode\n  destroyed\n  discarded\n  released\n  state\n  created\n  labwareType {\n    ...LabwareTypeFields\n  }\n  slots {\n    ...SlotFields\n  }\n}\n    `;\nexport const HistoryEntryFieldsFragmentDoc = gql`\n    fragment HistoryEntryFields on HistoryEntry {\n  destinationLabwareId\n  details\n  eventId\n  sampleId\n  sourceLabwareId\n  time\n  username\n  type\n  workNumber\n  address\n  region\n}\n    `;\nexport const FlagBarcodesFieldsFragmentDoc = gql`\n    fragment FlagBarcodesFields on FlagBarcodes {\n  barcodes\n  priority\n}\n    `;\nexport const HistoryFieldsFragmentDoc = gql`\n    fragment HistoryFields on History {\n  labware {\n    ...LabwareFields\n  }\n  samples {\n    ...SampleFields\n  }\n  entries {\n    ...HistoryEntryFields\n  }\n  flagBarcodes {\n    ...FlagBarcodesFields\n  }\n}\n    `;\nexport const GraphSvgFieldsFragmentDoc = gql`\n    fragment GraphSVGFields on GraphSVG {\n  svg\n}\n    `;\nexport const FileFieldsFragmentDoc = gql`\n    fragment FileFields on StanFile {\n  created\n  name\n  url\n  work {\n    workNumber\n  }\n}\n    `;\nexport const LabwareFlaggedFieldsFragmentDoc = gql`\n    fragment LabwareFlaggedFields on LabwareFlagged {\n  id\n  barcode\n  externalBarcode\n  destroyed\n  discarded\n  released\n  flagged\n  flagPriority\n  state\n  created\n  labwareType {\n    ...LabwareTypeFields\n  }\n  slots {\n    ...SlotFields\n  }\n}\n    `;\nexport const FixativeFieldsFragmentDoc = gql`\n    fragment FixativeFields on Fixative {\n  name\n  enabled\n}\n    `;\nexport const LinkedLocationFieldsFragmentDoc = gql`\n    fragment LinkedLocationFields on LinkedLocation {\n  barcode\n  fixedName\n  customName\n  address\n  numStored\n  leaf\n}\n    `;\nexport const LocationFieldsFragmentDoc = gql`\n    fragment LocationFields on Location {\n  barcode\n  fixedName\n  customName\n  address\n  direction\n  numStored\n  leaf\n  parent {\n    barcode\n    fixedName\n    customName\n  }\n  size {\n    numRows\n    numColumns\n  }\n  stored {\n    barcode\n    address\n  }\n  children {\n    ...LinkedLocationFields\n  }\n}\n    `;\nexport const NextReplicateDataFieldsFragmentDoc = gql`\n    fragment NextReplicateDataFields on NextReplicateData {\n  barcodes\n  donorId\n  nextReplicateNumber\n  spatialLocationId\n}\n    `;\nexport const RoiFieldsFragmentDoc = gql`\n    fragment RoiFields on Roi {\n  sample {\n    ...SampleFields\n  }\n  address\n  roi\n}\n    `;\nexport const LabwareRoiFieldsFragmentDoc = gql`\n    fragment LabwareRoiFields on LabwareRoi {\n  barcode\n  rois {\n    ...RoiFields\n  }\n}\n    `;\nexport const ActionFieldsFragmentDoc = gql`\n    fragment ActionFields on Action {\n  source {\n    ...SlotFields\n  }\n  destination {\n    ...SlotFields\n  }\n  operationId\n  sample {\n    ...SampleFields\n  }\n}\n    `;\nexport const UserFieldsFragmentDoc = gql`\n    fragment UserFields on User {\n  username\n  role\n}\n    `;\nexport const OperationFieldsFragmentDoc = gql`\n    fragment OperationFields on Operation {\n  id\n  operationType {\n    name\n  }\n  actions {\n    ...ActionFields\n  }\n  user {\n    ...UserFields\n  }\n  performed\n}\n    `;\nexport const PlanActionFieldsFragmentDoc = gql`\n    fragment PlanActionFields on PlanAction {\n  newSection\n  sample {\n    id\n  }\n  source {\n    address\n    labwareId\n    samples {\n      id\n    }\n  }\n  destination {\n    address\n    labwareId\n  }\n}\n    `;\nexport const PrinterFieldsFragmentDoc = gql`\n    fragment PrinterFields on Printer {\n  name\n  labelTypes {\n    name\n  }\n}\n    `;\nexport const ReagentSlotFieldsFragmentDoc = gql`\n    fragment ReagentSlotFields on ReagentSlot {\n  address\n  used\n}\n    `;\nexport const ReagentPlateFieldsFragmentDoc = gql`\n    fragment ReagentPlateFields on ReagentPlate {\n  barcode\n  slots {\n    ...ReagentSlotFields\n  }\n  plateType\n}\n    `;\nexport const ProbePanelFieldsFragmentDoc = gql`\n    fragment ProbePanelFields on ProbePanel {\n  name\n  enabled\n}\n    `;\nexport const ReleaseFileOptionFieldsFragmentDoc = gql`\n    fragment ReleaseFileOptionFields on ReleaseFileOption {\n  displayName\n  queryParamName\n}\n    `;\nexport const RegisterResultFieldsFragmentDoc = gql`\n    fragment RegisterResultFields on RegisterResult {\n  labware {\n    ...LabwareFields\n  }\n  clashes {\n    tissue {\n      externalName\n      donor {\n        donorName\n      }\n      spatialLocation {\n        code\n        name\n        tissueType {\n          name\n        }\n      }\n    }\n    labware {\n      barcode\n      labwareType {\n        name\n      }\n    }\n  }\n  labwareSolutions {\n    barcode\n    solutionName\n  }\n}\n    `;\nexport const ReleaseDestinationFieldsFragmentDoc = gql`\n    fragment ReleaseDestinationFields on ReleaseDestination {\n  name\n  enabled\n}\n    `;\nexport const SlotPassFailFieldsFragmentDoc = gql`\n    fragment SlotPassFailFields on SlotPassFail {\n  address\n  result\n  comment\n}\n    `;\nexport const SamplePositionFieldsFragmentDoc = gql`\n    fragment SamplePositionFields on SamplePosition {\n  address\n  region\n  sampleId\n  slotId\n  operationId\n}\n    `;\nexport const SpeciesFieldsFragmentDoc = gql`\n    fragment SpeciesFields on Species {\n  name\n  enabled\n}\n    `;\nexport const SolutionFieldsFragmentDoc = gql`\n    fragment SolutionFields on Solution {\n  name\n  enabled\n}\n    `;\nexport const StainTypeFieldsFragmentDoc = gql`\n    fragment StainTypeFields on StainType {\n  name\n  measurementTypes\n}\n    `;\nexport const SampleBioRiskFieldsFragmentDoc = gql`\n    fragment SampleBioRiskFields on SampleBioRisk {\n  sampleId\n  bioRiskCode\n}\n    `;\nexport const SuggestedWorkFieldsFragmentDoc = gql`\n    fragment SuggestedWorkFields on SuggestedWork {\n  barcode\n  workNumber\n}\n    `;\nexport const SlotRegionFieldsFragmentDoc = gql`\n    fragment SlotRegionFields on SlotRegion {\n  enabled\n  name\n}\n    `;\nexport const ReleaseRecipientFieldsFragmentDoc = gql`\n    fragment ReleaseRecipientFields on ReleaseRecipient {\n  username\n  fullName\n  enabled\n}\n    `;\nexport const ProjectFieldsFragmentDoc = gql`\n    fragment ProjectFields on Project {\n  name\n  enabled\n}\n    `;\nexport const ProgramFieldsFragmentDoc = gql`\n    fragment ProgramFields on Program {\n  name\n  enabled\n}\n    `;\nexport const CostCodeFieldsFragmentDoc = gql`\n    fragment CostCodeFields on CostCode {\n  code\n  enabled\n}\n    `;\nexport const WorkTypeFieldsFragmentDoc = gql`\n    fragment WorkTypeFields on WorkType {\n  name\n  enabled\n}\n    `;\nexport const OmeroProjectFieldsFragmentDoc = gql`\n    fragment OmeroProjectFields on OmeroProject {\n  name\n  enabled\n}\n    `;\nexport const DnapStudyFieldsFragmentDoc = gql`\n    fragment DnapStudyFields on DnapStudy {\n  ssId\n  name\n  enabled\n}\n    `;\nexport const WorkFieldsFragmentDoc = gql`\n    fragment WorkFields on Work {\n  workNumber\n  status\n  workRequester {\n    ...ReleaseRecipientFields\n  }\n  project {\n    ...ProjectFields\n  }\n  program {\n    ...ProgramFields\n  }\n  costCode {\n    ...CostCodeFields\n  }\n  workType {\n    ...WorkTypeFields\n  }\n  omeroProject {\n    ...OmeroProjectFields\n  }\n  dnapStudy {\n    ...DnapStudyFields\n  }\n  numBlocks\n  numSlides\n  numOriginalSamples\n  priority\n}\n    `;\nexport const WorkProgressTimeStampFieldFragmentDoc = gql`\n    fragment WorkProgressTimeStampField on WorkProgressTimestamp {\n  type\n  timestamp\n}\n    `;\nexport const WorkProgressFieldsFragmentDoc = gql`\n    fragment WorkProgressFields on WorkProgress {\n  work {\n    ...WorkFields\n  }\n  timestamps {\n    ...WorkProgressTimeStampField\n  }\n  mostRecentOperation\n  workComment\n}\n    `;\nexport const WorkSummaryGroupFieldsFragmentDoc = gql`\n    fragment WorkSummaryGroupFields on WorkSummaryGroup {\n  workType {\n    ...WorkTypeFields\n  }\n  numWorks\n  status\n  totalNumBlocks\n  totalNumSlides\n  totalNumOriginalSamples\n}\n    `;\nexport const TissueTypeFieldsFragmentDoc = gql`\n    fragment TissueTypeFields on TissueType {\n  name\n  code\n  spatialLocations {\n    code\n    name\n  }\n}\n    `;\nexport const WorkWithCommentFieldsFragmentDoc = gql`\n    fragment WorkWithCommentFields on WorkWithComment {\n  work {\n    ...WorkFields\n  }\n  comment\n}\n    `;\nexport const SlotCopyLoadFieldsFragmentDoc = gql`\n    fragment SlotCopyLoadFields on SlotCopyLoad {\n  sources {\n    barcode\n    labwareState\n  }\n  operationType\n  workNumber\n  lpNumber\n  executionType\n  labwareType\n  barcode\n  bioState\n  costing\n  lotNumber\n  probeLotNumber\n  preBarcode\n  contents {\n    sourceBarcode\n    sourceAddress\n    destinationAddress\n  }\n}\n    `;\nexport const AddCostCodeDocument = gql`\n    mutation AddCostCode($code: String!) {\n  addCostCode(code: $code) {\n    ...CostCodeFields\n  }\n}\n    ${CostCodeFieldsFragmentDoc}`;\nexport const AddCommentDocument = gql`\n    mutation AddComment($category: String!, $text: String!) {\n  addComment(category: $category, text: $text) {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const AddEquipmentDocument = gql`\n    mutation AddEquipment($category: String!, $name: String!) {\n  addEquipment(category: $category, name: $name) {\n    ...EquipmentFields\n  }\n}\n    ${EquipmentFieldsFragmentDoc}`;\nexport const AddFixativeDocument = gql`\n    mutation AddFixative($name: String!) {\n  addFixative(name: $name) {\n    ...FixativeFields\n  }\n}\n    ${FixativeFieldsFragmentDoc}`;\nexport const AddHmdmcDocument = gql`\n    mutation AddHmdmc($hmdmc: String!) {\n  addHmdmc(hmdmc: $hmdmc) {\n    ...HmdmcFields\n  }\n}\n    ${HmdmcFieldsFragmentDoc}`;\nexport const AddExternalIdDocument = gql`\n    mutation AddExternalID($request: AddExternalIDRequest!) {\n  addExternalID(request: $request) {\n    operations {\n      operationType {\n        name\n      }\n      user {\n        username\n      }\n      performed\n    }\n  }\n}\n    `;\nexport const AddDestructionReasonDocument = gql`\n    mutation AddDestructionReason($text: String!) {\n  addDestructionReason(text: $text) {\n    ...DestructionReasonFields\n  }\n}\n    ${DestructionReasonFieldsFragmentDoc}`;\nexport const AddOmeroProjectDocument = gql`\n    mutation AddOmeroProject($name: String!) {\n  addOmeroProject(name: $name) {\n    ...OmeroProjectFields\n  }\n}\n    ${OmeroProjectFieldsFragmentDoc}`;\nexport const AddProgramDocument = gql`\n    mutation AddProgram($name: String!) {\n  addProgram(name: $name) {\n    ...ProgramFields\n  }\n}\n    ${ProgramFieldsFragmentDoc}`;\nexport const AddBioRiskDocument = gql`\n    mutation AddBioRisk($code: String!) {\n  addBioRisk(code: $code) {\n    ...BioRiskFields\n  }\n}\n    ${BioRiskFieldsFragmentDoc}`;\nexport const AddProjectDocument = gql`\n    mutation AddProject($name: String!) {\n  addProject(name: $name) {\n    ...ProjectFields\n  }\n}\n    ${ProjectFieldsFragmentDoc}`;\nexport const AddProbePanelDocument = gql`\n    mutation AddProbePanel($name: String!) {\n  addProbePanel(name: $name) {\n    ...ProbePanelFields\n  }\n}\n    ${ProbePanelFieldsFragmentDoc}`;\nexport const AddSlotRegionDocument = gql`\n    mutation AddSlotRegion($name: String!) {\n  addSlotRegion(name: $name) {\n    ...SlotRegionFields\n  }\n}\n    ${SlotRegionFieldsFragmentDoc}`;\nexport const AddSolutionDocument = gql`\n    mutation AddSolution($name: String!) {\n  addSolution(name: $name) {\n    ...SolutionFields\n  }\n}\n    ${SolutionFieldsFragmentDoc}`;\nexport const AddUserDocument = gql`\n    mutation AddUser($username: String!) {\n  addUser(username: $username) {\n    ...UserFields\n  }\n}\n    ${UserFieldsFragmentDoc}`;\nexport const AddReleaseDestinationDocument = gql`\n    mutation AddReleaseDestination($name: String!) {\n  addReleaseDestination(name: $name) {\n    ...ReleaseDestinationFields\n  }\n}\n    ${ReleaseDestinationFieldsFragmentDoc}`;\nexport const AddWorkTypeDocument = gql`\n    mutation AddWorkType($name: String!) {\n  addWorkType(name: $name) {\n    ...WorkTypeFields\n  }\n}\n    ${WorkTypeFieldsFragmentDoc}`;\nexport const ConfirmDocument = gql`\n    mutation Confirm($request: ConfirmOperationRequest!) {\n  confirmOperation(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      user {\n        username\n      }\n      performed\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const AddTissueTypeDocument = gql`\n    mutation AddTissueType($request: AddTissueTypeRequest!) {\n  addTissueType(request: $request) {\n    name\n    code\n    spatialLocations {\n      code\n      name\n    }\n  }\n}\n    `;\nexport const AddSpatialLocationsDocument = gql`\n    mutation AddSpatialLocations($request: AddSpatialLocationsRequest!) {\n  addSpatialLocations(request: $request) {\n    name\n    spatialLocations {\n      code\n      name\n    }\n  }\n}\n    `;\nexport const AddSpeciesDocument = gql`\n    mutation AddSpecies($name: String!) {\n  addSpecies(name: $name) {\n    ...SpeciesFields\n  }\n}\n    ${SpeciesFieldsFragmentDoc}`;\nexport const AliquotDocument = gql`\n    mutation Aliquot($request: AliquotRequest!) {\n  aliquot(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      actions {\n        sample {\n          id\n        }\n        source {\n          address\n          labwareId\n          samples {\n            id\n          }\n        }\n        destination {\n          address\n          labwareId\n        }\n      }\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const AddReleaseRecipientDocument = gql`\n    mutation AddReleaseRecipient($username: String!, $fullName: String) {\n  addReleaseRecipient(username: $username, fullName: $fullName) {\n    ...ReleaseRecipientFields\n  }\n}\n    ${ReleaseRecipientFieldsFragmentDoc}`;\nexport const EmptyLocationDocument = gql`\n    mutation EmptyLocation($barcode: String!) {\n  empty(locationBarcode: $barcode) {\n    numUnstored\n  }\n}\n    `;\nexport const DestroyDocument = gql`\n    mutation Destroy($request: DestroyRequest!) {\n  destroy(request: $request) {\n    destructions {\n      labware {\n        barcode\n      }\n    }\n  }\n}\n    `;\nexport const ConfirmSectionDocument = gql`\n    mutation ConfirmSection($request: ConfirmSectionRequest!) {\n  confirmSection(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      user {\n        username\n      }\n      performed\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport const PerformSolutionTransferDocument = gql`\n    mutation PerformSolutionTransfer($request: SolutionTransferRequest!) {\n  performSolutionTransfer(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      user {\n        username\n      }\n      performed\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const ExtractDocument = gql`\n    mutation Extract($request: ExtractRequest!) {\n  extract(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      actions {\n        sample {\n          id\n        }\n        source {\n          address\n          labwareId\n          samples {\n            id\n          }\n        }\n        destination {\n          address\n          labwareId\n        }\n      }\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const PlanDocument = gql`\n    mutation Plan($request: PlanRequest!) {\n  plan(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      planActions {\n        ...PlanActionFields\n      }\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${PlanActionFieldsFragmentDoc}`;\nexport const PerformTissueBlockDocument = gql`\n    mutation PerformTissueBlock($request: TissueBlockRequest!) {\n  performTissueBlock(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      user {\n        username\n      }\n      performed\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const LoginDocument = gql`\n    mutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    user {\n      ...UserFields\n    }\n  }\n}\n    ${UserFieldsFragmentDoc}`;\nexport const PerformTissuePotDocument = gql`\n    mutation PerformTissuePot($request: PotProcessingRequest!) {\n  performPotProcessing(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      user {\n        username\n      }\n      performed\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const CreateWorkDocument = gql`\n    mutation CreateWork($prefix: String!, $workType: String!, $workRequester: String!, $project: String!, $program: String!, $costCode: String!, $numBlocks: Int, $numSlides: Int, $numOriginalSamples: Int, $omeroProject: String, $ssStudyId: Int) {\n  createWork(\n    prefix: $prefix\n    workType: $workType\n    workRequester: $workRequester\n    project: $project\n    program: $program\n    costCode: $costCode\n    numBlocks: $numBlocks\n    numSlides: $numSlides\n    numOriginalSamples: $numOriginalSamples\n    omeroProject: $omeroProject\n    ssStudyId: $ssStudyId\n  ) {\n    ...WorkFields\n  }\n}\n    ${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const PrintDocument = gql`\n    mutation Print($barcodes: [String!]!, $printer: String!) {\n  printLabware(barcodes: $barcodes, printer: $printer)\n}\n    `;\nexport const FlagLabwareDocument = gql`\n    mutation FlagLabware($request: FlagLabwareRequest!) {\n  flagLabware(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordComplexStainDocument = gql`\n    mutation RecordComplexStain($request: ComplexStainRequest!) {\n  recordComplexStain(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordCompletionDocument = gql`\n    mutation RecordCompletion($request: CompletionRequest!) {\n  recordCompletion(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const PerformParaffinProcessingDocument = gql`\n    mutation PerformParaffinProcessing($request: ParaffinProcessingRequest!) {\n  performParaffinProcessing(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      user {\n        username\n      }\n      performed\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const RecordAnalyserDocument = gql`\n    mutation RecordAnalyser($request: AnalyserRequest!) {\n  recordAnalyser(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordExtractResultDocument = gql`\n    mutation RecordExtractResult($request: ExtractResultRequest!) {\n  recordExtractResult(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordMetricsDocument = gql`\n    mutation RecordMetrics($request: SampleMetricsRequest!) {\n  recordSampleMetrics(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordOpWithSlotMeasurementsDocument = gql`\n    mutation RecordOpWithSlotMeasurements($request: OpWithSlotMeasurementsRequest!) {\n  recordOpWithSlotMeasurements(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordOpWithSlotCommentsDocument = gql`\n    mutation RecordOpWithSlotComments($request: OpWithSlotCommentsRequest!) {\n  recordOpWithSlotComments(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordInPlaceDocument = gql`\n    mutation RecordInPlace($request: InPlaceOpRequest!) {\n  recordInPlace(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const RecordPermDocument = gql`\n    mutation RecordPerm($request: RecordPermRequest!) {\n  recordPerm(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordReagentTransferDocument = gql`\n    mutation RecordReagentTransfer($request: ReagentTransferRequest!) {\n  reagentTransfer(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordLibraryPrepDocument = gql`\n    mutation RecordLibraryPrep($request: LibraryPrepRequest!) {\n  libraryPrep(request: $request) {\n    operations {\n      id\n    }\n    labware {\n      ...LabwareFields\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const ReactivateLabwareDocument = gql`\n    mutation ReactivateLabware($items: [ReactivateLabware!]!) {\n  reactivateLabware(items: $items) {\n    labware {\n      barcode\n      state\n    }\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordRnaAnalysisDocument = gql`\n    mutation RecordRNAAnalysis($request: RNAAnalysisRequest!) {\n  recordRNAAnalysis(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordSampleProcessingCommentsDocument = gql`\n    mutation RecordSampleProcessingComments($request: SampleProcessingCommentRequest!) {\n  recordSampleProcessingComments(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n    operations {\n      operationType {\n        name\n      }\n      user {\n        username\n      }\n      performed\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const RecordProbeOperationDocument = gql`\n    mutation RecordProbeOperation($request: ProbeOperationRequest!) {\n  recordProbeOperation(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RecordQcLabwareDocument = gql`\n    mutation RecordQCLabware($request: QCLabwareRequest!) {\n  recordQCLabware(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const RegisterOriginalSamplesDocument = gql`\n    mutation RegisterOriginalSamples($request: OriginalSampleRegisterRequest!) {\n  registerOriginalSamples(request: $request) {\n    ...RegisterResultFields\n  }\n}\n    ${RegisterResultFieldsFragmentDoc}\n${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const RecordVisiumQcDocument = gql`\n    mutation RecordVisiumQC($request: ResultRequest!) {\n  recordVisiumQC(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const ReleaseLabwareDocument = gql`\n    mutation ReleaseLabware($releaseRequest: ReleaseRequest!) {\n  release(request: $releaseRequest) {\n    releases {\n      id\n      labware {\n        barcode\n      }\n      destination {\n        name\n      }\n      recipient {\n        username\n      }\n    }\n  }\n}\n    `;\nexport const RegisterSectionsDocument = gql`\n    mutation RegisterSections($request: SectionRegisterRequest!) {\n  registerSections(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const RegisterAsEndUserDocument = gql`\n    mutation RegisterAsEndUser($username: String!, $password: String!) {\n  registerAsEndUser(username: $username, password: $password) {\n    user {\n      ...UserFields\n    }\n  }\n}\n    ${UserFieldsFragmentDoc}`;\nexport const RegisterTissuesDocument = gql`\n    mutation RegisterTissues($request: RegisterRequest!) {\n  register(request: $request) {\n    ...RegisterResultFields\n  }\n}\n    ${RegisterResultFieldsFragmentDoc}\n${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const SegmentationDocument = gql`\n    mutation Segmentation($request: SegmentationRequest!) {\n  segmentation(request: $request) {\n    operations {\n      id\n    }\n    labware {\n      ...LabwareFields\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const RecordOrientationQcDocument = gql`\n    mutation RecordOrientationQC($request: OrientationRequest!) {\n  recordOrientationQC(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const SetEquipmentEnabledDocument = gql`\n    mutation SetEquipmentEnabled($equipmentId: Int!, $enabled: Boolean!) {\n  setEquipmentEnabled(equipmentId: $equipmentId, enabled: $enabled) {\n    ...EquipmentFields\n  }\n}\n    ${EquipmentFieldsFragmentDoc}`;\nexport const SetDestructionReasonEnabledDocument = gql`\n    mutation SetDestructionReasonEnabled($text: String!, $enabled: Boolean!) {\n  setDestructionReasonEnabled(text: $text, enabled: $enabled) {\n    ...DestructionReasonFields\n  }\n}\n    ${DestructionReasonFieldsFragmentDoc}`;\nexport const SetCommentEnabledDocument = gql`\n    mutation SetCommentEnabled($commentId: Int!, $enabled: Boolean!) {\n  setCommentEnabled(commentId: $commentId, enabled: $enabled) {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const SetCostCodeEnabledDocument = gql`\n    mutation SetCostCodeEnabled($code: String!, $enabled: Boolean!) {\n  setCostCodeEnabled(code: $code, enabled: $enabled) {\n    ...CostCodeFields\n  }\n}\n    ${CostCodeFieldsFragmentDoc}`;\nexport const SetBioRiskEnabledDocument = gql`\n    mutation SetBioRiskEnabled($code: String!, $enabled: Boolean!) {\n  setBioRiskEnabled(code: $code, enabled: $enabled) {\n    ...BioRiskFields\n  }\n}\n    ${BioRiskFieldsFragmentDoc}`;\nexport const SetFixativeEnabledDocument = gql`\n    mutation SetFixativeEnabled($name: String!, $enabled: Boolean!) {\n  setFixativeEnabled(name: $name, enabled: $enabled) {\n    ...FixativeFields\n  }\n}\n    ${FixativeFieldsFragmentDoc}`;\nexport const SetLocationCustomNameDocument = gql`\n    mutation SetLocationCustomName($locationBarcode: String!, $newCustomName: String!) {\n  setLocationCustomName(\n    locationBarcode: $locationBarcode\n    customName: $newCustomName\n  ) {\n    ...LocationFields\n  }\n}\n    ${LocationFieldsFragmentDoc}\n${LinkedLocationFieldsFragmentDoc}`;\nexport const SetProgramEnabledDocument = gql`\n    mutation SetProgramEnabled($name: String!, $enabled: Boolean!) {\n  setProgramEnabled(name: $name, enabled: $enabled) {\n    ...ProgramFields\n  }\n}\n    ${ProgramFieldsFragmentDoc}`;\nexport const SetHmdmcEnabledDocument = gql`\n    mutation SetHmdmcEnabled($hmdmc: String!, $enabled: Boolean!) {\n  setHmdmcEnabled(hmdmc: $hmdmc, enabled: $enabled) {\n    ...HmdmcFields\n  }\n}\n    ${HmdmcFieldsFragmentDoc}`;\nexport const RecordStainResultDocument = gql`\n    mutation RecordStainResult($request: ResultRequest!) {\n  recordStainResult(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const SetOmeroProjectEnabledDocument = gql`\n    mutation SetOmeroProjectEnabled($name: String!, $enabled: Boolean!) {\n  setOmeroProjectEnabled(name: $name, enabled: $enabled) {\n    ...OmeroProjectFields\n  }\n}\n    ${OmeroProjectFieldsFragmentDoc}`;\nexport const SaveSlotCopyDocument = gql`\n    mutation SaveSlotCopy($request: SlotCopySave!) {\n  saveSlotCopy(request: $request) {\n    ...SlotCopyLoadFields\n  }\n}\n    ${SlotCopyLoadFieldsFragmentDoc}`;\nexport const SetReleaseDestinationEnabledDocument = gql`\n    mutation SetReleaseDestinationEnabled($name: String!, $enabled: Boolean!) {\n  setReleaseDestinationEnabled(name: $name, enabled: $enabled) {\n    ...ReleaseDestinationFields\n  }\n}\n    ${ReleaseDestinationFieldsFragmentDoc}`;\nexport const SetProjectEnabledDocument = gql`\n    mutation SetProjectEnabled($name: String!, $enabled: Boolean!) {\n  setProjectEnabled(name: $name, enabled: $enabled) {\n    ...ProjectFields\n  }\n}\n    ${ProjectFieldsFragmentDoc}`;\nexport const SetProbePanelEnabledDocument = gql`\n    mutation SetProbePanelEnabled($name: String!, $enabled: Boolean!) {\n  setProbePanelEnabled(name: $name, enabled: $enabled) {\n    ...ProbePanelFields\n  }\n}\n    ${ProbePanelFieldsFragmentDoc}`;\nexport const SetReleaseRecipientEnabledDocument = gql`\n    mutation SetReleaseRecipientEnabled($username: String!, $enabled: Boolean!) {\n  setReleaseRecipientEnabled(username: $username, enabled: $enabled) {\n    ...ReleaseRecipientFields\n  }\n}\n    ${ReleaseRecipientFieldsFragmentDoc}`;\nexport const SetSolutionEnabledDocument = gql`\n    mutation SetSolutionEnabled($name: String!, $enabled: Boolean!) {\n  setSolutionEnabled(name: $name, enabled: $enabled) {\n    ...SolutionFields\n  }\n}\n    ${SolutionFieldsFragmentDoc}`;\nexport const SetSlotRegionEnabledDocument = gql`\n    mutation SetSlotRegionEnabled($name: String!, $enabled: Boolean!) {\n  setSlotRegionEnabled(name: $name, enabled: $enabled) {\n    ...SlotRegionFields\n  }\n}\n    ${SlotRegionFieldsFragmentDoc}`;\nexport const SetUserRoleDocument = gql`\n    mutation SetUserRole($username: String!, $role: UserRole!) {\n  setUserRole(username: $username, role: $role) {\n    ...UserFields\n  }\n}\n    ${UserFieldsFragmentDoc}`;\nexport const SetWorkTypeEnabledDocument = gql`\n    mutation SetWorkTypeEnabled($name: String!, $enabled: Boolean!) {\n  setWorkTypeEnabled(name: $name, enabled: $enabled) {\n    ...WorkTypeFields\n  }\n}\n    ${WorkTypeFieldsFragmentDoc}`;\nexport const StoreDocument = gql`\n    mutation Store($store: [StoreInput!]!, $locationBarcode: String!) {\n  store(store: $store, locationBarcode: $locationBarcode) {\n    ...LocationFields\n  }\n}\n    ${LocationFieldsFragmentDoc}\n${LinkedLocationFieldsFragmentDoc}`;\nexport const SlotCopyDocument = gql`\n    mutation SlotCopy($request: SlotCopyRequest!) {\n  slotCopy(request: $request) {\n    labware {\n      ...LabwareFields\n    }\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const TransferLocationItemsDocument = gql`\n    mutation TransferLocationItems($sourceBarcode: String!, $destinationBarcode: String!) {\n  transfer(sourceBarcode: $sourceBarcode, destinationBarcode: $destinationBarcode) {\n    ...LocationFields\n  }\n}\n    ${LocationFieldsFragmentDoc}\n${LinkedLocationFieldsFragmentDoc}`;\nexport const StainDocument = gql`\n    mutation Stain($request: StainRequest!) {\n  stain(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const StoreBarcodeDocument = gql`\n    mutation StoreBarcode($barcode: String!, $locationBarcode: String!, $address: Address) {\n  storeBarcode(\n    barcode: $barcode\n    locationBarcode: $locationBarcode\n    address: $address\n  ) {\n    location {\n      ...LocationFields\n    }\n  }\n}\n    ${LocationFieldsFragmentDoc}\n${LinkedLocationFieldsFragmentDoc}`;\nexport const UnreleaseDocument = gql`\n    mutation Unrelease($request: UnreleaseRequest!) {\n  unrelease(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const UpdateWorkNumBlocksDocument = gql`\n    mutation UpdateWorkNumBlocks($workNumber: String!, $numBlocks: Int) {\n  updateWorkNumBlocks(workNumber: $workNumber, numBlocks: $numBlocks) {\n    ...WorkFields\n  }\n}\n    ${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const SetSpeciesEnabledDocument = gql`\n    mutation SetSpeciesEnabled($name: String!, $enabled: Boolean!) {\n  setSpeciesEnabled(name: $name, enabled: $enabled) {\n    ...SpeciesFields\n  }\n}\n    ${SpeciesFieldsFragmentDoc}`;\nexport const UpdateWorkNumSlidesDocument = gql`\n    mutation UpdateWorkNumSlides($workNumber: String!, $numSlides: Int) {\n  updateWorkNumSlides(workNumber: $workNumber, numSlides: $numSlides) {\n    ...WorkFields\n  }\n}\n    ${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const UpdateWorkDnapStudyDocument = gql`\n    mutation UpdateWorkDnapStudy($workNumber: String!, $ssStudyId: Int) {\n  updateWorkDnapStudy(workNumber: $workNumber, ssStudyId: $ssStudyId) {\n    ...WorkFields\n  }\n}\n    ${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const UpdateReleaseRecipientFullNameDocument = gql`\n    mutation UpdateReleaseRecipientFullName($username: String!, $fullName: String) {\n  updateReleaseRecipientFullName(username: $username, fullName: $fullName) {\n    ...ReleaseRecipientFields\n  }\n}\n    ${ReleaseRecipientFieldsFragmentDoc}`;\nexport const UpdateDnapStudiesDocument = gql`\n    mutation UpdateDnapStudies {\n  updateDnapStudies {\n    ssId\n    name\n    enabled\n  }\n}\n    `;\nexport const UnstoreBarcodeDocument = gql`\n    mutation UnstoreBarcode($barcode: String!) {\n  unstoreBarcode(barcode: $barcode) {\n    barcode\n    address\n  }\n}\n    `;\nexport const UpdateWorkOmeroProjectDocument = gql`\n    mutation UpdateWorkOmeroProject($workNumber: String!, $omeroProject: String) {\n  updateWorkOmeroProject(workNumber: $workNumber, omeroProject: $omeroProject) {\n    ...WorkFields\n  }\n}\n    ${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const UpdateWorkNumOriginalSamplesDocument = gql`\n    mutation UpdateWorkNumOriginalSamples($workNumber: String!, $numOriginalSamples: Int) {\n  updateWorkNumOriginalSamples(\n    workNumber: $workNumber\n    numOriginalSamples: $numOriginalSamples\n  ) {\n    ...WorkFields\n  }\n}\n    ${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const UpdateWorkPriorityDocument = gql`\n    mutation UpdateWorkPriority($workNumber: String!, $priority: String) {\n  updateWorkPriority(workNumber: $workNumber, priority: $priority) {\n    ...WorkFields\n  }\n}\n    ${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const VisiumAnalysisDocument = gql`\n    mutation VisiumAnalysis($request: VisiumAnalysisRequest!) {\n  visiumAnalysis(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const UpdateWorkStatusDocument = gql`\n    mutation UpdateWorkStatus($workNumber: String!, $status: WorkStatus!, $commentId: Int) {\n  updateWorkStatus(\n    workNumber: $workNumber\n    status: $status\n    commentId: $commentId\n  ) {\n    ...WorkWithCommentFields\n  }\n}\n    ${WorkWithCommentFieldsFragmentDoc}\n${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const CleanOutDocument = gql`\n    mutation CleanOut($request: CleanOutRequest!) {\n  cleanOut(request: $request) {\n    operations {\n      id\n    }\n  }\n}\n    `;\nexport const CurrentUserDocument = gql`\n    query CurrentUser {\n  user {\n    ...UserFields\n  }\n}\n    ${UserFieldsFragmentDoc}`;\nexport const ExtractResultDocument = gql`\n    query ExtractResult($barcode: String!) {\n  extractResult(barcode: $barcode) {\n    result\n    concentration\n    labware {\n      ...LabwareFlaggedFields\n    }\n  }\n}\n    ${LabwareFlaggedFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const FindDocument = gql`\n    query Find($request: FindRequest!) {\n  find(request: $request) {\n    numRecords\n    entries {\n      labwareId\n      sampleId\n      workNumbers\n    }\n    samples {\n      id\n      section\n      tissue {\n        replicate\n        spatialLocation {\n          tissueType {\n            name\n          }\n        }\n        externalName\n        donor {\n          donorName\n        }\n        medium {\n          name\n        }\n        fixative {\n          name\n        }\n      }\n    }\n    labware {\n      id\n      barcode\n      created\n      labwareType {\n        name\n      }\n    }\n    locations {\n      id\n      barcode\n      customName\n      fixedName\n      direction\n      size {\n        numRows\n        numColumns\n      }\n      qualifiedNameWithFirstBarcode\n    }\n    labwareLocations {\n      labwareId\n      locationId\n      address\n    }\n  }\n}\n    `;\nexport const FindFlaggedLabwareDocument = gql`\n    query FindFlaggedLabware($barcode: String!) {\n  labwareFlagged(barcode: $barcode) {\n    ...LabwareFlaggedFields\n  }\n}\n    ${LabwareFlaggedFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const FindHistoryForDonorNameDocument = gql`\n    query FindHistoryForDonorName($donorName: String!) {\n  historyForDonorName(donorName: $donorName) {\n    ...HistoryFields\n  }\n}\n    ${HistoryFieldsFragmentDoc}\n${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${HistoryEntryFieldsFragmentDoc}\n${FlagBarcodesFieldsFragmentDoc}`;\nexport const FindHistoryDocument = gql`\n    query FindHistory($workNumber: String, $barcode: String, $donorName: [String!], $externalName: [String!], $eventType: String) {\n  history(\n    workNumber: $workNumber\n    barcode: $barcode\n    donorName: $donorName\n    externalName: $externalName\n    eventType: $eventType\n  ) {\n    ...HistoryFields\n  }\n}\n    ${HistoryFieldsFragmentDoc}\n${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${HistoryEntryFieldsFragmentDoc}\n${FlagBarcodesFieldsFragmentDoc}`;\nexport const FindHistoryForExternalNameDocument = gql`\n    query FindHistoryForExternalName($externalName: String!) {\n  historyForExternalName(externalName: $externalName) {\n    ...HistoryFields\n  }\n}\n    ${HistoryFieldsFragmentDoc}\n${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${HistoryEntryFieldsFragmentDoc}\n${FlagBarcodesFieldsFragmentDoc}`;\nexport const FindLabwareDocument = gql`\n    query FindLabware($barcode: String!) {\n  labware(barcode: $barcode) {\n    ...LabwareFields\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const FindHistoryForLabwareBarcodeDocument = gql`\n    query FindHistoryForLabwareBarcode($barcode: String!) {\n  historyForLabwareBarcode(barcode: $barcode) {\n    ...HistoryFields\n  }\n}\n    ${HistoryFieldsFragmentDoc}\n${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${HistoryEntryFieldsFragmentDoc}\n${FlagBarcodesFieldsFragmentDoc}`;\nexport const FindLabwareLocationDocument = gql`\n    query FindLabwareLocation($barcodes: [String!]!) {\n  stored(barcodes: $barcodes) {\n    location {\n      barcode\n    }\n  }\n}\n    `;\nexport const FindFilesDocument = gql`\n    query FindFiles($workNumbers: [String!]!) {\n  listFiles(workNumbers: $workNumbers) {\n    ...FileFields\n  }\n}\n    ${FileFieldsFragmentDoc}`;\nexport const FindHistoryGraphDocument = gql`\n    query FindHistoryGraph($workNumber: String, $barcode: String, $donorName: [String!], $externalName: [String!], $zoom: Float, $fontSize: Int) {\n  historyGraph(\n    workNumber: $workNumber\n    barcode: $barcode\n    donorName: $donorName\n    externalName: $externalName\n    zoom: $zoom\n    fontSize: $fontSize\n  ) {\n    ...GraphSVGFields\n  }\n}\n    ${GraphSvgFieldsFragmentDoc}`;\nexport const FindHistoryForWorkNumberDocument = gql`\n    query FindHistoryForWorkNumber($workNumber: String!) {\n  historyForWorkNumber(workNumber: $workNumber) {\n    ...HistoryFields\n  }\n}\n    ${HistoryFieldsFragmentDoc}\n${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${HistoryEntryFieldsFragmentDoc}\n${FlagBarcodesFieldsFragmentDoc}`;\nexport const FindHistoryForSampleIdDocument = gql`\n    query FindHistoryForSampleId($sampleId: Int!) {\n  historyForSampleId(sampleId: $sampleId) {\n    ...HistoryFields\n  }\n}\n    ${HistoryFieldsFragmentDoc}\n${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${HistoryEntryFieldsFragmentDoc}\n${FlagBarcodesFieldsFragmentDoc}`;\nexport const FindLocationByBarcodeDocument = gql`\n    query FindLocationByBarcode($barcode: String!) {\n  location(locationBarcode: $barcode) {\n    ...LocationFields\n  }\n}\n    ${LocationFieldsFragmentDoc}\n${LinkedLocationFieldsFragmentDoc}`;\nexport const FindPlanDataDocument = gql`\n    query FindPlanData($barcode: String!) {\n  planData(barcode: $barcode) {\n    sources {\n      ...LabwareFlaggedFields\n    }\n    destination {\n      ...LabwareFlaggedFields\n    }\n    plan {\n      operationType {\n        name\n      }\n      planActions {\n        ...PlanActionFields\n      }\n    }\n  }\n}\n    ${LabwareFlaggedFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${PlanActionFieldsFragmentDoc}`;\nexport const FindWorkInfoDocument = gql`\n    query FindWorkInfo($status: WorkStatus!) {\n  works(status: [$status]) {\n    workNumber\n    workRequester {\n      username\n    }\n    project {\n      name\n    }\n  }\n}\n    `;\nexport const FindReagentPlateDocument = gql`\n    query FindReagentPlate($barcode: String!) {\n  reagentPlate(barcode: $barcode) {\n    barcode\n    slots {\n      ...ReagentSlotFields\n    }\n    plateType\n  }\n}\n    ${ReagentSlotFieldsFragmentDoc}`;\nexport const FindPermDataDocument = gql`\n    query FindPermData($barcode: String!) {\n  visiumPermData(barcode: $barcode) {\n    labware {\n      ...LabwareFlaggedFields\n    }\n    addressPermData {\n      address\n      controlType\n      seconds\n      selected\n    }\n    samplePositionResults {\n      ...SamplePositionFields\n    }\n  }\n}\n    ${LabwareFlaggedFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${SamplePositionFieldsFragmentDoc}`;\nexport const FindSamplePositionsDocument = gql`\n    query FindSamplePositions($labwareBarcode: String!) {\n  samplePositions(labwareBarcode: $labwareBarcode) {\n    ...SamplePositionFields\n  }\n}\n    ${SamplePositionFieldsFragmentDoc}`;\nexport const FindPassFailsDocument = gql`\n    query FindPassFails($barcode: String!, $operationType: String!) {\n  passFails(barcode: $barcode, operationType: $operationType) {\n    operation {\n      ...OperationFields\n    }\n    slotPassFails {\n      ...SlotPassFailFields\n    }\n  }\n}\n    ${OperationFieldsFragmentDoc}\n${ActionFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${UserFieldsFragmentDoc}\n${SlotPassFailFieldsFragmentDoc}`;\nexport const FindWorkNumbersDocument = gql`\n    query FindWorkNumbers($status: WorkStatus!) {\n  works(status: [$status]) {\n    workNumber\n  }\n}\n    `;\nexport const FindMeasurementByBarcodeAndNameDocument = gql`\n    query FindMeasurementByBarcodeAndName($barcode: String!, $measurementName: String!) {\n  measurementValueFromLabwareOrParent(barcode: $barcode, name: $measurementName) {\n    address\n    string\n  }\n}\n    `;\nexport const GetBlockProcessingInfoDocument = gql`\n    query GetBlockProcessingInfo {\n  mediums {\n    name\n  }\n  comments(includeDisabled: false, category: \"Sample Processing\") {\n    ...CommentFields\n  }\n  labwareTypes {\n    ...LabwareTypeFields\n  }\n}\n    ${CommentFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}`;\nexport const FindLatestOperationDocument = gql`\n    query FindLatestOperation($barcode: String!, $operationType: String!) {\n  findLatestOp(barcode: $barcode, operationType: $operationType) {\n    id\n  }\n}\n    `;\nexport const FindWorkProgressDocument = gql`\n    query FindWorkProgress($workNumber: String, $workTypes: [String!], $programs: [String!], $statuses: [WorkStatus!], $requesters: [String!]) {\n  workProgress(\n    workNumber: $workNumber\n    workTypes: $workTypes\n    programs: $programs\n    statuses: $statuses\n    requesters: $requesters\n  ) {\n    ...WorkProgressFields\n  }\n}\n    ${WorkProgressFieldsFragmentDoc}\n${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}\n${WorkProgressTimeStampFieldFragmentDoc}`;\nexport const GetBioRisksDocument = gql`\n    query GetBioRisks($includeDisabled: Boolean) {\n  bioRisks(includeDisabled: $includeDisabled) {\n    ...BioRiskFields\n  }\n}\n    ${BioRiskFieldsFragmentDoc}`;\nexport const FindWorksCreatedByDocument = gql`\n    query FindWorksCreatedBy($username: String!) {\n  worksCreatedBy(username: $username) {\n    ...WorkFields\n  }\n}\n    ${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}`;\nexport const GetAllWorkInfoDocument = gql`\n    query GetAllWorkInfo {\n  works {\n    workNumber\n    workRequester {\n      username\n    }\n    project {\n      name\n    }\n    status\n  }\n}\n    `;\nexport const GetCommentsDocument = gql`\n    query GetComments($commentCategory: String, $includeDisabled: Boolean) {\n  comments(category: $commentCategory, includeDisabled: $includeDisabled) {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const GetCleanedOutAddressesDocument = gql`\n    query GetCleanedOutAddresses($barcode: String!) {\n  cleanedOutAddresses(barcode: $barcode)\n}\n    `;\nexport const GetDestroyInfoDocument = gql`\n    query GetDestroyInfo {\n  destructionReasons {\n    ...DestructionReasonFields\n  }\n}\n    ${DestructionReasonFieldsFragmentDoc}`;\nexport const FindStoragePathDocument = gql`\n    query FindStoragePath($locationBarcode: String!) {\n  storagePath(locationBarcode: $locationBarcode) {\n    ...LinkedLocationFields\n  }\n}\n    ${LinkedLocationFieldsFragmentDoc}`;\nexport const GetAnalyserScanDataDocument = gql`\n    query GetAnalyserScanData($barcode: String!) {\n  analyserScanData(barcode: $barcode) {\n    ...AnalyserScanDataFields\n  }\n}\n    ${AnalyserScanDataFieldsFragmentDoc}`;\nexport const GetDnapStudyDocument = gql`\n    query GetDnapStudy($ssId: Int!) {\n  dnapStudy(ssId: $ssId) {\n    ...DnapStudyFields\n  }\n}\n    ${DnapStudyFieldsFragmentDoc}`;\nexport const GetDestructionReasonsDocument = gql`\n    query GetDestructionReasons($includeDisabled: Boolean) {\n  destructionReasons(includeDisabled: $includeDisabled) {\n    ...DestructionReasonFields\n  }\n}\n    ${DestructionReasonFieldsFragmentDoc}`;\nexport const GetConfigurationDocument = gql`\n    query GetConfiguration {\n  destructionReasons(includeDisabled: true) {\n    ...DestructionReasonFields\n  }\n  comments(includeDisabled: true) {\n    ...CommentFields\n  }\n  hmdmcs(includeDisabled: true) {\n    ...HmdmcFields\n  }\n  species(includeDisabled: true) {\n    ...SpeciesFields\n  }\n  fixatives(includeDisabled: true) {\n    ...FixativeFields\n  }\n  releaseDestinations(includeDisabled: true) {\n    ...ReleaseDestinationFields\n  }\n  releaseRecipients(includeDisabled: true) {\n    ...ReleaseRecipientFields\n  }\n  projects(includeDisabled: true) {\n    ...ProjectFields\n  }\n  costCodes(includeDisabled: true) {\n    ...CostCodeFields\n  }\n  workTypes(includeDisabled: true) {\n    ...WorkTypeFields\n  }\n  equipments(includeDisabled: true) {\n    ...EquipmentFields\n  }\n  users(includeDisabled: true) {\n    ...UserFields\n  }\n  solutions(includeDisabled: true) {\n    ...SolutionFields\n  }\n  probePanels(includeDisabled: true) {\n    ...ProbePanelFields\n  }\n  programs(includeDisabled: true) {\n    ...ProgramFields\n  }\n  omeroProjects(includeDisabled: true) {\n    ...OmeroProjectFields\n  }\n  dnapStudies(includeDisabled: true) {\n    ...DnapStudyFields\n  }\n  bioRisks(includeDisabled: true) {\n    ...BioRiskFields\n  }\n  tissueTypes {\n    ...TissueTypeFields\n  }\n}\n    ${DestructionReasonFieldsFragmentDoc}\n${CommentFieldsFragmentDoc}\n${HmdmcFieldsFragmentDoc}\n${SpeciesFieldsFragmentDoc}\n${FixativeFieldsFragmentDoc}\n${ReleaseDestinationFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ProjectFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${EquipmentFieldsFragmentDoc}\n${UserFieldsFragmentDoc}\n${SolutionFieldsFragmentDoc}\n${ProbePanelFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}\n${BioRiskFieldsFragmentDoc}\n${TissueTypeFieldsFragmentDoc}`;\nexport const GetLabwareFlagDetailsDocument = gql`\n    query GetLabwareFlagDetails($barcodes: [String!]!) {\n  labwareFlagDetails(barcodes: $barcodes) {\n    barcode\n    flags {\n      barcode\n      priority\n      description\n    }\n  }\n}\n    `;\nexport const GetLabwareBioRiskCodesDocument = gql`\n    query GetLabwareBioRiskCodes($barcode: String!) {\n  labwareBioRiskCodes(barcode: $barcode) {\n    ...SampleBioRiskFields\n  }\n}\n    ${SampleBioRiskFieldsFragmentDoc}`;\nexport const GetLabwareOperationsDocument = gql`\n    query GetLabwareOperations($barcode: String!, $operationType: String!) {\n  labwareOperations(barcode: $barcode, operationType: $operationType) {\n    ...OperationFields\n  }\n}\n    ${OperationFieldsFragmentDoc}\n${ActionFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}\n${UserFieldsFragmentDoc}`;\nexport const GetParaffinProcessingInfoDocument = gql`\n    query GetParaffinProcessingInfo {\n  comments(includeDisabled: false, category: \"Paraffin processing program\") {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const GetLabwareInLocationDocument = gql`\n    query GetLabwareInLocation($locationBarcode: String!) {\n  labwareInLocation(locationBarcode: $locationBarcode) {\n    ...LabwareFields\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const GetNextReplicateNumberDocument = gql`\n    query GetNextReplicateNumber($barcodes: [String!]!) {\n  nextReplicateNumbers(barcodes: $barcodes) {\n    ...NextReplicateDataFields\n  }\n}\n    ${NextReplicateDataFieldsFragmentDoc}`;\nexport const GetEquipmentsDocument = gql`\n    query GetEquipments($category: String, $includeDisabled: Boolean) {\n  equipments(category: $category, includeDisabled: $includeDisabled) {\n    ...EquipmentFields\n  }\n}\n    ${EquipmentFieldsFragmentDoc}`;\nexport const GetPotProcessingInfoDocument = gql`\n    query GetPotProcessingInfo {\n  fixatives {\n    name\n  }\n  comments(includeDisabled: false, category: \"Sample Processing\") {\n    ...CommentFields\n  }\n  labwareTypes {\n    ...LabwareTypeFields\n  }\n}\n    ${CommentFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}`;\nexport const GetPrintersDocument = gql`\n    query GetPrinters {\n  printers {\n    ...PrinterFields\n  }\n}\n    ${PrinterFieldsFragmentDoc}`;\nexport const GetProgramsDocument = gql`\n    query GetPrograms {\n  programs {\n    name\n    enabled\n  }\n}\n    `;\nexport const GetEventTypesDocument = gql`\n    query GetEventTypes {\n  eventTypes\n}\n    `;\nexport const GetLabwareCostingDocument = gql`\n    query GetLabwareCosting($barcode: String!) {\n  labwareCosting(barcode: $barcode)\n}\n    `;\nexport const GetRecordInPlaceInfoDocument = gql`\n    query GetRecordInPlaceInfo($category: String) {\n  equipments(includeDisabled: false, category: $category) {\n    ...EquipmentFields\n  }\n}\n    ${EquipmentFieldsFragmentDoc}`;\nexport const GetProbePanelsDocument = gql`\n    query GetProbePanels {\n  probePanels {\n    name\n    enabled\n  }\n}\n    `;\nexport const GetOmeroProjectsDocument = gql`\n    query GetOmeroProjects {\n  omeroProjects {\n    name\n    enabled\n  }\n}\n    `;\nexport const GetReleaseColumnOptionsDocument = gql`\n    query GetReleaseColumnOptions {\n  releaseColumnOptions {\n    ...ReleaseFileOptionFields\n  }\n}\n    ${ReleaseFileOptionFieldsFragmentDoc}`;\nexport const GetRegistrationInfoDocument = gql`\n    query GetRegistrationInfo {\n  species {\n    name\n  }\n  hmdmcs {\n    hmdmc\n  }\n  labwareTypes {\n    ...LabwareTypeFields\n  }\n  tissueTypes {\n    name\n    spatialLocations {\n      name\n      code\n    }\n  }\n  fixatives {\n    name\n  }\n  mediums {\n    name\n  }\n  solutions {\n    name\n  }\n  slotRegions {\n    name\n  }\n  bioRisks {\n    code\n  }\n}\n    ${LabwareTypeFieldsFragmentDoc}`;\nexport const GetRecordExtractResultInfoDocument = gql`\n    query GetRecordExtractResultInfo {\n  comments(category: \"extract result\", includeDisabled: false) {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const GetReleaseInfoDocument = gql`\n    query GetReleaseInfo {\n  releaseDestinations {\n    ...ReleaseDestinationFields\n  }\n  releaseRecipients {\n    ...ReleaseRecipientFields\n  }\n  releaseColumnOptions {\n    ...ReleaseFileOptionFields\n  }\n}\n    ${ReleaseDestinationFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${ReleaseFileOptionFieldsFragmentDoc}`;\nexport const GetSampleProcessingCommentsInfoDocument = gql`\n    query GetSampleProcessingCommentsInfo {\n  comments: comments(includeDisabled: false, category: \"Sample Processing\") {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const GetRegionsOfInterestDocument = gql`\n    query GetRegionsOfInterest($barcodes: [String!]!) {\n  rois(barcodes: $barcodes) {\n    ...LabwareRoiFields\n  }\n}\n    ${LabwareRoiFieldsFragmentDoc}\n${RoiFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const GetRunNamesDocument = gql`\n    query GetRunNames($barcode: String!) {\n  runNames(barcode: $barcode)\n}\n    `;\nexport const GetRunRoisDocument = gql`\n    query GetRunRois($barcode: String!, $run: String!) {\n  runRois(barcode: $barcode, run: $run) {\n    ...RoiFields\n  }\n}\n    ${RoiFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const GetSectioningInfoDocument = gql`\n    query GetSectioningInfo {\n  labwareTypes {\n    ...LabwareTypeFields\n  }\n}\n    ${LabwareTypeFieldsFragmentDoc}`;\nexport const GetSlotRegionsDocument = gql`\n    query GetSlotRegions($includeDisabled: Boolean) {\n  slotRegions(includeDisabled: $includeDisabled) {\n    name\n    enabled\n  }\n}\n    `;\nexport const GetStainInfoDocument = gql`\n    query GetStainInfo {\n  stainTypes {\n    ...StainTypeFields\n  }\n}\n    ${StainTypeFieldsFragmentDoc}`;\nexport const GetStainingQcInfoDocument = gql`\n    query GetStainingQCInfo {\n  comments(includeDisabled: false, category: \"stain QC\") {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const GetSectioningConfirmInfoDocument = gql`\n    query GetSectioningConfirmInfo {\n  comments(category: \"section\") {\n    ...CommentFields\n  }\n  slotRegions(includeDisabled: false) {\n    ...SlotRegionFields\n  }\n}\n    ${CommentFieldsFragmentDoc}\n${SlotRegionFieldsFragmentDoc}`;\nexport const GetSuggestedLabwareForWorkDocument = gql`\n    query GetSuggestedLabwareForWork($workNumber: String!, $forRelease: Boolean) {\n  suggestedLabwareForWork(workNumber: $workNumber, forRelease: $forRelease) {\n    ...LabwareFields\n  }\n}\n    ${LabwareFieldsFragmentDoc}\n${LabwareTypeFieldsFragmentDoc}\n${SlotFieldsFragmentDoc}\n${SampleFieldsFragmentDoc}`;\nexport const GetStainReagentTypesDocument = gql`\n    query GetStainReagentTypes {\n  stainReagentTypes {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const GetSuggestedWorkForLabwareDocument = gql`\n    query GetSuggestedWorkForLabware($barcodes: [String!]!, $includeInactive: Boolean) {\n  suggestedWorkForLabware(barcodes: $barcodes, includeInactive: $includeInactive) {\n    suggestedWorks {\n      ...SuggestedWorkFields\n    }\n  }\n}\n    ${SuggestedWorkFieldsFragmentDoc}`;\nexport const GetVisiumQcInfoDocument = gql`\n    query GetVisiumQCInfo {\n  comments(includeDisabled: false, category: \"Visium QC\") {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const GetSearchInfoDocument = gql`\n    query GetSearchInfo {\n  tissueTypes {\n    name\n  }\n  labwareTypes {\n    name\n  }\n  species {\n    name\n  }\n}\n    `;\nexport const GetWorkProgressInputsDocument = gql`\n    query GetWorkProgressInputs {\n  workTypes(includeDisabled: true) {\n    name\n  }\n  programs(includeDisabled: true) {\n    name\n  }\n  releaseRecipients(includeDisabled: true) {\n    username\n  }\n}\n    `;\nexport const GetWorkNumbersDocument = gql`\n    query GetWorkNumbers {\n  works {\n    workNumber\n  }\n}\n    `;\nexport const GetWorkTypesDocument = gql`\n    query GetWorkTypes {\n  workTypes(includeDisabled: true) {\n    name\n  }\n}\n    `;\nexport const GetWorkSummaryDocument = gql`\n    query GetWorkSummary {\n  worksSummary {\n    workSummaryGroups {\n      ...WorkSummaryGroupFields\n    }\n    workTypes {\n      name\n    }\n  }\n}\n    ${WorkSummaryGroupFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}`;\nexport const GetSolutionTransferInfoDocument = gql`\n    query GetSolutionTransferInfo {\n  solutions {\n    name\n  }\n}\n    `;\nexport const ReloadSlotCopyDocument = gql`\n    query ReloadSlotCopy($operationType: String!, $workNumber: String!, $lpNumber: String!) {\n  reloadSlotCopy(\n    operationType: $operationType\n    workNumber: $workNumber\n    lpNumber: $lpNumber\n  ) {\n    ...SlotCopyLoadFields\n  }\n}\n    ${SlotCopyLoadFieldsFragmentDoc}`;\nexport const GetXeniumQcInfoDocument = gql`\n    query GetXeniumQCInfo {\n  comments(includeDisabled: false, category: \"Xenium analyser QC\") {\n    ...CommentFields\n  }\n}\n    ${CommentFieldsFragmentDoc}`;\nexport const GetWorkAllocationInfoDocument = gql`\n    query GetWorkAllocationInfo($commentCategory: String!, $workStatuses: [WorkStatus!]) {\n  projects(includeDisabled: false) {\n    ...ProjectFields\n  }\n  programs(includeDisabled: false) {\n    ...ProgramFields\n  }\n  costCodes(includeDisabled: false) {\n    ...CostCodeFields\n  }\n  worksWithComments(status: $workStatuses) {\n    ...WorkWithCommentFields\n  }\n  workTypes {\n    ...WorkTypeFields\n  }\n  comments(category: $commentCategory, includeDisabled: false) {\n    ...CommentFields\n  }\n  releaseRecipients(includeDisabled: false) {\n    ...ReleaseRecipientFields\n  }\n  omeroProjects(includeDisabled: false) {\n    ...OmeroProjectFields\n  }\n  dnapStudies(includeDisabled: false) {\n    ...DnapStudyFields\n  }\n}\n    ${ProjectFieldsFragmentDoc}\n${ProgramFieldsFragmentDoc}\n${CostCodeFieldsFragmentDoc}\n${WorkWithCommentFieldsFragmentDoc}\n${WorkFieldsFragmentDoc}\n${ReleaseRecipientFieldsFragmentDoc}\n${WorkTypeFieldsFragmentDoc}\n${OmeroProjectFieldsFragmentDoc}\n${DnapStudyFieldsFragmentDoc}\n${CommentFieldsFragmentDoc}`;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    AddCostCode(variables: AddCostCodeMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddCostCodeMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddCostCodeMutation>(AddCostCodeDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddCostCode', 'mutation', variables);\n    },\n    AddComment(variables: AddCommentMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddCommentMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddCommentMutation>(AddCommentDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddComment', 'mutation', variables);\n    },\n    AddEquipment(variables: AddEquipmentMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddEquipmentMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddEquipmentMutation>(AddEquipmentDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddEquipment', 'mutation', variables);\n    },\n    AddFixative(variables: AddFixativeMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddFixativeMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddFixativeMutation>(AddFixativeDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddFixative', 'mutation', variables);\n    },\n    AddHmdmc(variables: AddHmdmcMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddHmdmcMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddHmdmcMutation>(AddHmdmcDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddHmdmc', 'mutation', variables);\n    },\n    AddExternalID(variables: AddExternalIdMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddExternalIdMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddExternalIdMutation>(AddExternalIdDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddExternalID', 'mutation', variables);\n    },\n    AddDestructionReason(variables: AddDestructionReasonMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddDestructionReasonMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddDestructionReasonMutation>(AddDestructionReasonDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddDestructionReason', 'mutation', variables);\n    },\n    AddOmeroProject(variables: AddOmeroProjectMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddOmeroProjectMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddOmeroProjectMutation>(AddOmeroProjectDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddOmeroProject', 'mutation', variables);\n    },\n    AddProgram(variables: AddProgramMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddProgramMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddProgramMutation>(AddProgramDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddProgram', 'mutation', variables);\n    },\n    AddBioRisk(variables: AddBioRiskMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddBioRiskMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddBioRiskMutation>(AddBioRiskDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddBioRisk', 'mutation', variables);\n    },\n    AddProject(variables: AddProjectMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddProjectMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddProjectMutation>(AddProjectDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddProject', 'mutation', variables);\n    },\n    AddProbePanel(variables: AddProbePanelMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddProbePanelMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddProbePanelMutation>(AddProbePanelDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddProbePanel', 'mutation', variables);\n    },\n    AddSlotRegion(variables: AddSlotRegionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddSlotRegionMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddSlotRegionMutation>(AddSlotRegionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddSlotRegion', 'mutation', variables);\n    },\n    AddSolution(variables: AddSolutionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddSolutionMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddSolutionMutation>(AddSolutionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddSolution', 'mutation', variables);\n    },\n    AddUser(variables: AddUserMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddUserMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddUserMutation>(AddUserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddUser', 'mutation', variables);\n    },\n    AddReleaseDestination(variables: AddReleaseDestinationMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddReleaseDestinationMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddReleaseDestinationMutation>(AddReleaseDestinationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddReleaseDestination', 'mutation', variables);\n    },\n    AddWorkType(variables: AddWorkTypeMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddWorkTypeMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddWorkTypeMutation>(AddWorkTypeDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddWorkType', 'mutation', variables);\n    },\n    Confirm(variables: ConfirmMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ConfirmMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ConfirmMutation>(ConfirmDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Confirm', 'mutation', variables);\n    },\n    AddTissueType(variables: AddTissueTypeMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddTissueTypeMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddTissueTypeMutation>(AddTissueTypeDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddTissueType', 'mutation', variables);\n    },\n    AddSpatialLocations(variables: AddSpatialLocationsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddSpatialLocationsMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddSpatialLocationsMutation>(AddSpatialLocationsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddSpatialLocations', 'mutation', variables);\n    },\n    AddSpecies(variables: AddSpeciesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddSpeciesMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddSpeciesMutation>(AddSpeciesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddSpecies', 'mutation', variables);\n    },\n    Aliquot(variables: AliquotMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AliquotMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AliquotMutation>(AliquotDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Aliquot', 'mutation', variables);\n    },\n    AddReleaseRecipient(variables: AddReleaseRecipientMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AddReleaseRecipientMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AddReleaseRecipientMutation>(AddReleaseRecipientDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AddReleaseRecipient', 'mutation', variables);\n    },\n    EmptyLocation(variables: EmptyLocationMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<EmptyLocationMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<EmptyLocationMutation>(EmptyLocationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'EmptyLocation', 'mutation', variables);\n    },\n    Destroy(variables: DestroyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<DestroyMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<DestroyMutation>(DestroyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Destroy', 'mutation', variables);\n    },\n    ConfirmSection(variables: ConfirmSectionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ConfirmSectionMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ConfirmSectionMutation>(ConfirmSectionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ConfirmSection', 'mutation', variables);\n    },\n    Logout(variables?: LogoutMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<LogoutMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<LogoutMutation>(LogoutDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Logout', 'mutation', variables);\n    },\n    PerformSolutionTransfer(variables: PerformSolutionTransferMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<PerformSolutionTransferMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PerformSolutionTransferMutation>(PerformSolutionTransferDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PerformSolutionTransfer', 'mutation', variables);\n    },\n    Extract(variables: ExtractMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ExtractMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ExtractMutation>(ExtractDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Extract', 'mutation', variables);\n    },\n    Plan(variables: PlanMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<PlanMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PlanMutation>(PlanDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Plan', 'mutation', variables);\n    },\n    PerformTissueBlock(variables: PerformTissueBlockMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<PerformTissueBlockMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PerformTissueBlockMutation>(PerformTissueBlockDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PerformTissueBlock', 'mutation', variables);\n    },\n    Login(variables: LoginMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<LoginMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<LoginMutation>(LoginDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Login', 'mutation', variables);\n    },\n    PerformTissuePot(variables: PerformTissuePotMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<PerformTissuePotMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PerformTissuePotMutation>(PerformTissuePotDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PerformTissuePot', 'mutation', variables);\n    },\n    CreateWork(variables: CreateWorkMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CreateWorkMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<CreateWorkMutation>(CreateWorkDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'CreateWork', 'mutation', variables);\n    },\n    Print(variables: PrintMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<PrintMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PrintMutation>(PrintDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Print', 'mutation', variables);\n    },\n    FlagLabware(variables: FlagLabwareMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FlagLabwareMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FlagLabwareMutation>(FlagLabwareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FlagLabware', 'mutation', variables);\n    },\n    RecordComplexStain(variables: RecordComplexStainMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordComplexStainMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordComplexStainMutation>(RecordComplexStainDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordComplexStain', 'mutation', variables);\n    },\n    RecordCompletion(variables: RecordCompletionMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordCompletionMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordCompletionMutation>(RecordCompletionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordCompletion', 'mutation', variables);\n    },\n    PerformParaffinProcessing(variables: PerformParaffinProcessingMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<PerformParaffinProcessingMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PerformParaffinProcessingMutation>(PerformParaffinProcessingDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PerformParaffinProcessing', 'mutation', variables);\n    },\n    RecordAnalyser(variables: RecordAnalyserMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordAnalyserMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordAnalyserMutation>(RecordAnalyserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordAnalyser', 'mutation', variables);\n    },\n    RecordExtractResult(variables: RecordExtractResultMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordExtractResultMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordExtractResultMutation>(RecordExtractResultDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordExtractResult', 'mutation', variables);\n    },\n    RecordMetrics(variables: RecordMetricsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordMetricsMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordMetricsMutation>(RecordMetricsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordMetrics', 'mutation', variables);\n    },\n    RecordOpWithSlotMeasurements(variables: RecordOpWithSlotMeasurementsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordOpWithSlotMeasurementsMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordOpWithSlotMeasurementsMutation>(RecordOpWithSlotMeasurementsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordOpWithSlotMeasurements', 'mutation', variables);\n    },\n    RecordOpWithSlotComments(variables: RecordOpWithSlotCommentsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordOpWithSlotCommentsMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordOpWithSlotCommentsMutation>(RecordOpWithSlotCommentsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordOpWithSlotComments', 'mutation', variables);\n    },\n    RecordInPlace(variables: RecordInPlaceMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordInPlaceMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordInPlaceMutation>(RecordInPlaceDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordInPlace', 'mutation', variables);\n    },\n    RecordPerm(variables: RecordPermMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordPermMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordPermMutation>(RecordPermDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordPerm', 'mutation', variables);\n    },\n    RecordReagentTransfer(variables: RecordReagentTransferMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordReagentTransferMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordReagentTransferMutation>(RecordReagentTransferDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordReagentTransfer', 'mutation', variables);\n    },\n    RecordLibraryPrep(variables: RecordLibraryPrepMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordLibraryPrepMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordLibraryPrepMutation>(RecordLibraryPrepDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordLibraryPrep', 'mutation', variables);\n    },\n    ReactivateLabware(variables: ReactivateLabwareMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ReactivateLabwareMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ReactivateLabwareMutation>(ReactivateLabwareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ReactivateLabware', 'mutation', variables);\n    },\n    RecordRNAAnalysis(variables: RecordRnaAnalysisMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordRnaAnalysisMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordRnaAnalysisMutation>(RecordRnaAnalysisDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordRNAAnalysis', 'mutation', variables);\n    },\n    RecordSampleProcessingComments(variables: RecordSampleProcessingCommentsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordSampleProcessingCommentsMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordSampleProcessingCommentsMutation>(RecordSampleProcessingCommentsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordSampleProcessingComments', 'mutation', variables);\n    },\n    RecordProbeOperation(variables: RecordProbeOperationMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordProbeOperationMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordProbeOperationMutation>(RecordProbeOperationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordProbeOperation', 'mutation', variables);\n    },\n    RecordQCLabware(variables: RecordQcLabwareMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordQcLabwareMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordQcLabwareMutation>(RecordQcLabwareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordQCLabware', 'mutation', variables);\n    },\n    RegisterOriginalSamples(variables: RegisterOriginalSamplesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RegisterOriginalSamplesMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RegisterOriginalSamplesMutation>(RegisterOriginalSamplesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RegisterOriginalSamples', 'mutation', variables);\n    },\n    RecordVisiumQC(variables: RecordVisiumQcMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordVisiumQcMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordVisiumQcMutation>(RecordVisiumQcDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordVisiumQC', 'mutation', variables);\n    },\n    ReleaseLabware(variables: ReleaseLabwareMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ReleaseLabwareMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ReleaseLabwareMutation>(ReleaseLabwareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ReleaseLabware', 'mutation', variables);\n    },\n    RegisterSections(variables: RegisterSectionsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RegisterSectionsMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RegisterSectionsMutation>(RegisterSectionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RegisterSections', 'mutation', variables);\n    },\n    RegisterAsEndUser(variables: RegisterAsEndUserMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RegisterAsEndUserMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RegisterAsEndUserMutation>(RegisterAsEndUserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RegisterAsEndUser', 'mutation', variables);\n    },\n    RegisterTissues(variables: RegisterTissuesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RegisterTissuesMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RegisterTissuesMutation>(RegisterTissuesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RegisterTissues', 'mutation', variables);\n    },\n    Segmentation(variables: SegmentationMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SegmentationMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SegmentationMutation>(SegmentationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Segmentation', 'mutation', variables);\n    },\n    RecordOrientationQC(variables: RecordOrientationQcMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordOrientationQcMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordOrientationQcMutation>(RecordOrientationQcDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordOrientationQC', 'mutation', variables);\n    },\n    SetEquipmentEnabled(variables: SetEquipmentEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetEquipmentEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetEquipmentEnabledMutation>(SetEquipmentEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetEquipmentEnabled', 'mutation', variables);\n    },\n    SetDestructionReasonEnabled(variables: SetDestructionReasonEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetDestructionReasonEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetDestructionReasonEnabledMutation>(SetDestructionReasonEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetDestructionReasonEnabled', 'mutation', variables);\n    },\n    SetCommentEnabled(variables: SetCommentEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetCommentEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetCommentEnabledMutation>(SetCommentEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetCommentEnabled', 'mutation', variables);\n    },\n    SetCostCodeEnabled(variables: SetCostCodeEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetCostCodeEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetCostCodeEnabledMutation>(SetCostCodeEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetCostCodeEnabled', 'mutation', variables);\n    },\n    SetBioRiskEnabled(variables: SetBioRiskEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetBioRiskEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetBioRiskEnabledMutation>(SetBioRiskEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetBioRiskEnabled', 'mutation', variables);\n    },\n    SetFixativeEnabled(variables: SetFixativeEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetFixativeEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetFixativeEnabledMutation>(SetFixativeEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetFixativeEnabled', 'mutation', variables);\n    },\n    SetLocationCustomName(variables: SetLocationCustomNameMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetLocationCustomNameMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetLocationCustomNameMutation>(SetLocationCustomNameDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetLocationCustomName', 'mutation', variables);\n    },\n    SetProgramEnabled(variables: SetProgramEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetProgramEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetProgramEnabledMutation>(SetProgramEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetProgramEnabled', 'mutation', variables);\n    },\n    SetHmdmcEnabled(variables: SetHmdmcEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetHmdmcEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetHmdmcEnabledMutation>(SetHmdmcEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetHmdmcEnabled', 'mutation', variables);\n    },\n    RecordStainResult(variables: RecordStainResultMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<RecordStainResultMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<RecordStainResultMutation>(RecordStainResultDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'RecordStainResult', 'mutation', variables);\n    },\n    SetOmeroProjectEnabled(variables: SetOmeroProjectEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetOmeroProjectEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetOmeroProjectEnabledMutation>(SetOmeroProjectEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetOmeroProjectEnabled', 'mutation', variables);\n    },\n    SaveSlotCopy(variables: SaveSlotCopyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SaveSlotCopyMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SaveSlotCopyMutation>(SaveSlotCopyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SaveSlotCopy', 'mutation', variables);\n    },\n    SetReleaseDestinationEnabled(variables: SetReleaseDestinationEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetReleaseDestinationEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetReleaseDestinationEnabledMutation>(SetReleaseDestinationEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetReleaseDestinationEnabled', 'mutation', variables);\n    },\n    SetProjectEnabled(variables: SetProjectEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetProjectEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetProjectEnabledMutation>(SetProjectEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetProjectEnabled', 'mutation', variables);\n    },\n    SetProbePanelEnabled(variables: SetProbePanelEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetProbePanelEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetProbePanelEnabledMutation>(SetProbePanelEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetProbePanelEnabled', 'mutation', variables);\n    },\n    SetReleaseRecipientEnabled(variables: SetReleaseRecipientEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetReleaseRecipientEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetReleaseRecipientEnabledMutation>(SetReleaseRecipientEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetReleaseRecipientEnabled', 'mutation', variables);\n    },\n    SetSolutionEnabled(variables: SetSolutionEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetSolutionEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetSolutionEnabledMutation>(SetSolutionEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetSolutionEnabled', 'mutation', variables);\n    },\n    SetSlotRegionEnabled(variables: SetSlotRegionEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetSlotRegionEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetSlotRegionEnabledMutation>(SetSlotRegionEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetSlotRegionEnabled', 'mutation', variables);\n    },\n    SetUserRole(variables: SetUserRoleMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetUserRoleMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetUserRoleMutation>(SetUserRoleDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetUserRole', 'mutation', variables);\n    },\n    SetWorkTypeEnabled(variables: SetWorkTypeEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetWorkTypeEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetWorkTypeEnabledMutation>(SetWorkTypeEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetWorkTypeEnabled', 'mutation', variables);\n    },\n    Store(variables: StoreMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<StoreMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<StoreMutation>(StoreDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Store', 'mutation', variables);\n    },\n    SlotCopy(variables: SlotCopyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SlotCopyMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SlotCopyMutation>(SlotCopyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SlotCopy', 'mutation', variables);\n    },\n    TransferLocationItems(variables: TransferLocationItemsMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<TransferLocationItemsMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TransferLocationItemsMutation>(TransferLocationItemsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TransferLocationItems', 'mutation', variables);\n    },\n    Stain(variables: StainMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<StainMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<StainMutation>(StainDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Stain', 'mutation', variables);\n    },\n    StoreBarcode(variables: StoreBarcodeMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<StoreBarcodeMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<StoreBarcodeMutation>(StoreBarcodeDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'StoreBarcode', 'mutation', variables);\n    },\n    Unrelease(variables: UnreleaseMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UnreleaseMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UnreleaseMutation>(UnreleaseDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Unrelease', 'mutation', variables);\n    },\n    UpdateWorkNumBlocks(variables: UpdateWorkNumBlocksMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateWorkNumBlocksMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateWorkNumBlocksMutation>(UpdateWorkNumBlocksDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateWorkNumBlocks', 'mutation', variables);\n    },\n    SetSpeciesEnabled(variables: SetSpeciesEnabledMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<SetSpeciesEnabledMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<SetSpeciesEnabledMutation>(SetSpeciesEnabledDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'SetSpeciesEnabled', 'mutation', variables);\n    },\n    UpdateWorkNumSlides(variables: UpdateWorkNumSlidesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateWorkNumSlidesMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateWorkNumSlidesMutation>(UpdateWorkNumSlidesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateWorkNumSlides', 'mutation', variables);\n    },\n    UpdateWorkDnapStudy(variables: UpdateWorkDnapStudyMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateWorkDnapStudyMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateWorkDnapStudyMutation>(UpdateWorkDnapStudyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateWorkDnapStudy', 'mutation', variables);\n    },\n    UpdateReleaseRecipientFullName(variables: UpdateReleaseRecipientFullNameMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateReleaseRecipientFullNameMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateReleaseRecipientFullNameMutation>(UpdateReleaseRecipientFullNameDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateReleaseRecipientFullName', 'mutation', variables);\n    },\n    UpdateDnapStudies(variables?: UpdateDnapStudiesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateDnapStudiesMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateDnapStudiesMutation>(UpdateDnapStudiesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateDnapStudies', 'mutation', variables);\n    },\n    UnstoreBarcode(variables: UnstoreBarcodeMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UnstoreBarcodeMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UnstoreBarcodeMutation>(UnstoreBarcodeDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UnstoreBarcode', 'mutation', variables);\n    },\n    UpdateWorkOmeroProject(variables: UpdateWorkOmeroProjectMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateWorkOmeroProjectMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateWorkOmeroProjectMutation>(UpdateWorkOmeroProjectDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateWorkOmeroProject', 'mutation', variables);\n    },\n    UpdateWorkNumOriginalSamples(variables: UpdateWorkNumOriginalSamplesMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateWorkNumOriginalSamplesMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateWorkNumOriginalSamplesMutation>(UpdateWorkNumOriginalSamplesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateWorkNumOriginalSamples', 'mutation', variables);\n    },\n    UpdateWorkPriority(variables: UpdateWorkPriorityMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateWorkPriorityMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateWorkPriorityMutation>(UpdateWorkPriorityDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateWorkPriority', 'mutation', variables);\n    },\n    VisiumAnalysis(variables: VisiumAnalysisMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<VisiumAnalysisMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<VisiumAnalysisMutation>(VisiumAnalysisDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'VisiumAnalysis', 'mutation', variables);\n    },\n    UpdateWorkStatus(variables: UpdateWorkStatusMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<UpdateWorkStatusMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UpdateWorkStatusMutation>(UpdateWorkStatusDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'UpdateWorkStatus', 'mutation', variables);\n    },\n    CleanOut(variables: CleanOutMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CleanOutMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<CleanOutMutation>(CleanOutDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'CleanOut', 'mutation', variables);\n    },\n    CurrentUser(variables?: CurrentUserQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<CurrentUserQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<CurrentUserQuery>(CurrentUserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'CurrentUser', 'query', variables);\n    },\n    ExtractResult(variables: ExtractResultQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ExtractResultQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ExtractResultQuery>(ExtractResultDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ExtractResult', 'query', variables);\n    },\n    Find(variables: FindQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindQuery>(FindDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Find', 'query', variables);\n    },\n    FindFlaggedLabware(variables: FindFlaggedLabwareQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindFlaggedLabwareQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindFlaggedLabwareQuery>(FindFlaggedLabwareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindFlaggedLabware', 'query', variables);\n    },\n    FindHistoryForDonorName(variables: FindHistoryForDonorNameQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindHistoryForDonorNameQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindHistoryForDonorNameQuery>(FindHistoryForDonorNameDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindHistoryForDonorName', 'query', variables);\n    },\n    FindHistory(variables?: FindHistoryQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindHistoryQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindHistoryQuery>(FindHistoryDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindHistory', 'query', variables);\n    },\n    FindHistoryForExternalName(variables: FindHistoryForExternalNameQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindHistoryForExternalNameQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindHistoryForExternalNameQuery>(FindHistoryForExternalNameDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindHistoryForExternalName', 'query', variables);\n    },\n    FindLabware(variables: FindLabwareQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindLabwareQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindLabwareQuery>(FindLabwareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindLabware', 'query', variables);\n    },\n    FindHistoryForLabwareBarcode(variables: FindHistoryForLabwareBarcodeQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindHistoryForLabwareBarcodeQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindHistoryForLabwareBarcodeQuery>(FindHistoryForLabwareBarcodeDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindHistoryForLabwareBarcode', 'query', variables);\n    },\n    FindLabwareLocation(variables: FindLabwareLocationQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindLabwareLocationQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindLabwareLocationQuery>(FindLabwareLocationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindLabwareLocation', 'query', variables);\n    },\n    FindFiles(variables: FindFilesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindFilesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindFilesQuery>(FindFilesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindFiles', 'query', variables);\n    },\n    FindHistoryGraph(variables?: FindHistoryGraphQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindHistoryGraphQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindHistoryGraphQuery>(FindHistoryGraphDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindHistoryGraph', 'query', variables);\n    },\n    FindHistoryForWorkNumber(variables: FindHistoryForWorkNumberQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindHistoryForWorkNumberQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindHistoryForWorkNumberQuery>(FindHistoryForWorkNumberDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindHistoryForWorkNumber', 'query', variables);\n    },\n    FindHistoryForSampleId(variables: FindHistoryForSampleIdQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindHistoryForSampleIdQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindHistoryForSampleIdQuery>(FindHistoryForSampleIdDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindHistoryForSampleId', 'query', variables);\n    },\n    FindLocationByBarcode(variables: FindLocationByBarcodeQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindLocationByBarcodeQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindLocationByBarcodeQuery>(FindLocationByBarcodeDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindLocationByBarcode', 'query', variables);\n    },\n    FindPlanData(variables: FindPlanDataQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindPlanDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindPlanDataQuery>(FindPlanDataDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindPlanData', 'query', variables);\n    },\n    FindWorkInfo(variables: FindWorkInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindWorkInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindWorkInfoQuery>(FindWorkInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindWorkInfo', 'query', variables);\n    },\n    FindReagentPlate(variables: FindReagentPlateQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindReagentPlateQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindReagentPlateQuery>(FindReagentPlateDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindReagentPlate', 'query', variables);\n    },\n    FindPermData(variables: FindPermDataQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindPermDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindPermDataQuery>(FindPermDataDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindPermData', 'query', variables);\n    },\n    FindSamplePositions(variables: FindSamplePositionsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindSamplePositionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindSamplePositionsQuery>(FindSamplePositionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindSamplePositions', 'query', variables);\n    },\n    FindPassFails(variables: FindPassFailsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindPassFailsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindPassFailsQuery>(FindPassFailsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindPassFails', 'query', variables);\n    },\n    FindWorkNumbers(variables: FindWorkNumbersQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindWorkNumbersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindWorkNumbersQuery>(FindWorkNumbersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindWorkNumbers', 'query', variables);\n    },\n    FindMeasurementByBarcodeAndName(variables: FindMeasurementByBarcodeAndNameQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindMeasurementByBarcodeAndNameQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindMeasurementByBarcodeAndNameQuery>(FindMeasurementByBarcodeAndNameDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindMeasurementByBarcodeAndName', 'query', variables);\n    },\n    GetBlockProcessingInfo(variables?: GetBlockProcessingInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetBlockProcessingInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetBlockProcessingInfoQuery>(GetBlockProcessingInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetBlockProcessingInfo', 'query', variables);\n    },\n    FindLatestOperation(variables: FindLatestOperationQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindLatestOperationQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindLatestOperationQuery>(FindLatestOperationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindLatestOperation', 'query', variables);\n    },\n    FindWorkProgress(variables?: FindWorkProgressQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindWorkProgressQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindWorkProgressQuery>(FindWorkProgressDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindWorkProgress', 'query', variables);\n    },\n    GetBioRisks(variables?: GetBioRisksQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetBioRisksQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetBioRisksQuery>(GetBioRisksDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetBioRisks', 'query', variables);\n    },\n    FindWorksCreatedBy(variables: FindWorksCreatedByQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindWorksCreatedByQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindWorksCreatedByQuery>(FindWorksCreatedByDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindWorksCreatedBy', 'query', variables);\n    },\n    GetAllWorkInfo(variables?: GetAllWorkInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetAllWorkInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetAllWorkInfoQuery>(GetAllWorkInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetAllWorkInfo', 'query', variables);\n    },\n    GetComments(variables?: GetCommentsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetCommentsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetCommentsQuery>(GetCommentsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetComments', 'query', variables);\n    },\n    GetCleanedOutAddresses(variables: GetCleanedOutAddressesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetCleanedOutAddressesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetCleanedOutAddressesQuery>(GetCleanedOutAddressesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetCleanedOutAddresses', 'query', variables);\n    },\n    GetDestroyInfo(variables?: GetDestroyInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetDestroyInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetDestroyInfoQuery>(GetDestroyInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetDestroyInfo', 'query', variables);\n    },\n    FindStoragePath(variables: FindStoragePathQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<FindStoragePathQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<FindStoragePathQuery>(FindStoragePathDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'FindStoragePath', 'query', variables);\n    },\n    GetAnalyserScanData(variables: GetAnalyserScanDataQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetAnalyserScanDataQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetAnalyserScanDataQuery>(GetAnalyserScanDataDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetAnalyserScanData', 'query', variables);\n    },\n    GetDnapStudy(variables: GetDnapStudyQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetDnapStudyQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetDnapStudyQuery>(GetDnapStudyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetDnapStudy', 'query', variables);\n    },\n    GetDestructionReasons(variables?: GetDestructionReasonsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetDestructionReasonsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetDestructionReasonsQuery>(GetDestructionReasonsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetDestructionReasons', 'query', variables);\n    },\n    GetConfiguration(variables?: GetConfigurationQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetConfigurationQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetConfigurationQuery>(GetConfigurationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetConfiguration', 'query', variables);\n    },\n    GetLabwareFlagDetails(variables: GetLabwareFlagDetailsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetLabwareFlagDetailsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetLabwareFlagDetailsQuery>(GetLabwareFlagDetailsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetLabwareFlagDetails', 'query', variables);\n    },\n    GetLabwareBioRiskCodes(variables: GetLabwareBioRiskCodesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetLabwareBioRiskCodesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetLabwareBioRiskCodesQuery>(GetLabwareBioRiskCodesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetLabwareBioRiskCodes', 'query', variables);\n    },\n    GetLabwareOperations(variables: GetLabwareOperationsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetLabwareOperationsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetLabwareOperationsQuery>(GetLabwareOperationsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetLabwareOperations', 'query', variables);\n    },\n    GetParaffinProcessingInfo(variables?: GetParaffinProcessingInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetParaffinProcessingInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetParaffinProcessingInfoQuery>(GetParaffinProcessingInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetParaffinProcessingInfo', 'query', variables);\n    },\n    GetLabwareInLocation(variables: GetLabwareInLocationQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetLabwareInLocationQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetLabwareInLocationQuery>(GetLabwareInLocationDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetLabwareInLocation', 'query', variables);\n    },\n    GetNextReplicateNumber(variables: GetNextReplicateNumberQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetNextReplicateNumberQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetNextReplicateNumberQuery>(GetNextReplicateNumberDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetNextReplicateNumber', 'query', variables);\n    },\n    GetEquipments(variables?: GetEquipmentsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetEquipmentsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetEquipmentsQuery>(GetEquipmentsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetEquipments', 'query', variables);\n    },\n    GetPotProcessingInfo(variables?: GetPotProcessingInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetPotProcessingInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetPotProcessingInfoQuery>(GetPotProcessingInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetPotProcessingInfo', 'query', variables);\n    },\n    GetPrinters(variables?: GetPrintersQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetPrintersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetPrintersQuery>(GetPrintersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetPrinters', 'query', variables);\n    },\n    GetPrograms(variables?: GetProgramsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetProgramsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetProgramsQuery>(GetProgramsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetPrograms', 'query', variables);\n    },\n    GetEventTypes(variables?: GetEventTypesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetEventTypesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetEventTypesQuery>(GetEventTypesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetEventTypes', 'query', variables);\n    },\n    GetLabwareCosting(variables: GetLabwareCostingQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetLabwareCostingQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetLabwareCostingQuery>(GetLabwareCostingDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetLabwareCosting', 'query', variables);\n    },\n    GetRecordInPlaceInfo(variables?: GetRecordInPlaceInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetRecordInPlaceInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetRecordInPlaceInfoQuery>(GetRecordInPlaceInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetRecordInPlaceInfo', 'query', variables);\n    },\n    GetProbePanels(variables?: GetProbePanelsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetProbePanelsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetProbePanelsQuery>(GetProbePanelsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetProbePanels', 'query', variables);\n    },\n    GetOmeroProjects(variables?: GetOmeroProjectsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetOmeroProjectsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetOmeroProjectsQuery>(GetOmeroProjectsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetOmeroProjects', 'query', variables);\n    },\n    GetReleaseColumnOptions(variables?: GetReleaseColumnOptionsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetReleaseColumnOptionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetReleaseColumnOptionsQuery>(GetReleaseColumnOptionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetReleaseColumnOptions', 'query', variables);\n    },\n    GetRegistrationInfo(variables?: GetRegistrationInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetRegistrationInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetRegistrationInfoQuery>(GetRegistrationInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetRegistrationInfo', 'query', variables);\n    },\n    GetRecordExtractResultInfo(variables?: GetRecordExtractResultInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetRecordExtractResultInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetRecordExtractResultInfoQuery>(GetRecordExtractResultInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetRecordExtractResultInfo', 'query', variables);\n    },\n    GetReleaseInfo(variables?: GetReleaseInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetReleaseInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetReleaseInfoQuery>(GetReleaseInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetReleaseInfo', 'query', variables);\n    },\n    GetSampleProcessingCommentsInfo(variables?: GetSampleProcessingCommentsInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSampleProcessingCommentsInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetSampleProcessingCommentsInfoQuery>(GetSampleProcessingCommentsInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetSampleProcessingCommentsInfo', 'query', variables);\n    },\n    GetRegionsOfInterest(variables: GetRegionsOfInterestQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetRegionsOfInterestQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetRegionsOfInterestQuery>(GetRegionsOfInterestDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetRegionsOfInterest', 'query', variables);\n    },\n    GetRunNames(variables: GetRunNamesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetRunNamesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetRunNamesQuery>(GetRunNamesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetRunNames', 'query', variables);\n    },\n    GetRunRois(variables: GetRunRoisQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetRunRoisQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetRunRoisQuery>(GetRunRoisDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetRunRois', 'query', variables);\n    },\n    GetSectioningInfo(variables?: GetSectioningInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSectioningInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetSectioningInfoQuery>(GetSectioningInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetSectioningInfo', 'query', variables);\n    },\n    GetSlotRegions(variables?: GetSlotRegionsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSlotRegionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetSlotRegionsQuery>(GetSlotRegionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetSlotRegions', 'query', variables);\n    },\n    GetStainInfo(variables?: GetStainInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetStainInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetStainInfoQuery>(GetStainInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetStainInfo', 'query', variables);\n    },\n    GetStainingQCInfo(variables?: GetStainingQcInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetStainingQcInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetStainingQcInfoQuery>(GetStainingQcInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetStainingQCInfo', 'query', variables);\n    },\n    GetSectioningConfirmInfo(variables?: GetSectioningConfirmInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSectioningConfirmInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetSectioningConfirmInfoQuery>(GetSectioningConfirmInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetSectioningConfirmInfo', 'query', variables);\n    },\n    GetSuggestedLabwareForWork(variables: GetSuggestedLabwareForWorkQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSuggestedLabwareForWorkQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetSuggestedLabwareForWorkQuery>(GetSuggestedLabwareForWorkDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetSuggestedLabwareForWork', 'query', variables);\n    },\n    GetStainReagentTypes(variables?: GetStainReagentTypesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetStainReagentTypesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetStainReagentTypesQuery>(GetStainReagentTypesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetStainReagentTypes', 'query', variables);\n    },\n    GetSuggestedWorkForLabware(variables: GetSuggestedWorkForLabwareQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSuggestedWorkForLabwareQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetSuggestedWorkForLabwareQuery>(GetSuggestedWorkForLabwareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetSuggestedWorkForLabware', 'query', variables);\n    },\n    GetVisiumQCInfo(variables?: GetVisiumQcInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetVisiumQcInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetVisiumQcInfoQuery>(GetVisiumQcInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetVisiumQCInfo', 'query', variables);\n    },\n    GetSearchInfo(variables?: GetSearchInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSearchInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetSearchInfoQuery>(GetSearchInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetSearchInfo', 'query', variables);\n    },\n    GetWorkProgressInputs(variables?: GetWorkProgressInputsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetWorkProgressInputsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkProgressInputsQuery>(GetWorkProgressInputsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetWorkProgressInputs', 'query', variables);\n    },\n    GetWorkNumbers(variables?: GetWorkNumbersQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetWorkNumbersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkNumbersQuery>(GetWorkNumbersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetWorkNumbers', 'query', variables);\n    },\n    GetWorkTypes(variables?: GetWorkTypesQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetWorkTypesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkTypesQuery>(GetWorkTypesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetWorkTypes', 'query', variables);\n    },\n    GetWorkSummary(variables?: GetWorkSummaryQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetWorkSummaryQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkSummaryQuery>(GetWorkSummaryDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetWorkSummary', 'query', variables);\n    },\n    GetSolutionTransferInfo(variables?: GetSolutionTransferInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetSolutionTransferInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetSolutionTransferInfoQuery>(GetSolutionTransferInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetSolutionTransferInfo', 'query', variables);\n    },\n    ReloadSlotCopy(variables: ReloadSlotCopyQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<ReloadSlotCopyQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<ReloadSlotCopyQuery>(ReloadSlotCopyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'ReloadSlotCopy', 'query', variables);\n    },\n    GetXeniumQCInfo(variables?: GetXeniumQcInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetXeniumQcInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetXeniumQcInfoQuery>(GetXeniumQcInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetXeniumQCInfo', 'query', variables);\n    },\n    GetWorkAllocationInfo(variables: GetWorkAllocationInfoQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<GetWorkAllocationInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetWorkAllocationInfoQuery>(GetWorkAllocationInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GetWorkAllocationInfo', 'query', variables);\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;"],"names":[],"sourceRoot":""}